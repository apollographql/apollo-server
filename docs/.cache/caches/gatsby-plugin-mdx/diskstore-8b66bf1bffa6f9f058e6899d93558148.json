{"expireTime":9007200901520844000,"key":"gatsby-plugin-mdx-entire-payload-e8327f98bc12fd7189d3ed33dfa0350f-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import { MultiCodeBlock } from 'gatsby-theme-apollo-docs';","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":59,"offset":59},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Apollo Server uses a ","position":{"start":{"line":4,"column":1,"offset":61},"end":{"line":4,"column":22,"offset":82},"indent":[]}},{"type":"link","title":null,"url":"../integrations/plugins/#request-lifecycle-event-flow","children":[{"type":"text","value":"multi-step request pipeline","position":{"start":{"line":4,"column":23,"offset":83},"end":{"line":4,"column":50,"offset":110},"indent":[]}}],"position":{"start":{"line":4,"column":22,"offset":82},"end":{"line":4,"column":106,"offset":166},"indent":[]}},{"type":"text","value":" to validate and execute incoming GraphQL operations. This pipeline supports integration with custom plugins at each step, which can affect an operation's execution. Because of this, it's important to perform ","position":{"start":{"line":4,"column":106,"offset":166},"end":{"line":4,"column":315,"offset":375},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"integration tests","position":{"start":{"line":4,"column":317,"offset":377},"end":{"line":4,"column":334,"offset":394},"indent":[]}}],"position":{"start":{"line":4,"column":315,"offset":375},"end":{"line":4,"column":336,"offset":396},"indent":[]}},{"type":"text","value":" with a variety of operations to ensure your request pipeline works as expected.","position":{"start":{"line":4,"column":336,"offset":396},"end":{"line":4,"column":416,"offset":476},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":61},"end":{"line":4,"column":416,"offset":476},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are two main options for integration testing with Apollo Server:","position":{"start":{"line":6,"column":1,"offset":478},"end":{"line":6,"column":71,"offset":548},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":478},"end":{"line":6,"column":71,"offset":548},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using ","position":{"start":{"line":7,"column":3,"offset":551},"end":{"line":7,"column":9,"offset":557},"indent":[]}},{"type":"inlineCode","value":"ApolloServer","position":{"start":{"line":7,"column":9,"offset":557},"end":{"line":7,"column":23,"offset":571},"indent":[]}},{"type":"text","value":"'s ","position":{"start":{"line":7,"column":23,"offset":571},"end":{"line":7,"column":26,"offset":574},"indent":[]}},{"type":"inlineCode","value":"executeOperation","position":{"start":{"line":7,"column":26,"offset":574},"end":{"line":7,"column":44,"offset":592},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":7,"column":44,"offset":592},"end":{"line":7,"column":52,"offset":600},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":551},"end":{"line":7,"column":52,"offset":600},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":549},"end":{"line":7,"column":52,"offset":600},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Setting up an HTTP client to query your server.","position":{"start":{"line":8,"column":3,"offset":603},"end":{"line":8,"column":50,"offset":650},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":603},"end":{"line":8,"column":50,"offset":650},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":601},"end":{"line":8,"column":50,"offset":650},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":549},"end":{"line":8,"column":50,"offset":650},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Testing using ","position":{"start":{"line":10,"column":4,"offset":655},"end":{"line":10,"column":18,"offset":669},"indent":[]}},{"type":"inlineCode","value":"executeOperation","position":{"start":{"line":10,"column":18,"offset":669},"end":{"line":10,"column":36,"offset":687},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":652},"end":{"line":10,"column":36,"offset":687},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Apollo Server's ","position":{"start":{"line":12,"column":1,"offset":689},"end":{"line":12,"column":17,"offset":705},"indent":[]}},{"type":"inlineCode","value":"executeOperation","position":{"start":{"line":12,"column":17,"offset":705},"end":{"line":12,"column":35,"offset":723},"indent":[]}},{"type":"text","value":" method enables you to run operations through the request pipeline ","position":{"start":{"line":12,"column":35,"offset":723},"end":{"line":12,"column":102,"offset":790},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"without","position":{"start":{"line":12,"column":103,"offset":791},"end":{"line":12,"column":110,"offset":798},"indent":[]}}],"position":{"start":{"line":12,"column":102,"offset":790},"end":{"line":12,"column":111,"offset":799},"indent":[]}},{"type":"text","value":" sending an HTTP request.","position":{"start":{"line":12,"column":111,"offset":799},"end":{"line":12,"column":136,"offset":824},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":689},"end":{"line":12,"column":136,"offset":824},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":14,"column":1,"offset":826},"end":{"line":14,"column":5,"offset":830},"indent":[]}},{"type":"link","title":null,"url":"../api/apollo-server/#executeoperation","children":[{"type":"inlineCode","value":"executeOperation","position":{"start":{"line":14,"column":6,"offset":831},"end":{"line":14,"column":24,"offset":849},"indent":[]}},{"type":"text","value":" method","position":{"start":{"line":14,"column":24,"offset":849},"end":{"line":14,"column":31,"offset":856},"indent":[]}}],"position":{"start":{"line":14,"column":5,"offset":830},"end":{"line":14,"column":72,"offset":897},"indent":[]}},{"type":"text","value":" accepts the following arguments:","position":{"start":{"line":14,"column":72,"offset":897},"end":{"line":14,"column":105,"offset":930},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":826},"end":{"line":14,"column":105,"offset":930},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An object that describes the GraphQL operation to execute.","position":{"start":{"line":15,"column":3,"offset":933},"end":{"line":15,"column":61,"offset":991},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":933},"end":{"line":15,"column":61,"offset":991},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This object must include a ","position":{"start":{"line":16,"column":5,"offset":996},"end":{"line":16,"column":32,"offset":1023},"indent":[]}},{"type":"inlineCode","value":"query","position":{"start":{"line":16,"column":32,"offset":1023},"end":{"line":16,"column":39,"offset":1030},"indent":[]}},{"type":"text","value":" field specifying the GraphQL operation to run. You can use ","position":{"start":{"line":16,"column":39,"offset":1030},"end":{"line":16,"column":99,"offset":1090},"indent":[]}},{"type":"inlineCode","value":"executeOperation","position":{"start":{"line":16,"column":99,"offset":1090},"end":{"line":16,"column":117,"offset":1108},"indent":[]}},{"type":"text","value":" to execute both queries and mutations, but both use the ","position":{"start":{"line":16,"column":117,"offset":1108},"end":{"line":16,"column":174,"offset":1165},"indent":[]}},{"type":"inlineCode","value":"query","position":{"start":{"line":16,"column":174,"offset":1165},"end":{"line":16,"column":181,"offset":1172},"indent":[]}},{"type":"text","value":" field.","position":{"start":{"line":16,"column":181,"offset":1172},"end":{"line":16,"column":188,"offset":1179},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":996},"end":{"line":16,"column":188,"offset":1179},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":994},"end":{"line":16,"column":188,"offset":1179},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":994},"end":{"line":16,"column":188,"offset":1179},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":931},"end":{"line":16,"column":188,"offset":1179},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An optional argument that is passed in to the ","position":{"start":{"line":17,"column":3,"offset":1182},"end":{"line":17,"column":49,"offset":1228},"indent":[]}},{"type":"inlineCode","value":"ApolloServer","position":{"start":{"line":17,"column":49,"offset":1228},"end":{"line":17,"column":63,"offset":1242},"indent":[]}},{"type":"text","value":" instance's ","position":{"start":{"line":17,"column":63,"offset":1242},"end":{"line":17,"column":75,"offset":1254},"indent":[]}},{"type":"link","title":null,"url":"../data/resolvers/#the-context-argument","children":[{"type":"inlineCode","value":"context","position":{"start":{"line":17,"column":76,"offset":1255},"end":{"line":17,"column":85,"offset":1264},"indent":[]}},{"type":"text","value":" function","position":{"start":{"line":17,"column":85,"offset":1264},"end":{"line":17,"column":94,"offset":1273},"indent":[]}}],"position":{"start":{"line":17,"column":75,"offset":1254},"end":{"line":17,"column":136,"offset":1315},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":17,"column":136,"offset":1315},"end":{"line":17,"column":137,"offset":1316},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":1182},"end":{"line":17,"column":137,"offset":1316},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1180},"end":{"line":17,"column":137,"offset":1316},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":931},"end":{"line":17,"column":137,"offset":1316},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Below is a simplified example of setting up a test using the JavaScript testing library ","position":{"start":{"line":19,"column":1,"offset":1318},"end":{"line":19,"column":89,"offset":1406},"indent":[]}},{"type":"link","title":null,"url":"https://jestjs.io/","children":[{"type":"text","value":"Jest","position":{"start":{"line":19,"column":90,"offset":1407},"end":{"line":19,"column":94,"offset":1411},"indent":[]}}],"position":{"start":{"line":19,"column":89,"offset":1406},"end":{"line":19,"column":115,"offset":1432},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":19,"column":115,"offset":1432},"end":{"line":19,"column":116,"offset":1433},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1318},"end":{"line":19,"column":116,"offset":1433},"indent":[]}},{"type":"jsx","value":"<MultiCodeBlock>","position":{"start":{"line":21,"column":1,"offset":1435},"end":{"line":21,"column":17,"offset":1451},"indent":[]}},{"type":"code","lang":"ts:title=index.test.ts","meta":null,"value":"// For clarity in this example we included our typeDefs and resolvers above our test,\n// but in a real world situation you'd be importing these in from different files\nconst typeDefs = gql`\n  type Query {\n    hello(name: String): String!\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: (_, { name }) => `Hello ${name}!`,\n  },\n};\n\nit('returns hello with the provided name', async () => {\n  const testServer = new ApolloServer({\n    typeDefs,\n    resolvers\n  });\n\n  const result = await testServer.executeOperation({\n    query: 'query SayHelloWorld($name: String) { hello(name: $name) }',\n    variables: { name: 'world' },\n  });\n\n  expect(result.errors).toBeUndefined();\n  expect(result.data?.hello).toBe('Hello world!');\n});","position":{"start":{"line":23,"column":1,"offset":1453},"end":{"line":52,"column":4,"offset":2208},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</MultiCodeBlock>","position":{"start":{"line":54,"column":1,"offset":2210},"end":{"line":54,"column":18,"offset":2227},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that when testing, any errors in parsing, validating, and executing your GraphQL operation are returned in the ","position":{"start":{"line":56,"column":1,"offset":2229},"end":{"line":56,"column":117,"offset":2345},"indent":[]}},{"type":"inlineCode","value":"errors","position":{"start":{"line":56,"column":117,"offset":2345},"end":{"line":56,"column":125,"offset":2353},"indent":[]}},{"type":"text","value":" field of the operation result. As with any GraphQL response, these errors are not ","position":{"start":{"line":56,"column":125,"offset":2353},"end":{"line":56,"column":208,"offset":2436},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"thrown","position":{"start":{"line":56,"column":209,"offset":2437},"end":{"line":56,"column":215,"offset":2443},"indent":[]}}],"position":{"start":{"line":56,"column":208,"offset":2436},"end":{"line":56,"column":216,"offset":2444},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":56,"column":216,"offset":2444},"end":{"line":56,"column":217,"offset":2445},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2229},"end":{"line":56,"column":217,"offset":2445},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Unlike with a normal instance of ","position":{"start":{"line":58,"column":1,"offset":2447},"end":{"line":58,"column":34,"offset":2480},"indent":[]}},{"type":"inlineCode","value":"ApolloServer","position":{"start":{"line":58,"column":34,"offset":2480},"end":{"line":58,"column":48,"offset":2494},"indent":[]}},{"type":"text","value":",  you don't need to call ","position":{"start":{"line":58,"column":48,"offset":2494},"end":{"line":58,"column":74,"offset":2520},"indent":[]}},{"type":"link","title":null,"url":"../../api/apollo-server/#start","children":[{"type":"inlineCode","value":"start","position":{"start":{"line":58,"column":75,"offset":2521},"end":{"line":58,"column":82,"offset":2528},"indent":[]}}],"position":{"start":{"line":58,"column":74,"offset":2520},"end":{"line":58,"column":115,"offset":2561},"indent":[]}},{"type":"text","value":" before calling ","position":{"start":{"line":58,"column":115,"offset":2561},"end":{"line":58,"column":131,"offset":2577},"indent":[]}},{"type":"inlineCode","value":"executeOperation","position":{"start":{"line":58,"column":131,"offset":2577},"end":{"line":58,"column":149,"offset":2595},"indent":[]}},{"type":"text","value":". The server instance calls ","position":{"start":{"line":58,"column":149,"offset":2595},"end":{"line":58,"column":177,"offset":2623},"indent":[]}},{"type":"inlineCode","value":"start","position":{"start":{"line":58,"column":177,"offset":2623},"end":{"line":58,"column":184,"offset":2630},"indent":[]}},{"type":"text","value":" automatically for you if it hasn't been called already, and any startup errors are thrown.","position":{"start":{"line":58,"column":184,"offset":2630},"end":{"line":58,"column":275,"offset":2721},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2447},"end":{"line":58,"column":275,"offset":2721},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To expand on the example above, here's a full integration test being run against a test instance of ","position":{"start":{"line":60,"column":1,"offset":2723},"end":{"line":60,"column":101,"offset":2823},"indent":[]}},{"type":"inlineCode","value":"ApolloServer","position":{"start":{"line":60,"column":101,"offset":2823},"end":{"line":60,"column":115,"offset":2837},"indent":[]}},{"type":"text","value":". This test imports all of the important pieces to test (","position":{"start":{"line":60,"column":115,"offset":2837},"end":{"line":60,"column":172,"offset":2894},"indent":[]}},{"type":"inlineCode","value":"typeDefs","position":{"start":{"line":60,"column":172,"offset":2894},"end":{"line":60,"column":182,"offset":2904},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":60,"column":182,"offset":2904},"end":{"line":60,"column":184,"offset":2906},"indent":[]}},{"type":"inlineCode","value":"resolvers","position":{"start":{"line":60,"column":184,"offset":2906},"end":{"line":60,"column":195,"offset":2917},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":60,"column":195,"offset":2917},"end":{"line":60,"column":197,"offset":2919},"indent":[]}},{"type":"inlineCode","value":"dataSources","position":{"start":{"line":60,"column":197,"offset":2919},"end":{"line":60,"column":210,"offset":2932},"indent":[]}},{"type":"text","value":") and creates a new instance of ","position":{"start":{"line":60,"column":210,"offset":2932},"end":{"line":60,"column":242,"offset":2964},"indent":[]}},{"type":"inlineCode","value":"ApolloServer","position":{"start":{"line":60,"column":242,"offset":2964},"end":{"line":60,"column":256,"offset":2978},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":60,"column":256,"offset":2978},"end":{"line":60,"column":257,"offset":2979},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2723},"end":{"line":60,"column":257,"offset":2979},"indent":[]}},{"type":"code","lang":"js:title=integration.test.js","meta":null,"value":"it('fetches single launch', async () => {\n  const userAPI = new UserAPI({ store });\n  const launchAPI = new LaunchAPI();\n\n  // create a test server to test against, using our production typeDefs,\n  // resolvers, and dataSources.\n  const server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    dataSources: () => ({ userAPI, launchAPI }),\n    context: () => ({ user: { id: 1, email: 'a@a.a' } }),\n  });\n\n  // mock the dataSource's underlying fetch methods\n  launchAPI.get = jest.fn(() => [mockLaunchResponse]);\n  userAPI.store = mockStore;\n  userAPI.store.trips.findAll.mockReturnValueOnce([\n    { dataValues: { launchId: 1 } },\n  ]);\n\n  // run the query against the server and snapshot the output\n  const res = await server.executeOperation({ query: GET_LAUNCH, variables: { id: 1 } });\n  expect(res).toMatchSnapshot();\n});","position":{"start":{"line":62,"column":1,"offset":2981},"end":{"line":87,"column":4,"offset":3845},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The example above includes a test-specific ","position":{"start":{"line":89,"column":1,"offset":3847},"end":{"line":89,"column":44,"offset":3890},"indent":[]}},{"type":"link","title":null,"url":"../data/resolvers/#the-context-argument","children":[{"type":"inlineCode","value":"context","position":{"start":{"line":89,"column":45,"offset":3891},"end":{"line":89,"column":54,"offset":3900},"indent":[]}},{"type":"text","value":" function","position":{"start":{"line":89,"column":54,"offset":3900},"end":{"line":89,"column":63,"offset":3909},"indent":[]}}],"position":{"start":{"line":89,"column":44,"offset":3890},"end":{"line":89,"column":105,"offset":3951},"indent":[]}},{"type":"text","value":", which provides data directly to the ","position":{"start":{"line":89,"column":105,"offset":3951},"end":{"line":89,"column":143,"offset":3989},"indent":[]}},{"type":"inlineCode","value":"ApolloServer","position":{"start":{"line":89,"column":143,"offset":3989},"end":{"line":89,"column":157,"offset":4003},"indent":[]}},{"type":"text","value":" instance instead of calculating it from the request's context.","position":{"start":{"line":89,"column":157,"offset":4003},"end":{"line":89,"column":220,"offset":4066},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":3847},"end":{"line":89,"column":220,"offset":4066},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To use your server's defined ","position":{"start":{"line":91,"column":1,"offset":4068},"end":{"line":91,"column":30,"offset":4097},"indent":[]}},{"type":"inlineCode","value":"context","position":{"start":{"line":91,"column":30,"offset":4097},"end":{"line":91,"column":39,"offset":4106},"indent":[]}},{"type":"text","value":" function, you can pass a second argument to ","position":{"start":{"line":91,"column":39,"offset":4106},"end":{"line":91,"column":84,"offset":4151},"indent":[]}},{"type":"inlineCode","value":"executeOperation","position":{"start":{"line":91,"column":84,"offset":4151},"end":{"line":91,"column":102,"offset":4169},"indent":[]}},{"type":"text","value":", which is then passed to your server's ","position":{"start":{"line":91,"column":102,"offset":4169},"end":{"line":91,"column":142,"offset":4209},"indent":[]}},{"type":"inlineCode","value":"context","position":{"start":{"line":91,"column":142,"offset":4209},"end":{"line":91,"column":151,"offset":4218},"indent":[]}},{"type":"text","value":" function. Note that to use your server's ","position":{"start":{"line":91,"column":151,"offset":4218},"end":{"line":91,"column":193,"offset":4260},"indent":[]}},{"type":"inlineCode","value":"context","position":{"start":{"line":91,"column":193,"offset":4260},"end":{"line":91,"column":202,"offset":4269},"indent":[]}},{"type":"text","value":" function you need to put together an object with the correct ","position":{"start":{"line":91,"column":202,"offset":4269},"end":{"line":91,"column":264,"offset":4331},"indent":[]}},{"type":"link","title":null,"url":"../api/apollo-server/#middleware-specific-context-fields","children":[{"type":"text","value":"middleware-specific context fields","position":{"start":{"line":91,"column":265,"offset":4332},"end":{"line":91,"column":299,"offset":4366},"indent":[]}}],"position":{"start":{"line":91,"column":264,"offset":4331},"end":{"line":91,"column":358,"offset":4425},"indent":[]}},{"type":"text","value":" for your implementation.","position":{"start":{"line":91,"column":358,"offset":4425},"end":{"line":91,"column":383,"offset":4450},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":4068},"end":{"line":91,"column":383,"offset":4450},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"For examples of both integration and end-to-end testing we recommend checking out the ","position":{"start":{"line":93,"column":2,"offset":4453},"end":{"line":93,"column":88,"offset":4539},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/apollographql/fullstack-tutorial/tree/master/final/server/src/__tests__","children":[{"type":"text","value":"tests included in the Apollo fullstack tutorial","position":{"start":{"line":93,"column":89,"offset":4540},"end":{"line":93,"column":136,"offset":4587},"indent":[]}}],"position":{"start":{"line":93,"column":88,"offset":4539},"end":{"line":93,"column":229,"offset":4680},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":93,"column":229,"offset":4680},"end":{"line":93,"column":230,"offset":4681},"indent":[]}}],"position":{"start":{"line":93,"column":2,"offset":4453},"end":{"line":93,"column":230,"offset":4681},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4452},"end":{"line":93,"column":230,"offset":4681},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"End-to-end testing","position":{"start":{"line":95,"column":4,"offset":4686},"end":{"line":95,"column":22,"offset":4704},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":4683},"end":{"line":95,"column":22,"offset":4704},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of bypassing the HTTP layer, you might want to fully run your server and test it with a real HTTP client. Apollo Server doesn't provide built-in support for this at this time.","position":{"start":{"line":97,"column":1,"offset":4706},"end":{"line":97,"column":184,"offset":4889},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":4706},"end":{"line":97,"column":184,"offset":4889},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can run operations against your server using a combination of any HTTP or GraphQL client such as ","position":{"start":{"line":99,"column":1,"offset":4891},"end":{"line":99,"column":102,"offset":4992},"indent":[]}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/supertest","children":[{"type":"inlineCode","value":"supertest","position":{"start":{"line":99,"column":103,"offset":4993},"end":{"line":99,"column":114,"offset":5004},"indent":[]}}],"position":{"start":{"line":99,"column":102,"offset":4992},"end":{"line":99,"column":156,"offset":5046},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":99,"column":156,"offset":5046},"end":{"line":99,"column":160,"offset":5050},"indent":[]}},{"type":"link","title":null,"url":"https://www.apollographql.com/docs/react/api/link/apollo-link-http/","children":[{"type":"text","value":"Apollo Client's HTTP Link","position":{"start":{"line":99,"column":161,"offset":5051},"end":{"line":99,"column":186,"offset":5076},"indent":[]}}],"position":{"start":{"line":99,"column":160,"offset":5050},"end":{"line":99,"column":256,"offset":5146},"indent":[]}},{"type":"text","value":" . There are also community packages available such as ","position":{"start":{"line":99,"column":256,"offset":5146},"end":{"line":99,"column":311,"offset":5201},"indent":[]}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/apollo-server-integration-testing","children":[{"type":"inlineCode","value":"apollo-server-integration-testing","position":{"start":{"line":99,"column":312,"offset":5202},"end":{"line":99,"column":347,"offset":5237},"indent":[]}}],"position":{"start":{"line":99,"column":311,"offset":5201},"end":{"line":99,"column":413,"offset":5303},"indent":[]}},{"type":"text","value":", which uses mocked Express request and response objects.","position":{"start":{"line":99,"column":413,"offset":5303},"end":{"line":99,"column":470,"offset":5360},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":4891},"end":{"line":99,"column":470,"offset":5360},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Below is an example of writing an end-to-end test using the ","position":{"start":{"line":101,"column":1,"offset":5362},"end":{"line":101,"column":61,"offset":5422},"indent":[]}},{"type":"inlineCode","value":"apollo-server","position":{"start":{"line":101,"column":61,"offset":5422},"end":{"line":101,"column":76,"offset":5437},"indent":[]}},{"type":"text","value":" package and ","position":{"start":{"line":101,"column":76,"offset":5437},"end":{"line":101,"column":89,"offset":5450},"indent":[]}},{"type":"inlineCode","value":"supertest","position":{"start":{"line":101,"column":89,"offset":5450},"end":{"line":101,"column":100,"offset":5461},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":101,"column":100,"offset":5461},"end":{"line":101,"column":101,"offset":5462},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":5362},"end":{"line":101,"column":101,"offset":5462},"indent":[]}},{"type":"jsx","value":"<MultiCodeBlock>","position":{"start":{"line":103,"column":1,"offset":5464},"end":{"line":103,"column":17,"offset":5480},"indent":[]}},{"type":"code","lang":"ts:title=server.test.ts","meta":null,"value":"/// we import a function that we wrote to create a new instance of Apollo Server\nimport { createApolloServer } from '../server';\n\n// we will use supertest to test our server\nimport request from 'supertest';\n\n// this is the query we use for our test\nconst queryData = {\n  query: `query sayHello($name: String) {\n    hello(name: $name)\n  }`,\n  variables: { name: 'world' },\n};\n\ndescribe('e2e demo', () => {\n  let server, url;\n\n  // before the tests we will spin up a new Apollo Server\n  beforeAll(async () => {\n    // Note we must wrap our object destructuring in parentheses because we already declared these variables\n    // We pass in the port as 0 to let the server pick its own ephemeral port for testing\n    ({ server, url } = await createApolloServer({ port: 0 }));\n  });\n\n  // after the tests we will stop our server\n  afterAll(async () => {\n    await server?.close();\n  });\n\n  it('says hello', async () => {\n    // send our request to the url of the test server\n    const response = await request(url).post('/').send(queryData);\n    expect(response.errors).toBeUndefined();\n    expect(response.body.data?.hello).toBe('Hello world!');\n  });\n});","position":{"start":{"line":105,"column":1,"offset":5482},"end":{"line":142,"column":4,"offset":6663},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</MultiCodeBlock>","position":{"start":{"line":144,"column":1,"offset":6665},"end":{"line":144,"column":18,"offset":6682},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can also view and fork this complete example on CodeSandbox:","position":{"start":{"line":146,"column":1,"offset":6684},"end":{"line":146,"column":65,"offset":6748},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":6684},"end":{"line":146,"column":65,"offset":6748},"indent":[]}},{"type":"jsx","value":"<a href=\"https://codesandbox.io/s/github/apollographql/docs-examples/tree/main/apollo-server/v3/integration-testing?fontsize=14&hidenavigation=1&theme=dark\">\n  <img alt=\"Edit integration-testing\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" />\n</a>","position":{"start":{"line":148,"column":1,"offset":6750},"end":{"line":150,"column":5,"offset":7014},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Integration testing\",\"description\":\"Utilities for testing Apollo Server\"}","position":{"start":{"line":153,"column":1,"offset":7017},"end":{"line":153,"column":112,"offset":7128},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":153,"column":112,"offset":7128}}},"scopeImports":["import { MultiCodeBlock } from 'gatsby-theme-apollo-docs';","import * as React from 'react'"],"scopeIdentifiers":["MultiCodeBlock","React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Integration testing\",\n  \"description\": \"Utilities for testing Apollo Server\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Apollo Server uses a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/integrations/plugins/#request-lifecycle-event-flow\"\n  }, \"multi-step request pipeline\"), \" to validate and execute incoming GraphQL operations. This pipeline supports integration with custom plugins at each step, which can affect an operation's execution. Because of this, it's important to perform \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"integration tests\"), \" with a variety of operations to ensure your request pipeline works as expected.\"), mdx(\"p\", null, \"There are two main options for integration testing with Apollo Server:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"ApolloServer\"), \"'s \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"executeOperation\"), \" method.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setting up an HTTP client to query your server.\")), mdx(\"h2\", {\n    \"id\": \"testing-using-executeoperation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#testing-using-executeoperation\",\n    \"aria-label\": \"testing using executeoperation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Testing using \", mdx(\"code\", {\n    parentName: \"h2\",\n    \"className\": \"language-text\"\n  }, \"executeOperation\")), mdx(\"p\", null, \"Apollo Server's \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"executeOperation\"), \" method enables you to run operations through the request pipeline \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"without\"), \" sending an HTTP request.\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/api/apollo-server/#executeoperation\"\n  }, mdx(\"code\", {\n    parentName: \"a\",\n    \"className\": \"language-text\"\n  }, \"executeOperation\"), \" method\"), \" accepts the following arguments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An object that describes the GraphQL operation to execute.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This object must include a \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"query\"), \" field specifying the GraphQL operation to run. You can use \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"executeOperation\"), \" to execute both queries and mutations, but both use the \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"query\"), \" field.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An optional argument that is passed in to the \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"ApolloServer\"), \" instance's \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/data/resolvers/#the-context-argument\"\n  }, mdx(\"code\", {\n    parentName: \"a\",\n    \"className\": \"language-text\"\n  }, \"context\"), \" function\"), \".\")), mdx(\"p\", null, \"Below is a simplified example of setting up a test using the JavaScript testing library \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jestjs.io/\"\n  }, \"Jest\"), \":\"), mdx(MultiCodeBlock, {\n    mdxType: \"MultiCodeBlock\"\n  }, mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"index.test.ts\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"ts\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-ts line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// For clarity in this example we included our typeDefs and resolvers above our test,\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// but in a real world situation you'd be importing these in from different files\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" typeDefs \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" gql\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token template-string\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"\\n  type Query {\\n    hello(name: String): String!\\n  }\\n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" resolvers \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  Query\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function-variable function\"\n  }, \"hello\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"_\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" name \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token template-string\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"Hello \"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token interpolation\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }, \"${\"), \"name\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }, \"}\")), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"!\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"it\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'returns hello with the provided name'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"async\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" testServer \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"new\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"ApolloServer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    typeDefs\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n    resolvers\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" result \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" testServer\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"executeOperation\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    query\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'query SayHelloWorld($name: String) { hello(name: $name) }'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n    variables\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" name\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'world'\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"expect\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"result\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"errors\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"toBeUndefined\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"expect\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"result\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"data\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"?.\"), \"hello\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"toBe\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'Hello world!'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\")), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"index.test.js\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-js line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// For clarity in this example we included our typeDefs and resolvers above our test,\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// but in a real world situation you'd be importing these in from different files\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" typeDefs \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" gql\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token template-string\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"\\n  type Query {\\n    hello(name: String): String!\\n  }\\n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" resolvers \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"Query\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function-variable function\"\n  }, \"hello\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token parameter\"\n  }, \"_\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" name \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"}\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token template-string\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"Hello \"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token interpolation\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }, \"${\"), \"name\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }, \"}\")), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"!\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"it\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'returns hello with the provided name'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"async\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" testServer \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"new\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"ApolloServer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    typeDefs\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n    resolvers\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" result \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" testServer\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"executeOperation\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"query\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'query SayHelloWorld($name: String) { hello(name: $name) }'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"variables\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"name\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'world'\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"expect\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"result\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"errors\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"toBeUndefined\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"expect\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"result\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"data\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"?.\"), \"hello\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"toBe\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'Hello world!'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\")), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }))))), mdx(\"p\", null, \"Note that when testing, any errors in parsing, validating, and executing your GraphQL operation are returned in the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"errors\"), \" field of the operation result. As with any GraphQL response, these errors are not \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"thrown\"), \".\"), mdx(\"p\", null, \"Unlike with a normal instance of \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"ApolloServer\"), \",  you don't need to call \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/api/apollo-server/#start\"\n  }, mdx(\"code\", {\n    parentName: \"a\",\n    \"className\": \"language-text\"\n  }, \"start\")), \" before calling \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"executeOperation\"), \". The server instance calls \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"start\"), \" automatically for you if it hasn't been called already, and any startup errors are thrown.\"), mdx(\"p\", null, \"To expand on the example above, here's a full integration test being run against a test instance of \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"ApolloServer\"), \". This test imports all of the important pieces to test (\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"typeDefs\"), \", \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"resolvers\"), \", \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"dataSources\"), \") and creates a new instance of \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"ApolloServer\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"integration.test.js\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-js line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"it\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'fetches single launch'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"async\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" userAPI \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"new\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"UserAPI\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" store \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" launchAPI \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"new\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"LaunchAPI\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// create a test server to test against, using our production typeDefs,\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// resolvers, and dataSources.\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" server \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"new\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"ApolloServer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    typeDefs\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n    resolvers\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function-variable function\"\n  }, \"dataSources\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" userAPI\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" launchAPI \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function-variable function\"\n  }, \"context\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"user\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"id\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"email\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'a@a.a'\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// mock the dataSource's underlying fetch methods\"), \"\\n  launchAPI\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"get \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" jest\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"fn\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), \"mockLaunchResponse\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  userAPI\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"store \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" mockStore\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  userAPI\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"store\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"trips\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"findAll\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"mockReturnValueOnce\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"dataValues\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"launchId\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"1\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// run the query against the server and snapshot the output\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" res \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" server\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"executeOperation\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"query\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constant\"\n  }, \"GET_LAUNCH\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"variables\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"id\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"1\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"expect\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"res\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"toMatchSnapshot\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\")), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"The example above includes a test-specific \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/data/resolvers/#the-context-argument\"\n  }, mdx(\"code\", {\n    parentName: \"a\",\n    \"className\": \"language-text\"\n  }, \"context\"), \" function\"), \", which provides data directly to the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"ApolloServer\"), \" instance instead of calculating it from the request's context.\"), mdx(\"p\", null, \"To use your server's defined \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"context\"), \" function, you can pass a second argument to \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"executeOperation\"), \", which is then passed to your server's \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"context\"), \" function. Note that to use your server's \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"context\"), \" function you need to put together an object with the correct \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/api/apollo-server/#middleware-specific-context-fields\"\n  }, \"middleware-specific context fields\"), \" for your implementation.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For examples of both integration and end-to-end testing we recommend checking out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/apollographql/fullstack-tutorial/tree/master/final/server/src/__tests__\"\n  }, \"tests included in the Apollo fullstack tutorial\"), \".\")), mdx(\"h2\", {\n    \"id\": \"end-to-end-testing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#end-to-end-testing\",\n    \"aria-label\": \"end to end testing permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"End-to-end testing\"), mdx(\"p\", null, \"Instead of bypassing the HTTP layer, you might want to fully run your server and test it with a real HTTP client. Apollo Server doesn't provide built-in support for this at this time.\"), mdx(\"p\", null, \"You can run operations against your server using a combination of any HTTP or GraphQL client such as \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/supertest\"\n  }, mdx(\"code\", {\n    parentName: \"a\",\n    \"className\": \"language-text\"\n  }, \"supertest\")), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.apollographql.com/docs/react/api/link/apollo-link-http/\"\n  }, \"Apollo Client's HTTP Link\"), \" . There are also community packages available such as \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/apollo-server-integration-testing\"\n  }, mdx(\"code\", {\n    parentName: \"a\",\n    \"className\": \"language-text\"\n  }, \"apollo-server-integration-testing\")), \", which uses mocked Express request and response objects.\"), mdx(\"p\", null, \"Below is an example of writing an end-to-end test using the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"apollo-server\"), \" package and \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"supertest\"), \":\"), mdx(MultiCodeBlock, {\n    mdxType: \"MultiCodeBlock\"\n  }, mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"server.test.ts\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"ts\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-ts line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"/// we import a function that we wrote to create a new instance of Apollo Server\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"import\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" createApolloServer \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"from\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'../server'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// we will use supertest to test our server\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"import\"), \" request \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"from\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'supertest'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// this is the query we use for our test\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" queryData \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  query\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token template-string\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"query sayHello($name: String) {\\n    hello(name: $name)\\n  }\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  variables\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" name\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'world'\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"describe\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'e2e demo'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"let\"), \" server\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" url\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// before the tests we will spin up a new Apollo Server\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"beforeAll\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"async\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// Note we must wrap our object destructuring in parentheses because we already declared these variables\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// We pass in the port as 0 to let the server pick its own ephemeral port for testing\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" server\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" url \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"createApolloServer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" port\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"0\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// after the tests we will stop our server\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"afterAll\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"async\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" server\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"?.\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"close\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"it\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'says hello'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"async\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// send our request to the url of the test server\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" response \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"request\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"url\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"post\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'/'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"send\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"queryData\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"expect\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"response\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"errors\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"toBeUndefined\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"expect\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"response\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"body\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"data\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"?.\"), \"hello\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"toBe\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'Hello world!'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\")), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"server.test.js\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-js line-numbers\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"/// we import a function that we wrote to create a new instance of Apollo Server\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"import\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" createApolloServer \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"from\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'../server'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// we will use supertest to test our server\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"import\"), \" request \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"from\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'supertest'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// this is the query we use for our test\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" queryData \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"query\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token template-string\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"query sayHello($name: String) {\\n    hello(name: $name)\\n  }\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"variables\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"name\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'world'\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"describe\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'e2e demo'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"let\"), \" server\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" url\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// before the tests we will spin up a new Apollo Server\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"beforeAll\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"async\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// Note we must wrap our object destructuring in parentheses because we already declared these variables\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// We pass in the port as 0 to let the server pick its own ephemeral port for testing\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" server\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" url \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"createApolloServer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"port\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"0\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// after the tests we will stop our server\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"afterAll\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"async\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" server\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"?.\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"close\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"it\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'says hello'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"async\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"// send our request to the url of the test server\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" response \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"request\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"url\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"post\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'/'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"\\n      \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"send\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"queryData\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"expect\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"response\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"errors\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"toBeUndefined\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"expect\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"response\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"body\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"data\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"?.\"), \"hello\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"toBe\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'Hello world!'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\")), mdx(\"span\", {\n    parentName: \"pre\",\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }))))), mdx(\"p\", null, \"You can also view and fork this complete example on CodeSandbox:\"), mdx(\"a\", {\n    href: \"https://codesandbox.io/s/github/apollographql/docs-examples/tree/main/apollo-server/v3/integration-testing?fontsize=14&hidenavigation=1&theme=dark\"\n  }, mdx(\"img\", {\n    alt: \"Edit integration-testing\",\n    src: \"https://codesandbox.io/static/img/play-codesandbox.svg\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { MultiCodeBlock } from 'gatsby-theme-apollo-docs';\nexport const _frontmatter = {\n  \"title\": \"Integration testing\",\n  \"description\": \"Utilities for testing Apollo Server\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`Apollo Server uses a `}<a parentName=\"p\" {...{\n        \"href\": \"/integrations/plugins/#request-lifecycle-event-flow\"\n      }}>{`multi-step request pipeline`}</a>{` to validate and execute incoming GraphQL operations. This pipeline supports integration with custom plugins at each step, which can affect an operation's execution. Because of this, it's important to perform `}<strong parentName=\"p\">{`integration tests`}</strong>{` with a variety of operations to ensure your request pipeline works as expected.`}</p>\n    <p>{`There are two main options for integration testing with Apollo Server:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Using `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`ApolloServer`}</code>{`'s `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`executeOperation`}</code>{` method.`}</li>\n      <li parentName=\"ul\">{`Setting up an HTTP client to query your server.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"testing-using-executeoperation\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#testing-using-executeoperation\",\n        \"aria-label\": \"testing using executeoperation permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Testing using `}<code parentName=\"h2\" {...{\n        \"className\": \"language-text\"\n      }}>{`executeOperation`}</code></h2>\n    <p>{`Apollo Server's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`executeOperation`}</code>{` method enables you to run operations through the request pipeline `}<em parentName=\"p\">{`without`}</em>{` sending an HTTP request.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/api/apollo-server/#executeoperation\"\n      }}><code parentName=\"a\" {...{\n          \"className\": \"language-text\"\n        }}>{`executeOperation`}</code>{` method`}</a>{` accepts the following arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An object that describes the GraphQL operation to execute.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This object must include a `}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`query`}</code>{` field specifying the GraphQL operation to run. You can use `}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`executeOperation`}</code>{` to execute both queries and mutations, but both use the `}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`query`}</code>{` field.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`An optional argument that is passed in to the `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`ApolloServer`}</code>{` instance's `}<a parentName=\"li\" {...{\n          \"href\": \"/data/resolvers/#the-context-argument\"\n        }}><code parentName=\"a\" {...{\n            \"className\": \"language-text\"\n          }}>{`context`}</code>{` function`}</a>{`.`}</li>\n    </ul>\n    <p>{`Below is a simplified example of setting up a test using the JavaScript testing library `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/\"\n      }}>{`Jest`}</a>{`:`}</p>\n    <MultiCodeBlock mdxType=\"MultiCodeBlock\">\n      <div {...{\n        \"className\": \"gatsby-code-title\"\n      }}>{`index.test.ts`}</div>\n      <div {...{\n        \"className\": \"gatsby-highlight\",\n        \"data-language\": \"ts\"\n      }}><pre parentName=\"div\" {...{\n          \"style\": {\n            \"counterReset\": \"linenumber NaN\"\n          },\n          \"className\": \"language-ts line-numbers\"\n        }}><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}><span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// For clarity in this example we included our typeDefs and resolvers above our test,`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// but in a real world situation you'd be importing these in from different files`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` typeDefs `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` gql`}<span parentName=\"code\" {...{\n              \"className\": \"token template-string\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span><span parentName=\"span\" {...{\n                \"className\": \"token string\"\n              }}>{`\n  type Query {\n    hello(name: String): String!\n  }\n`}</span><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span></span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` resolvers `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n  Query`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token function-variable function\"\n            }}>{`hello`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`_`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` name `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token template-string\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span><span parentName=\"span\" {...{\n                \"className\": \"token string\"\n              }}>{`Hello `}</span><span parentName=\"span\" {...{\n                \"className\": \"token interpolation\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"token interpolation-punctuation punctuation\"\n                }}>{`\\${`}</span>{`name`}<span parentName=\"span\" {...{\n                  \"className\": \"token interpolation-punctuation punctuation\"\n                }}>{`}`}</span></span><span parentName=\"span\" {...{\n                \"className\": \"token string\"\n              }}>{`!`}</span><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span></span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`it`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'returns hello with the provided name'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`async`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` testServer `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`new`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token class-name\"\n            }}>{`ApolloServer`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    typeDefs`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n    resolvers\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` result `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`await`}</span>{` testServer`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`executeOperation`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    query`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'query SayHelloWorld($name: String) { hello(name: $name) }'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n    variables`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` name`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'world'`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`expect`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`result`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`errors`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`toBeUndefined`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`expect`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`result`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`data`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`?.`}</span>{`hello`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`toBe`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'Hello world!'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span></code><span parentName=\"pre\" {...{\n            \"aria-hidden\": \"true\",\n            \"className\": \"line-numbers-rows\",\n            \"style\": {\n              \"whiteSpace\": \"normal\",\n              \"width\": \"auto\",\n              \"left\": \"0\"\n            }\n          }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n      <div {...{\n        \"className\": \"gatsby-code-title\"\n      }}>{`index.test.js`}</div>\n      <div {...{\n        \"className\": \"gatsby-highlight\",\n        \"data-language\": \"js\"\n      }}><pre parentName=\"div\" {...{\n          \"style\": {\n            \"counterReset\": \"linenumber NaN\"\n          },\n          \"className\": \"language-js line-numbers\"\n        }}><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}><span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// For clarity in this example we included our typeDefs and resolvers above our test,`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// but in a real world situation you'd be importing these in from different files`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` typeDefs `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` gql`}<span parentName=\"code\" {...{\n              \"className\": \"token template-string\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span><span parentName=\"span\" {...{\n                \"className\": \"token string\"\n              }}>{`\n  type Query {\n    hello(name: String): String!\n  }\n`}</span><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span></span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` resolvers `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token literal-property property\"\n            }}>{`Query`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token function-variable function\"\n            }}>{`hello`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token parameter\"\n            }}>{`_`}<span parentName=\"span\" {...{\n                \"className\": \"token punctuation\"\n              }}>{`,`}</span>{` `}<span parentName=\"span\" {...{\n                \"className\": \"token punctuation\"\n              }}>{`{`}</span>{` name `}<span parentName=\"span\" {...{\n                \"className\": \"token punctuation\"\n              }}>{`}`}</span></span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token template-string\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span><span parentName=\"span\" {...{\n                \"className\": \"token string\"\n              }}>{`Hello `}</span><span parentName=\"span\" {...{\n                \"className\": \"token interpolation\"\n              }}><span parentName=\"span\" {...{\n                  \"className\": \"token interpolation-punctuation punctuation\"\n                }}>{`\\${`}</span>{`name`}<span parentName=\"span\" {...{\n                  \"className\": \"token interpolation-punctuation punctuation\"\n                }}>{`}`}</span></span><span parentName=\"span\" {...{\n                \"className\": \"token string\"\n              }}>{`!`}</span><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span></span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`it`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'returns hello with the provided name'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`async`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` testServer `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`new`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token class-name\"\n            }}>{`ApolloServer`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    typeDefs`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n    resolvers`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` result `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`await`}</span>{` testServer`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`executeOperation`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token literal-property property\"\n            }}>{`query`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'query SayHelloWorld($name: String) { hello(name: $name) }'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token literal-property property\"\n            }}>{`variables`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token literal-property property\"\n            }}>{`name`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'world'`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`expect`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`result`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`errors`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`toBeUndefined`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`expect`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`result`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`data`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`?.`}</span>{`hello`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`toBe`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'Hello world!'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span></code><span parentName=\"pre\" {...{\n            \"aria-hidden\": \"true\",\n            \"className\": \"line-numbers-rows\",\n            \"style\": {\n              \"whiteSpace\": \"normal\",\n              \"width\": \"auto\",\n              \"left\": \"0\"\n            }\n          }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    </MultiCodeBlock>\n    <p>{`Note that when testing, any errors in parsing, validating, and executing your GraphQL operation are returned in the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`errors`}</code>{` field of the operation result. As with any GraphQL response, these errors are not `}<em parentName=\"p\">{`thrown`}</em>{`.`}</p>\n    <p>{`Unlike with a normal instance of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ApolloServer`}</code>{`,  you don't need to call `}<a parentName=\"p\" {...{\n        \"href\": \"/api/apollo-server/#start\"\n      }}><code parentName=\"a\" {...{\n          \"className\": \"language-text\"\n        }}>{`start`}</code></a>{` before calling `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`executeOperation`}</code>{`. The server instance calls `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`start`}</code>{` automatically for you if it hasn't been called already, and any startup errors are thrown.`}</p>\n    <p>{`To expand on the example above, here's a full integration test being run against a test instance of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ApolloServer`}</code>{`. This test imports all of the important pieces to test (`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`typeDefs`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`resolvers`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`dataSources`}</code>{`) and creates a new instance of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ApolloServer`}</code>{`.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title\"\n    }}>{`integration.test.js`}</div>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"js\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-js line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`it`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'fetches single launch'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`async`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` userAPI `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`new`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`UserAPI`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` store `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` launchAPI `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`new`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`LaunchAPI`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`// create a test server to test against, using our production typeDefs,`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`// resolvers, and dataSources.`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` server `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`new`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`ApolloServer`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    typeDefs`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    resolvers`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token function-variable function\"\n          }}>{`dataSources`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` userAPI`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` launchAPI `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token function-variable function\"\n          }}>{`context`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token literal-property property\"\n          }}>{`user`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token literal-property property\"\n          }}>{`id`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`1`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token literal-property property\"\n          }}>{`email`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'a@a.a'`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`// mock the dataSource's underlying fetch methods`}</span>{`\n  launchAPI`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span>{`get `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` jest`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`fn`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span>{`mockLaunchResponse`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n  userAPI`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span>{`store `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` mockStore`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n  userAPI`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span>{`store`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span>{`trips`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span>{`findAll`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`mockReturnValueOnce`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token literal-property property\"\n          }}>{`dataValues`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token literal-property property\"\n          }}>{`launchId`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`1`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`// run the query against the server and snapshot the output`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` res `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`await`}</span>{` server`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`executeOperation`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token literal-property property\"\n          }}>{`query`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token constant\"\n          }}>{`GET_LAUNCH`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token literal-property property\"\n          }}>{`variables`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token literal-property property\"\n          }}>{`id`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`1`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`expect`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`res`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`toMatchSnapshot`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`The example above includes a test-specific `}<a parentName=\"p\" {...{\n        \"href\": \"/data/resolvers/#the-context-argument\"\n      }}><code parentName=\"a\" {...{\n          \"className\": \"language-text\"\n        }}>{`context`}</code>{` function`}</a>{`, which provides data directly to the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ApolloServer`}</code>{` instance instead of calculating it from the request's context.`}</p>\n    <p>{`To use your server's defined `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`context`}</code>{` function, you can pass a second argument to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`executeOperation`}</code>{`, which is then passed to your server's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`context`}</code>{` function. Note that to use your server's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`context`}</code>{` function you need to put together an object with the correct `}<a parentName=\"p\" {...{\n        \"href\": \"/api/apollo-server/#middleware-specific-context-fields\"\n      }}>{`middleware-specific context fields`}</a>{` for your implementation.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For examples of both integration and end-to-end testing we recommend checking out the `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/apollographql/fullstack-tutorial/tree/master/final/server/src/__tests__\"\n        }}>{`tests included in the Apollo fullstack tutorial`}</a>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"end-to-end-testing\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#end-to-end-testing\",\n        \"aria-label\": \"end to end testing permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`End-to-end testing`}</h2>\n    <p>{`Instead of bypassing the HTTP layer, you might want to fully run your server and test it with a real HTTP client. Apollo Server doesn't provide built-in support for this at this time.`}</p>\n    <p>{`You can run operations against your server using a combination of any HTTP or GraphQL client such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/supertest\"\n      }}><code parentName=\"a\" {...{\n          \"className\": \"language-text\"\n        }}>{`supertest`}</code></a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/react/api/link/apollo-link-http/\"\n      }}>{`Apollo Client's HTTP Link`}</a>{` . There are also community packages available such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/apollo-server-integration-testing\"\n      }}><code parentName=\"a\" {...{\n          \"className\": \"language-text\"\n        }}>{`apollo-server-integration-testing`}</code></a>{`, which uses mocked Express request and response objects.`}</p>\n    <p>{`Below is an example of writing an end-to-end test using the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`apollo-server`}</code>{` package and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`supertest`}</code>{`:`}</p>\n    <MultiCodeBlock mdxType=\"MultiCodeBlock\">\n      <div {...{\n        \"className\": \"gatsby-code-title\"\n      }}>{`server.test.ts`}</div>\n      <div {...{\n        \"className\": \"gatsby-highlight\",\n        \"data-language\": \"ts\"\n      }}><pre parentName=\"div\" {...{\n          \"style\": {\n            \"counterReset\": \"linenumber NaN\"\n          },\n          \"className\": \"language-ts line-numbers\"\n        }}><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}><span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`/// we import a function that we wrote to create a new instance of Apollo Server`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`import`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` createApolloServer `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`from`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'../server'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// we will use supertest to test our server`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`import`}</span>{` request `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`from`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'supertest'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// this is the query we use for our test`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` queryData `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n  query`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token template-string\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span><span parentName=\"span\" {...{\n                \"className\": \"token string\"\n              }}>{`query sayHello($name: String) {\n    hello(name: $name)\n  }`}</span><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span></span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n  variables`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` name`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'world'`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`describe`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'e2e demo'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`let`}</span>{` server`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` url`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// before the tests we will spin up a new Apollo Server`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`beforeAll`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`async`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// Note we must wrap our object destructuring in parentheses because we already declared these variables`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// We pass in the port as 0 to let the server pick its own ephemeral port for testing`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` server`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` url `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`await`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`createApolloServer`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` port`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token number\"\n            }}>{`0`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// after the tests we will stop our server`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`afterAll`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`async`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`await`}</span>{` server`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`?.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`close`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`it`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'says hello'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`async`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// send our request to the url of the test server`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` response `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`await`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`request`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`url`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`post`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'/'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`send`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`queryData`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`expect`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`response`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`errors`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`toBeUndefined`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`expect`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`response`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`body`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`data`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`?.`}</span>{`hello`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`toBe`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'Hello world!'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span></code><span parentName=\"pre\" {...{\n            \"aria-hidden\": \"true\",\n            \"className\": \"line-numbers-rows\",\n            \"style\": {\n              \"whiteSpace\": \"normal\",\n              \"width\": \"auto\",\n              \"left\": \"0\"\n            }\n          }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n      <div {...{\n        \"className\": \"gatsby-code-title\"\n      }}>{`server.test.js`}</div>\n      <div {...{\n        \"className\": \"gatsby-highlight\",\n        \"data-language\": \"js\"\n      }}><pre parentName=\"div\" {...{\n          \"style\": {\n            \"counterReset\": \"linenumber NaN\"\n          },\n          \"className\": \"language-js line-numbers\"\n        }}><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}><span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`/// we import a function that we wrote to create a new instance of Apollo Server`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`import`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` createApolloServer `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`from`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'../server'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// we will use supertest to test our server`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`import`}</span>{` request `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`from`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'supertest'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// this is the query we use for our test`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` queryData `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token literal-property property\"\n            }}>{`query`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token template-string\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span><span parentName=\"span\" {...{\n                \"className\": \"token string\"\n              }}>{`query sayHello($name: String) {\n    hello(name: $name)\n  }`}</span><span parentName=\"span\" {...{\n                \"className\": \"token template-punctuation string\"\n              }}>{`\\``}</span></span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token literal-property property\"\n            }}>{`variables`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token literal-property property\"\n            }}>{`name`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'world'`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`describe`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'e2e demo'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`let`}</span>{` server`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` url`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// before the tests we will spin up a new Apollo Server`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`beforeAll`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`async`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// Note we must wrap our object destructuring in parentheses because we already declared these variables`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// We pass in the port as 0 to let the server pick its own ephemeral port for testing`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` server`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` url `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`await`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`createApolloServer`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token literal-property property\"\n            }}>{`port`}</span><span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token number\"\n            }}>{`0`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// after the tests we will stop our server`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`afterAll`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`async`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`await`}</span>{` server`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`?.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`close`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`it`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'says hello'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`async`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token comment\"\n            }}>{`// send our request to the url of the test server`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`const`}</span>{` response `}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token keyword\"\n            }}>{`await`}</span>{` `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`request`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`url`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{`\n      `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`post`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'/'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span>{`\n      `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`send`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`queryData`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`expect`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`response`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`errors`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`toBeUndefined`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n    `}<span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`expect`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span>{`response`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`body`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span>{`data`}<span parentName=\"code\" {...{\n              \"className\": \"token operator\"\n            }}>{`?.`}</span>{`hello`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`.`}</span><span parentName=\"code\" {...{\n              \"className\": \"token function\"\n            }}>{`toBe`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`(`}</span><span parentName=\"code\" {...{\n              \"className\": \"token string\"\n            }}>{`'Hello world!'`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`)`}</span><span parentName=\"code\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`;`}</span></code><span parentName=\"pre\" {...{\n            \"aria-hidden\": \"true\",\n            \"className\": \"line-numbers-rows\",\n            \"style\": {\n              \"whiteSpace\": \"normal\",\n              \"width\": \"auto\",\n              \"left\": \"0\"\n            }\n          }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    </MultiCodeBlock>\n    <p>{`You can also view and fork this complete example on CodeSandbox:`}</p>\n    <a href=\"https://codesandbox.io/s/github/apollographql/docs-examples/tree/main/apollo-server/v3/integration-testing?fontsize=14&hidenavigation=1&theme=dark\">\n  <img alt=\"Edit integration-testing\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" />\n    </a>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}