{"expireTime":9007200901520843000,"key":"transformer-remark-markdown-ast-5f0057f78cccab6e65fe10b44979af12-gatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-mermaidgatsby-remark-code-titlesgatsby-remark-prismjsgatsby-remark-rewrite-relative-linksgatsby-remark-check-links-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Mocking enables Apollo Server to return simulated data for GraphQL operations based on your server's schema. The strongly-typed nature of a GraphQL API lends itself to mocking, which is an important part of a GraphQL-first development process.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":244,"offset":244}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":244,"offset":244}}},{"type":"paragraph","children":[{"type":"text","value":"Mocking enables frontend developers to build out and test UI components and features without needing to wait for a full backend implementation. Mocking is also valuable when using a UI tool like ","position":{"start":{"line":4,"column":1,"offset":246},"end":{"line":4,"column":196,"offset":441}}},{"type":"link","title":null,"url":"https://storybook.js.org/","children":[{"type":"text","value":"Storybook","position":{"start":{"line":4,"column":197,"offset":442},"end":{"line":4,"column":206,"offset":451}}}],"position":{"start":{"line":4,"column":196,"offset":441},"end":{"line":4,"column":234,"offset":479}}},{"type":"text","value":", because you don't need to start a real GraphQL server.","position":{"start":{"line":4,"column":234,"offset":479},"end":{"line":4,"column":290,"offset":535}}}],"position":{"start":{"line":4,"column":1,"offset":246},"end":{"line":4,"column":290,"offset":535}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#using-default-mocks","title":null,"children":[],"data":{"hProperties":{"aria-label":"using default mocks permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Using default mocks","position":{"start":{"line":6,"column":4,"offset":540},"end":{"line":6,"column":23,"offset":559}}}],"position":{"start":{"line":6,"column":1,"offset":537},"end":{"line":6,"column":23,"offset":559}},"data":{"id":"using-default-mocks","htmlAttributes":{"id":"using-default-mocks"},"hProperties":{"id":"using-default-mocks","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"You can turn on Apollo Server's default mocking logic by passing ","position":{"start":{"line":8,"column":1,"offset":561},"end":{"line":8,"column":66,"offset":626}}},{"type":"html","value":"<code class=\"language-text\">mocks: true</code>","position":{"start":{"line":8,"column":66,"offset":626},"end":{"line":8,"column":79,"offset":639}}},{"type":"text","value":" to the ApolloServer constructor:","position":{"start":{"line":8,"column":79,"offset":639},"end":{"line":8,"column":112,"offset":672}}}],"position":{"start":{"line":8,"column":1,"offset":561},"end":{"line":8,"column":112,"offset":672}}},{"type":"html","lang":"js{11}","meta":null,"value":"<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">  type Query {</span>\n<span class=\"token string\">    hello: String</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">mocks</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":10,"column":1,"offset":674},"end":{"line":27,"column":4,"offset":956}}},{"type":"paragraph","children":[{"type":"text","value":"Mocking logic looks at the type returned by each schema field and returns a default value for that type.","position":{"start":{"line":29,"column":1,"offset":958},"end":{"line":29,"column":105,"offset":1062}}}],"position":{"start":{"line":29,"column":1,"offset":958},"end":{"line":29,"column":105,"offset":1062}}},{"type":"paragraph","children":[{"type":"text","value":"The table below covers the default scalar types and the default mocked values returned for each type:","position":{"start":{"line":31,"column":1,"offset":1064},"end":{"line":31,"column":102,"offset":1165}}}],"position":{"start":{"line":31,"column":1,"offset":1064},"end":{"line":31,"column":102,"offset":1165}}},{"type":"html","value":"<table class=\"field-table\">\n  <thead>\n    <tr>\n      <th>Type</th>\n      <th>Default Mock Value</th>\n    </tr>\n  </thead>","position":{"start":{"line":33,"column":1,"offset":1167},"end":{"line":39,"column":11,"offset":1288}}},{"type":"html","value":"<tbody>\n<tr >\n<td>","position":{"start":{"line":41,"column":1,"offset":1290},"end":{"line":43,"column":5,"offset":1308}}},{"type":"heading","depth":5,"children":[{"type":"link","url":"#int","title":null,"children":[],"data":{"hProperties":{"aria-label":"int permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"html","value":"<code class=\"language-text\">Int</code>","position":{"start":{"line":45,"column":7,"offset":1316},"end":{"line":45,"column":12,"offset":1321}}}],"position":{"start":{"line":45,"column":1,"offset":1310},"end":{"line":45,"column":12,"offset":1321}},"data":{"id":"int","htmlAttributes":{"id":"int"},"hProperties":{"id":"int","style":"position:relative;"}}},{"type":"html","value":"</td>\n<td>","position":{"start":{"line":47,"column":1,"offset":1323},"end":{"line":48,"column":5,"offset":1333}}},{"type":"paragraph","children":[{"type":"text","value":"Returns a random positive or negative integer.","position":{"start":{"line":50,"column":1,"offset":1335},"end":{"line":50,"column":47,"offset":1381}}}],"position":{"start":{"line":50,"column":1,"offset":1335},"end":{"line":50,"column":47,"offset":1381}}},{"type":"html","value":"</td>\n</tr>","position":{"start":{"line":51,"column":1,"offset":1382},"end":{"line":52,"column":6,"offset":1393}}},{"type":"html","value":"<tr>\n<td>","position":{"start":{"line":55,"column":1,"offset":1396},"end":{"line":56,"column":5,"offset":1405}}},{"type":"heading","depth":5,"children":[{"type":"link","url":"#string","title":null,"children":[],"data":{"hProperties":{"aria-label":"string permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"html","value":"<code class=\"language-text\">String</code>","position":{"start":{"line":58,"column":7,"offset":1413},"end":{"line":58,"column":15,"offset":1421}}}],"position":{"start":{"line":58,"column":1,"offset":1407},"end":{"line":58,"column":15,"offset":1421}},"data":{"id":"string","htmlAttributes":{"id":"string"},"hProperties":{"id":"string","style":"position:relative;"}}},{"type":"html","value":"</td>\n<td>","position":{"start":{"line":60,"column":1,"offset":1423},"end":{"line":61,"column":5,"offset":1433}}},{"type":"paragraph","children":[{"type":"text","value":"Returns ","position":{"start":{"line":63,"column":1,"offset":1435},"end":{"line":63,"column":9,"offset":1443}}},{"type":"html","value":"<code class=\"language-text\">Hello world</code>","position":{"start":{"line":63,"column":9,"offset":1443},"end":{"line":63,"column":22,"offset":1456}}},{"type":"text","value":".","position":{"start":{"line":63,"column":22,"offset":1456},"end":{"line":63,"column":23,"offset":1457}}}],"position":{"start":{"line":63,"column":1,"offset":1435},"end":{"line":63,"column":23,"offset":1457}}},{"type":"html","value":"</td>\n</tr>","position":{"start":{"line":64,"column":1,"offset":1458},"end":{"line":65,"column":6,"offset":1469}}},{"type":"html","value":"<tr>\n<td>","position":{"start":{"line":68,"column":1,"offset":1472},"end":{"line":69,"column":5,"offset":1481}}},{"type":"heading","depth":5,"children":[{"type":"link","url":"#float","title":null,"children":[],"data":{"hProperties":{"aria-label":"float permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"html","value":"<code class=\"language-text\">Float</code>","position":{"start":{"line":71,"column":7,"offset":1489},"end":{"line":71,"column":14,"offset":1496}}}],"position":{"start":{"line":71,"column":1,"offset":1483},"end":{"line":71,"column":14,"offset":1496}},"data":{"id":"float","htmlAttributes":{"id":"float"},"hProperties":{"id":"float","style":"position:relative;"}}},{"type":"html","value":"</td>\n<td>","position":{"start":{"line":73,"column":1,"offset":1498},"end":{"line":74,"column":5,"offset":1508}}},{"type":"paragraph","children":[{"type":"text","value":"Returns a random positive or negative double-precision floating-point value.","position":{"start":{"line":76,"column":1,"offset":1510},"end":{"line":76,"column":77,"offset":1586}}}],"position":{"start":{"line":76,"column":1,"offset":1510},"end":{"line":76,"column":77,"offset":1586}}},{"type":"html","value":"</td>\n</tr>","position":{"start":{"line":77,"column":1,"offset":1587},"end":{"line":78,"column":6,"offset":1598}}},{"type":"html","value":"<tr>\n<td>","position":{"start":{"line":81,"column":1,"offset":1601},"end":{"line":82,"column":5,"offset":1610}}},{"type":"heading","depth":5,"children":[{"type":"link","url":"#boolean","title":null,"children":[],"data":{"hProperties":{"aria-label":"boolean permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"html","value":"<code class=\"language-text\">Boolean</code>","position":{"start":{"line":84,"column":7,"offset":1618},"end":{"line":84,"column":16,"offset":1627}}}],"position":{"start":{"line":84,"column":1,"offset":1612},"end":{"line":84,"column":16,"offset":1627}},"data":{"id":"boolean","htmlAttributes":{"id":"boolean"},"hProperties":{"id":"boolean","style":"position:relative;"}}},{"type":"html","value":"</td>\n<td>","position":{"start":{"line":86,"column":1,"offset":1629},"end":{"line":87,"column":5,"offset":1639}}},{"type":"paragraph","children":[{"type":"text","value":"Randomly returns either ","position":{"start":{"line":89,"column":1,"offset":1641},"end":{"line":89,"column":25,"offset":1665}}},{"type":"html","value":"<code class=\"language-text\">true</code>","position":{"start":{"line":89,"column":25,"offset":1665},"end":{"line":89,"column":31,"offset":1671}}},{"type":"text","value":" or ","position":{"start":{"line":89,"column":31,"offset":1671},"end":{"line":89,"column":35,"offset":1675}}},{"type":"html","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":89,"column":35,"offset":1675},"end":{"line":89,"column":42,"offset":1682}}},{"type":"text","value":".","position":{"start":{"line":89,"column":42,"offset":1682},"end":{"line":89,"column":43,"offset":1683}}}],"position":{"start":{"line":89,"column":1,"offset":1641},"end":{"line":89,"column":43,"offset":1683}}},{"type":"html","value":"</td>\n</tr>","position":{"start":{"line":90,"column":1,"offset":1684},"end":{"line":91,"column":6,"offset":1695}}},{"type":"html","value":"<tr>\n<td>","position":{"start":{"line":94,"column":1,"offset":1698},"end":{"line":95,"column":5,"offset":1707}}},{"type":"heading","depth":5,"children":[{"type":"link","url":"#id","title":null,"children":[],"data":{"hProperties":{"aria-label":"id permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"html","value":"<code class=\"language-text\">ID</code>","position":{"start":{"line":97,"column":7,"offset":1715},"end":{"line":97,"column":11,"offset":1719}}}],"position":{"start":{"line":97,"column":1,"offset":1709},"end":{"line":97,"column":11,"offset":1719}},"data":{"id":"id","htmlAttributes":{"id":"id"},"hProperties":{"id":"id","style":"position:relative;"}}},{"type":"html","value":"</td>\n<td>","position":{"start":{"line":99,"column":1,"offset":1721},"end":{"line":100,"column":5,"offset":1731}}},{"type":"paragraph","children":[{"type":"text","value":"Returns a randomized UUID containing a combination of integers and letters.","position":{"start":{"line":102,"column":1,"offset":1733},"end":{"line":102,"column":76,"offset":1808}}}],"position":{"start":{"line":102,"column":1,"offset":1733},"end":{"line":102,"column":76,"offset":1808}}},{"type":"html","value":"</td>\n</tr>","position":{"start":{"line":103,"column":1,"offset":1809},"end":{"line":104,"column":6,"offset":1820}}},{"type":"html","value":"</tbody>\n</table>","position":{"start":{"line":106,"column":1,"offset":1822},"end":{"line":107,"column":9,"offset":1839}}},{"type":"paragraph","children":[{"type":"text","value":"When using mocks, you don't have to specify ","position":{"start":{"line":109,"column":1,"offset":1841},"end":{"line":109,"column":45,"offset":1885}}},{"type":"html","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":109,"column":45,"offset":1885},"end":{"line":109,"column":56,"offset":1896}}},{"type":"text","value":". By default, any ","position":{"start":{"line":109,"column":56,"offset":1896},"end":{"line":109,"column":74,"offset":1914}}},{"type":"html","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":109,"column":74,"offset":1914},"end":{"line":109,"column":85,"offset":1925}}},{"type":"text","value":" you specify are ","position":{"start":{"line":109,"column":85,"offset":1925},"end":{"line":109,"column":102,"offset":1942}}},{"type":"strong","children":[{"type":"text","value":"ignored","position":{"start":{"line":109,"column":104,"offset":1944},"end":{"line":109,"column":111,"offset":1951}}}],"position":{"start":{"line":109,"column":102,"offset":1942},"end":{"line":109,"column":113,"offset":1953}}},{"type":"text","value":" when you enable ","position":{"start":{"line":109,"column":113,"offset":1953},"end":{"line":109,"column":130,"offset":1970}}},{"type":"html","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":109,"column":130,"offset":1970},"end":{"line":109,"column":137,"offset":1977}}},{"type":"text","value":". To configure this behavior, see ","position":{"start":{"line":109,"column":137,"offset":1977},"end":{"line":109,"column":171,"offset":2011}}},{"type":"link","title":null,"url":"#using-existing-resolvers-with-mocks","children":[{"type":"text","value":"Using existing resolvers with mocks","position":{"start":{"line":109,"column":172,"offset":2012},"end":{"line":109,"column":207,"offset":2047}}}],"position":{"start":{"line":109,"column":171,"offset":2011},"end":{"line":109,"column":246,"offset":2086}}},{"type":"text","value":".","position":{"start":{"line":109,"column":246,"offset":2086},"end":{"line":109,"column":247,"offset":2087}}}],"position":{"start":{"line":109,"column":1,"offset":1841},"end":{"line":109,"column":247,"offset":2087}}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note: If ","position":{"start":{"line":111,"column":2,"offset":2090},"end":{"line":111,"column":11,"offset":2099}}},{"type":"html","value":"<code class=\"language-text\">typeDefs</code>","position":{"start":{"line":111,"column":11,"offset":2099},"end":{"line":111,"column":21,"offset":2109}}},{"type":"text","value":" has any ","position":{"start":{"line":111,"column":21,"offset":2109},"end":{"line":111,"column":30,"offset":2118}}},{"type":"link","title":null,"url":"/schema/custom-scalars/#providing-custom-scalars-to-apollo-server","children":[{"type":"text","value":"custom scalar types","position":{"start":{"line":111,"column":31,"offset":2119},"end":{"line":111,"column":50,"offset":2138}}}],"position":{"start":{"line":111,"column":30,"offset":2118},"end":{"line":111,"column":120,"offset":2208}}},{"type":"text","value":", you will need to specify what your server should return for those types. You can do this by creating a customized mock with resolvers for each custom scalar type, as described below.","position":{"start":{"line":111,"column":120,"offset":2208},"end":{"line":111,"column":304,"offset":2392}}}],"position":{"start":{"line":111,"column":2,"offset":2090},"end":{"line":111,"column":304,"offset":2392}}}],"position":{"start":{"line":111,"column":1,"offset":2089},"end":{"line":111,"column":304,"offset":2392}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#customizing-mocks","title":null,"children":[],"data":{"hProperties":{"aria-label":"customizing mocks permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Customizing mocks","position":{"start":{"line":113,"column":4,"offset":2397},"end":{"line":113,"column":21,"offset":2414}}}],"position":{"start":{"line":113,"column":1,"offset":2394},"end":{"line":113,"column":21,"offset":2414}},"data":{"id":"customizing-mocks","htmlAttributes":{"id":"customizing-mocks"},"hProperties":{"id":"customizing-mocks","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"For more sophisticated testing, you can customize your mocks to return user-specified data.","position":{"start":{"line":115,"column":1,"offset":2416},"end":{"line":115,"column":92,"offset":2507}}}],"position":{"start":{"line":115,"column":1,"offset":2416},"end":{"line":115,"column":92,"offset":2507}}},{"type":"paragraph","children":[{"type":"text","value":"Instead of providing a boolean to the ","position":{"start":{"line":117,"column":1,"offset":2509},"end":{"line":117,"column":39,"offset":2547}}},{"type":"html","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":117,"column":39,"offset":2547},"end":{"line":117,"column":46,"offset":2554}}},{"type":"text","value":" option, you can provide an object that defines custom mocking logic. This enables you to specify values to return for different return types.","position":{"start":{"line":117,"column":46,"offset":2554},"end":{"line":117,"column":188,"offset":2696}}}],"position":{"start":{"line":117,"column":1,"offset":2509},"end":{"line":117,"column":188,"offset":2696}}},{"type":"paragraph","children":[{"type":"text","value":"By default, the functions in ","position":{"start":{"line":119,"column":1,"offset":2698},"end":{"line":119,"column":30,"offset":2727}}},{"type":"html","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":119,"column":30,"offset":2727},"end":{"line":119,"column":37,"offset":2734}}},{"type":"text","value":" take precedence over any currently defined resolvers. In the below example, both ","position":{"start":{"line":119,"column":37,"offset":2734},"end":{"line":119,"column":119,"offset":2816}}},{"type":"html","value":"<code class=\"language-text\">Query.hello</code>","position":{"start":{"line":119,"column":119,"offset":2816},"end":{"line":119,"column":132,"offset":2829}}},{"type":"text","value":" and ","position":{"start":{"line":119,"column":132,"offset":2829},"end":{"line":119,"column":137,"offset":2834}}},{"type":"html","value":"<code class=\"language-text\">Query.resolved</code>","position":{"start":{"line":119,"column":137,"offset":2834},"end":{"line":119,"column":153,"offset":2850}}},{"type":"text","value":" return ","position":{"start":{"line":119,"column":153,"offset":2850},"end":{"line":119,"column":161,"offset":2858}}},{"type":"html","value":"<code class=\"language-text\">Hello</code>","position":{"start":{"line":119,"column":161,"offset":2858},"end":{"line":119,"column":168,"offset":2865}}},{"type":"text","value":".","position":{"start":{"line":119,"column":168,"offset":2865},"end":{"line":119,"column":169,"offset":2866}}}],"position":{"start":{"line":119,"column":1,"offset":2698},"end":{"line":119,"column":169,"offset":2866}}},{"type":"html","lang":"js{16-20}","meta":null,"value":"<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">  type Query {</span>\n<span class=\"token string\">    hello: String</span>\n<span class=\"token string\">    resolved: String</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">resolved</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Resolved'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">Int</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">Float</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">22.1</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">String</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n  mocks<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":121,"column":1,"offset":2868},"end":{"line":152,"column":4,"offset":3335}}},{"type":"paragraph","children":[{"type":"text","value":"You can also use ","position":{"start":{"line":154,"column":1,"offset":3337},"end":{"line":154,"column":18,"offset":3354}}},{"type":"html","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":154,"column":18,"offset":3354},"end":{"line":154,"column":25,"offset":3361}}},{"type":"text","value":" to define object types and the fields belonging to those object types (much like a ","position":{"start":{"line":154,"column":25,"offset":3361},"end":{"line":154,"column":109,"offset":3445}}},{"type":"link","title":null,"url":"/data/resolvers/#base-syntax","children":[{"type":"text","value":"resolver map","position":{"start":{"line":154,"column":110,"offset":3446},"end":{"line":154,"column":122,"offset":3458}}}],"position":{"start":{"line":154,"column":109,"offset":3445},"end":{"line":154,"column":155,"offset":3491}}},{"type":"text","value":").","position":{"start":{"line":154,"column":155,"offset":3491},"end":{"line":154,"column":157,"offset":3493}}}],"position":{"start":{"line":154,"column":1,"offset":3337},"end":{"line":154,"column":157,"offset":3493}}},{"type":"paragraph","children":[{"type":"text","value":"In the below example, note that our mocked ","position":{"start":{"line":156,"column":1,"offset":3495},"end":{"line":156,"column":44,"offset":3538}}},{"type":"html","value":"<code class=\"language-text\">Person</code>","position":{"start":{"line":156,"column":44,"offset":3538},"end":{"line":156,"column":52,"offset":3546}}},{"type":"text","value":" object calls a function returning an object with fields that contain ","position":{"start":{"line":156,"column":52,"offset":3546},"end":{"line":156,"column":122,"offset":3616}}},{"type":"emphasis","children":[{"type":"text","value":"other","position":{"start":{"line":156,"column":123,"offset":3617},"end":{"line":156,"column":128,"offset":3622}}}],"position":{"start":{"line":156,"column":122,"offset":3616},"end":{"line":156,"column":129,"offset":3623}}},{"type":"text","value":" functions:","position":{"start":{"line":156,"column":129,"offset":3623},"end":{"line":156,"column":140,"offset":3634}}}],"position":{"start":{"line":156,"column":1,"offset":3495},"end":{"line":156,"column":140,"offset":3634}}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">// importing the casual library</span>\n<span class=\"token keyword\">const</span> casual <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'casual'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Person</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> casual<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> casual<span class=\"token punctuation\">.</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":158,"column":1,"offset":3636},"end":{"line":168,"column":4,"offset":3818}}},{"type":"paragraph","children":[{"type":"text","value":"The previous example uses ","position":{"start":{"line":170,"column":1,"offset":3820},"end":{"line":170,"column":27,"offset":3846}}},{"type":"link","title":null,"url":"https://github.com/boo1ean/casual","children":[{"type":"text","value":"casual","position":{"start":{"line":170,"column":28,"offset":3847},"end":{"line":170,"column":34,"offset":3853}}}],"position":{"start":{"line":170,"column":27,"offset":3846},"end":{"line":170,"column":70,"offset":3889}}},{"type":"text","value":", a fake data generator for JavaScript that returns a different result every time the function is called. In other scenarios, such as testing, a collection of fake objects or a generator that always uses a consistent seed are often necessary to provide consistent data.","position":{"start":{"line":170,"column":70,"offset":3889},"end":{"line":170,"column":339,"offset":4158}}}],"position":{"start":{"line":170,"column":1,"offset":3820},"end":{"line":170,"column":339,"offset":4158}}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#using-lists-in-mocks","title":null,"children":[],"data":{"hProperties":{"aria-label":"using lists in mocks permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Using lists in mocks","position":{"start":{"line":172,"column":5,"offset":4164},"end":{"line":172,"column":25,"offset":4184}}}],"position":{"start":{"line":172,"column":1,"offset":4160},"end":{"line":172,"column":25,"offset":4184}},"data":{"id":"using-lists-in-mocks","htmlAttributes":{"id":"using-lists-in-mocks"},"hProperties":{"id":"using-lists-in-mocks","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"To automate mocking a list, return an array of the desired length. Using ","position":{"start":{"line":174,"column":1,"offset":4186},"end":{"line":174,"column":74,"offset":4259}}},{"type":"html","value":"<code class=\"language-text\">[...new Array(n)]</code>","position":{"start":{"line":174,"column":74,"offset":4259},"end":{"line":174,"column":93,"offset":4278}}},{"type":"text","value":" is convenient syntax for creating an array that contains ","position":{"start":{"line":174,"column":93,"offset":4278},"end":{"line":174,"column":151,"offset":4336}}},{"type":"emphasis","children":[{"type":"text","value":"n","position":{"start":{"line":174,"column":152,"offset":4337},"end":{"line":174,"column":153,"offset":4338}}}],"position":{"start":{"line":174,"column":151,"offset":4336},"end":{"line":174,"column":154,"offset":4339}}},{"type":"text","value":" copies of ","position":{"start":{"line":174,"column":154,"offset":4339},"end":{"line":174,"column":165,"offset":4350}}},{"type":"html","value":"<code class=\"language-text\">undefined</code>","position":{"start":{"line":174,"column":165,"offset":4350},"end":{"line":174,"column":176,"offset":4361}}},{"type":"text","value":".","position":{"start":{"line":174,"column":176,"offset":4361},"end":{"line":174,"column":177,"offset":4362}}}],"position":{"start":{"line":174,"column":1,"offset":4186},"end":{"line":174,"column":177,"offset":4362}}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> casual <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'casual'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Person</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// a list of length between 2 and 6, using the \"casual\" npm module</span>\n    <span class=\"token comment\">// to generate a random integer</span>\n    <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>casual<span class=\"token punctuation\">.</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// a list of three lists of two items: [[1, 1], [2, 2], [3, 3]]</span>\n    <span class=\"token function-variable function\">listOfLists</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":176,"column":1,"offset":4364},"end":{"line":188,"column":4,"offset":4750}}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#using-existing-resolvers-with-mocks","title":null,"children":[],"data":{"hProperties":{"aria-label":"using existing resolvers with mocks permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Using existing resolvers with mocks","position":{"start":{"line":189,"column":5,"offset":4755},"end":{"line":189,"column":40,"offset":4790}}}],"position":{"start":{"line":189,"column":1,"offset":4751},"end":{"line":189,"column":40,"offset":4790}},"data":{"id":"using-existing-resolvers-with-mocks","htmlAttributes":{"id":"using-existing-resolvers-with-mocks"},"hProperties":{"id":"using-existing-resolvers-with-mocks","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"The default behavior for mocks is to overwrite the resolvers already present in the schema. To use your server's existing resolvers while mocking, set the ","position":{"start":{"line":191,"column":1,"offset":4792},"end":{"line":191,"column":156,"offset":4947}}},{"type":"html","value":"<code class=\"language-text\">mockEntireSchema</code>","position":{"start":{"line":191,"column":156,"offset":4947},"end":{"line":191,"column":174,"offset":4965}}},{"type":"text","value":" option to ","position":{"start":{"line":191,"column":174,"offset":4965},"end":{"line":191,"column":185,"offset":4976}}},{"type":"html","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":191,"column":185,"offset":4976},"end":{"line":191,"column":192,"offset":4983}}},{"type":"text","value":".","position":{"start":{"line":191,"column":192,"offset":4983},"end":{"line":191,"column":193,"offset":4984}}}],"position":{"start":{"line":191,"column":1,"offset":4792},"end":{"line":191,"column":193,"offset":4984}}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note: Mocking resolvers doesn't work if the ","position":{"start":{"line":193,"column":3,"offset":4988},"end":{"line":193,"column":47,"offset":5032}}},{"type":"html","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":193,"column":47,"offset":5032},"end":{"line":193,"column":54,"offset":5039}}},{"type":"text","value":" option is ","position":{"start":{"line":193,"column":54,"offset":5039},"end":{"line":193,"column":65,"offset":5050}}},{"type":"html","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":193,"column":65,"offset":5050},"end":{"line":193,"column":72,"offset":5057}}},{"type":"text","value":", even if ","position":{"start":{"line":193,"column":72,"offset":5057},"end":{"line":193,"column":82,"offset":5067}}},{"type":"html","value":"<code class=\"language-text\">mockEntireSchema</code>","position":{"start":{"line":193,"column":82,"offset":5067},"end":{"line":193,"column":100,"offset":5085}}},{"type":"text","value":" is ","position":{"start":{"line":193,"column":100,"offset":5085},"end":{"line":193,"column":104,"offset":5089}}},{"type":"html","value":"<code class=\"language-text\">true</code>","position":{"start":{"line":193,"column":104,"offset":5089},"end":{"line":193,"column":110,"offset":5095}}},{"type":"text","value":".","position":{"start":{"line":193,"column":110,"offset":5095},"end":{"line":193,"column":111,"offset":5096}}}],"position":{"start":{"line":193,"column":3,"offset":4988},"end":{"line":193,"column":111,"offset":5096}}}],"position":{"start":{"line":193,"column":1,"offset":4986},"end":{"line":193,"column":111,"offset":5096}}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">  type Query {</span>\n<span class=\"token string\">    hello: String</span>\n<span class=\"token string\">    resolved: String</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">resolved</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Resolved'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Int</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">Float</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">22.1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">String</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n  mocks<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">mockEntireSchema</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":195,"column":1,"offset":5098},"end":{"line":227,"column":4,"offset":5603}}},{"type":"paragraph","children":[{"type":"text","value":"Running the above example with the ","position":{"start":{"line":229,"column":1,"offset":5605},"end":{"line":229,"column":36,"offset":5640}}},{"type":"html","value":"<code class=\"language-text\">mockEntireSchema</code>","position":{"start":{"line":229,"column":36,"offset":5640},"end":{"line":229,"column":54,"offset":5658}}},{"type":"text","value":" option set to ","position":{"start":{"line":229,"column":54,"offset":5658},"end":{"line":229,"column":69,"offset":5673}}},{"type":"html","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":229,"column":69,"offset":5673},"end":{"line":229,"column":76,"offset":5680}}},{"type":"text","value":", the ","position":{"start":{"line":229,"column":76,"offset":5680},"end":{"line":229,"column":82,"offset":5686}}},{"type":"html","value":"<code class=\"language-text\">resolved</code>","position":{"start":{"line":229,"column":82,"offset":5686},"end":{"line":229,"column":92,"offset":5696}}},{"type":"text","value":" field now returns the string ","position":{"start":{"line":229,"column":92,"offset":5696},"end":{"line":229,"column":122,"offset":5726}}},{"type":"html","value":"<code class=\"language-text\">Resolved</code>","position":{"start":{"line":229,"column":122,"offset":5726},"end":{"line":229,"column":132,"offset":5736}}},{"type":"text","value":".","position":{"start":{"line":229,"column":132,"offset":5736},"end":{"line":229,"column":133,"offset":5737}}}],"position":{"start":{"line":229,"column":1,"offset":5605},"end":{"line":229,"column":133,"offset":5737}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#mocking-a-schema-using-introspection","title":null,"children":[],"data":{"hProperties":{"aria-label":"mocking a schema using introspection permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Mocking a schema using introspection","position":{"start":{"line":231,"column":4,"offset":5742},"end":{"line":231,"column":40,"offset":5778}}}],"position":{"start":{"line":231,"column":1,"offset":5739},"end":{"line":231,"column":40,"offset":5778}},"data":{"id":"mocking-a-schema-using-introspection","htmlAttributes":{"id":"mocking-a-schema-using-introspection"},"hProperties":{"id":"mocking-a-schema-using-introspection","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"The GraphQL specification allows clients to introspect the schema with a ","position":{"start":{"line":233,"column":1,"offset":5780},"end":{"line":233,"column":74,"offset":5853}}},{"type":"link","title":null,"url":"http://spec.graphql.org/October2021/#sec-Introspection","children":[{"type":"text","value":"special set of types and fields","position":{"start":{"line":233,"column":75,"offset":5854},"end":{"line":233,"column":106,"offset":5885}}}],"position":{"start":{"line":233,"column":74,"offset":5853},"end":{"line":233,"column":163,"offset":5942}}},{"type":"text","value":" that every schema must include. The results of a ","position":{"start":{"line":233,"column":163,"offset":5942},"end":{"line":233,"column":213,"offset":5992}}},{"type":"link","title":null,"url":"https://github.com/graphql/graphql-js/blob/main/src/utilities/getIntrospectionQuery.ts","children":[{"type":"text","value":"standard introspection query","position":{"start":{"line":233,"column":214,"offset":5993},"end":{"line":233,"column":242,"offset":6021}}}],"position":{"start":{"line":233,"column":213,"offset":5992},"end":{"line":233,"column":331,"offset":6110}}},{"type":"text","value":" can be used to generate an instance of ","position":{"start":{"line":233,"column":331,"offset":6110},"end":{"line":233,"column":371,"offset":6150}}},{"type":"html","value":"<code class=\"language-text\">GraphQLSchema</code>","position":{"start":{"line":233,"column":371,"offset":6150},"end":{"line":233,"column":386,"offset":6165}}},{"type":"text","value":" that can be mocked as explained above.","position":{"start":{"line":233,"column":386,"offset":6165},"end":{"line":233,"column":425,"offset":6204}}}],"position":{"start":{"line":233,"column":1,"offset":5780},"end":{"line":233,"column":425,"offset":6204}}},{"type":"paragraph","children":[{"type":"text","value":"This helps when you need to mock a schema defined in a language besides JavaScript.","position":{"start":{"line":235,"column":1,"offset":6206},"end":{"line":235,"column":84,"offset":6289}}}],"position":{"start":{"line":235,"column":1,"offset":6206},"end":{"line":235,"column":84,"offset":6289}}},{"type":"paragraph","children":[{"type":"text","value":"To convert an ","position":{"start":{"line":237,"column":1,"offset":6291},"end":{"line":237,"column":15,"offset":6305}}},{"type":"link","title":null,"url":"https://github.com/graphql/graphql-js/blob/main/src/utilities/getIntrospectionQuery.ts","children":[{"type":"text","value":"introspection query","position":{"start":{"line":237,"column":16,"offset":6306},"end":{"line":237,"column":35,"offset":6325}}}],"position":{"start":{"line":237,"column":15,"offset":6305},"end":{"line":237,"column":124,"offset":6414}}},{"type":"text","value":" result to a ","position":{"start":{"line":237,"column":124,"offset":6414},"end":{"line":237,"column":137,"offset":6427}}},{"type":"html","value":"<code class=\"language-text\">GraphQLSchema</code>","position":{"start":{"line":237,"column":137,"offset":6427},"end":{"line":237,"column":152,"offset":6442}}},{"type":"text","value":" object, you can use the ","position":{"start":{"line":237,"column":152,"offset":6442},"end":{"line":237,"column":177,"offset":6467}}},{"type":"html","value":"<code class=\"language-text\">buildClientSchema</code>","position":{"start":{"line":237,"column":177,"offset":6467},"end":{"line":237,"column":196,"offset":6486}}},{"type":"text","value":" utility from the ","position":{"start":{"line":237,"column":196,"offset":6486},"end":{"line":237,"column":214,"offset":6504}}},{"type":"html","value":"<code class=\"language-text\">graphql</code>","position":{"start":{"line":237,"column":214,"offset":6504},"end":{"line":237,"column":223,"offset":6513}}},{"type":"text","value":" package.","position":{"start":{"line":237,"column":223,"offset":6513},"end":{"line":237,"column":232,"offset":6522}}}],"position":{"start":{"line":237,"column":1,"offset":6291},"end":{"line":237,"column":232,"offset":6522}}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> buildClientSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> introspectionResult <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'schema.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">buildClientSchema</span><span class=\"token punctuation\">(</span>introspectionResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schema<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mocks</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":239,"column":1,"offset":6524},"end":{"line":254,"column":4,"offset":6914}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#api","title":null,"children":[],"data":{"hProperties":{"aria-label":"api permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"API","position":{"start":{"line":256,"column":4,"offset":6919},"end":{"line":256,"column":7,"offset":6922}}}],"position":{"start":{"line":256,"column":1,"offset":6916},"end":{"line":256,"column":7,"offset":6922}},"data":{"id":"api","htmlAttributes":{"id":"api"},"hProperties":{"id":"api","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Under the hood, Apollo Server's mocking functionality is provided by the function ","position":{"start":{"line":258,"column":1,"offset":6924},"end":{"line":258,"column":83,"offset":7006}}},{"type":"link","title":null,"url":"https://www.graphql-tools.com/docs/mocking/","children":[{"type":"html","value":"<code class=\"language-text\">addMocksToSchema</code>","position":{"start":{"line":258,"column":84,"offset":7007},"end":{"line":258,"column":102,"offset":7025}}}],"position":{"start":{"line":258,"column":83,"offset":7006},"end":{"line":258,"column":148,"offset":7071}}},{"type":"text","value":" from the ","position":{"start":{"line":258,"column":148,"offset":7071},"end":{"line":258,"column":158,"offset":7081}}},{"type":"html","value":"<code class=\"language-text\">@graphql-tools/mock</code>","position":{"start":{"line":258,"column":158,"offset":7081},"end":{"line":258,"column":179,"offset":7102}}},{"type":"text","value":" package. The ","position":{"start":{"line":258,"column":179,"offset":7102},"end":{"line":258,"column":193,"offset":7116}}},{"type":"html","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":258,"column":193,"offset":7116},"end":{"line":258,"column":200,"offset":7123}}},{"type":"text","value":" object is passed directly to the ","position":{"start":{"line":258,"column":200,"offset":7123},"end":{"line":258,"column":234,"offset":7157}}},{"type":"html","value":"<code class=\"language-text\">addMocksToSchema</code>","position":{"start":{"line":258,"column":234,"offset":7157},"end":{"line":258,"column":252,"offset":7175}}},{"type":"text","value":" function, and ","position":{"start":{"line":258,"column":252,"offset":7175},"end":{"line":258,"column":267,"offset":7190}}},{"type":"html","value":"<code class=\"language-text\">preserveResolvers</code>","position":{"start":{"line":258,"column":267,"offset":7190},"end":{"line":258,"column":286,"offset":7209}}},{"type":"text","value":" is the inverse of ","position":{"start":{"line":258,"column":286,"offset":7209},"end":{"line":258,"column":305,"offset":7228}}},{"type":"html","value":"<code class=\"language-text\">mockEntireSchema</code>","position":{"start":{"line":258,"column":305,"offset":7228},"end":{"line":258,"column":323,"offset":7246}}},{"type":"text","value":".","position":{"start":{"line":258,"column":323,"offset":7246},"end":{"line":258,"column":324,"offset":7247}}}],"position":{"start":{"line":258,"column":1,"offset":6924},"end":{"line":258,"column":324,"offset":7247}}},{"type":"paragraph","children":[{"type":"text","value":"Apollo Server does not support all of the arguments to ","position":{"start":{"line":260,"column":1,"offset":7249},"end":{"line":260,"column":56,"offset":7304}}},{"type":"html","value":"<code class=\"language-text\">addMocksToSchema</code>","position":{"start":{"line":260,"column":56,"offset":7304},"end":{"line":260,"column":74,"offset":7322}}},{"type":"text","value":", such as ","position":{"start":{"line":260,"column":74,"offset":7322},"end":{"line":260,"column":84,"offset":7332}}},{"type":"html","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":260,"column":84,"offset":7332},"end":{"line":260,"column":95,"offset":7343}}},{"type":"text","value":". To use features of ","position":{"start":{"line":260,"column":95,"offset":7343},"end":{"line":260,"column":116,"offset":7364}}},{"type":"html","value":"<code class=\"language-text\">@graphql-tools/mock</code>","position":{"start":{"line":260,"column":116,"offset":7364},"end":{"line":260,"column":137,"offset":7385}}},{"type":"text","value":" that aren't supported by Apollo Server, you can install and use ","position":{"start":{"line":260,"column":137,"offset":7385},"end":{"line":260,"column":202,"offset":7450}}},{"type":"html","value":"<code class=\"language-text\">@graphql-tools/mock</code>","position":{"start":{"line":260,"column":202,"offset":7450},"end":{"line":260,"column":223,"offset":7471}}},{"type":"text","value":" directly:","position":{"start":{"line":260,"column":223,"offset":7471},"end":{"line":260,"column":233,"offset":7481}}}],"position":{"start":{"line":260,"column":1,"offset":7249},"end":{"line":260,"column":233,"offset":7481}}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> addMocksToSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@graphql-tools/mock'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> makeExecutableSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@graphql-tools/schema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">schema</span><span class=\"token operator\">:</span> <span class=\"token function\">addMocksToSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">schema</span><span class=\"token operator\">:</span> <span class=\"token function\">makeExecutableSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":262,"column":1,"offset":7483},"end":{"line":271,"column":4,"offset":7752}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":272,"column":1,"offset":7753}}}}