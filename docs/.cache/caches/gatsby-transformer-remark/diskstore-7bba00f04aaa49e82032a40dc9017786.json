{"expireTime":9007200901519371000,"key":"transformer-remark-markdown-html-ast-e98bac0d5b8fdae7a62c7d45e127c132-gatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-mermaidgatsby-remark-code-titlesgatsby-remark-prismjsgatsby-remark-rewrite-relative-linksgatsby-remark-check-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The GraphQL specification includes default scalar types ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":57,"offset":57}}},{"type":"raw","value":"<code class=\"language-text\">Int</code>","position":{"start":{"line":2,"column":57,"offset":57},"end":{"line":2,"column":62,"offset":62}}},{"type":"text","value":", ","position":{"start":{"line":2,"column":62,"offset":62},"end":{"line":2,"column":64,"offset":64}}},{"type":"raw","value":"<code class=\"language-text\">Float</code>","position":{"start":{"line":2,"column":64,"offset":64},"end":{"line":2,"column":71,"offset":71}}},{"type":"text","value":", ","position":{"start":{"line":2,"column":71,"offset":71},"end":{"line":2,"column":73,"offset":73}}},{"type":"raw","value":"<code class=\"language-text\">String</code>","position":{"start":{"line":2,"column":73,"offset":73},"end":{"line":2,"column":81,"offset":81}}},{"type":"text","value":", ","position":{"start":{"line":2,"column":81,"offset":81},"end":{"line":2,"column":83,"offset":83}}},{"type":"raw","value":"<code class=\"language-text\">Boolean</code>","position":{"start":{"line":2,"column":83,"offset":83},"end":{"line":2,"column":92,"offset":92}}},{"type":"text","value":", and ","position":{"start":{"line":2,"column":92,"offset":92},"end":{"line":2,"column":98,"offset":98}}},{"type":"raw","value":"<code class=\"language-text\">ID</code>","position":{"start":{"line":2,"column":98,"offset":98},"end":{"line":2,"column":102,"offset":102}}},{"type":"text","value":". Although these scalars cover the majority of use cases, some applications need to support other atomic data types (such as ","position":{"start":{"line":2,"column":102,"offset":102},"end":{"line":2,"column":227,"offset":227}}},{"type":"raw","value":"<code class=\"language-text\">Date</code>","position":{"start":{"line":2,"column":227,"offset":227},"end":{"line":2,"column":233,"offset":233}}},{"type":"text","value":") or add validation to an existing type. To enable this, you can define custom scalar types.","position":{"start":{"line":2,"column":233,"offset":233},"end":{"line":2,"column":325,"offset":325}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":325,"offset":325}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"defining-a-custom-scalar","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#defining-a-custom-scalar","aria-label":"defining a custom scalar permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Defining a custom scalar","position":{"start":{"line":4,"column":4,"offset":330},"end":{"line":4,"column":28,"offset":354}}}],"position":{"start":{"line":4,"column":1,"offset":327},"end":{"line":4,"column":28,"offset":354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To define a custom scalar, add it to your schema like so:","position":{"start":{"line":6,"column":1,"offset":356},"end":{"line":6,"column":58,"offset":413}}}],"position":{"start":{"line":6,"column":1,"offset":356},"end":{"line":6,"column":58,"offset":413}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">scalar</span> <span class=\"token class-name\">MyCustomScalar</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>","position":{"start":{"line":8,"column":1,"offset":415},"end":{"line":10,"column":4,"offset":451}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can now use ","position":{"start":{"line":12,"column":1,"offset":453},"end":{"line":12,"column":17,"offset":469}}},{"type":"raw","value":"<code class=\"language-text\">MyCustomScalar</code>","position":{"start":{"line":12,"column":17,"offset":469},"end":{"line":12,"column":33,"offset":485}}},{"type":"text","value":" in your schema anywhere you can use a default scalar (e.g., as the type of an object field, input type field, or argument).","position":{"start":{"line":12,"column":33,"offset":485},"end":{"line":12,"column":157,"offset":609}}}],"position":{"start":{"line":12,"column":1,"offset":453},"end":{"line":12,"column":157,"offset":609}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, Apollo Server still needs to know how to interact with values of this new scalar type.","position":{"start":{"line":14,"column":1,"offset":611},"end":{"line":14,"column":96,"offset":706}}}],"position":{"start":{"line":14,"column":1,"offset":611},"end":{"line":14,"column":96,"offset":706}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"defining-custom-scalar-logic","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#defining-custom-scalar-logic","aria-label":"defining custom scalar logic permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Defining custom scalar logic","position":{"start":{"line":16,"column":4,"offset":711},"end":{"line":16,"column":32,"offset":739}}}],"position":{"start":{"line":16,"column":1,"offset":708},"end":{"line":16,"column":32,"offset":739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After you define a custom scalar type, you need to define how Apollo Server interacts with it. In particular, you need to define:","position":{"start":{"line":18,"column":1,"offset":741},"end":{"line":18,"column":130,"offset":870}}}],"position":{"start":{"line":18,"column":1,"offset":741},"end":{"line":18,"column":130,"offset":870}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"How the scalar's value is represented in your backend","position":{"start":{"line":20,"column":3,"offset":874},"end":{"line":20,"column":56,"offset":927}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"This is often the representation used by the driver for your backing data store.","position":{"start":{"line":21,"column":8,"offset":935},"end":{"line":21,"column":88,"offset":1015}}}],"position":{"start":{"line":21,"column":7,"offset":934},"end":{"line":21,"column":89,"offset":1016}}}],"position":{"start":{"line":21,"column":5,"offset":932},"end":{"line":21,"column":89,"offset":1016}}},{"type":"text","value":"\n"}],"position":{"start":{"line":21,"column":5,"offset":932},"end":{"line":21,"column":89,"offset":1016}}},{"type":"text","value":"\n"}],"position":{"start":{"line":20,"column":1,"offset":872},"end":{"line":21,"column":89,"offset":1016}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"How the value's back-end representation is ","position":{"start":{"line":22,"column":3,"offset":1019},"end":{"line":22,"column":46,"offset":1062}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"serialized","position":{"start":{"line":22,"column":48,"offset":1064},"end":{"line":22,"column":58,"offset":1074}}}],"position":{"start":{"line":22,"column":46,"offset":1062},"end":{"line":22,"column":60,"offset":1076}}},{"type":"text","value":" to a JSON-compatible type","position":{"start":{"line":22,"column":60,"offset":1076},"end":{"line":22,"column":86,"offset":1102}}}],"position":{"start":{"line":22,"column":1,"offset":1017},"end":{"line":22,"column":86,"offset":1102}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"How the JSON-compatible representation is ","position":{"start":{"line":23,"column":3,"offset":1105},"end":{"line":23,"column":45,"offset":1147}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"deserialized","position":{"start":{"line":23,"column":47,"offset":1149},"end":{"line":23,"column":59,"offset":1161}}}],"position":{"start":{"line":23,"column":45,"offset":1147},"end":{"line":23,"column":61,"offset":1163}}},{"type":"text","value":" to the back-end representation","position":{"start":{"line":23,"column":61,"offset":1163},"end":{"line":23,"column":92,"offset":1194}}}],"position":{"start":{"line":23,"column":1,"offset":1103},"end":{"line":23,"column":92,"offset":1194}}},{"type":"text","value":"\n"}],"position":{"start":{"line":20,"column":1,"offset":872},"end":{"line":23,"column":92,"offset":1194}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You define these interactions in an instance of the ","position":{"start":{"line":25,"column":1,"offset":1196},"end":{"line":25,"column":53,"offset":1248}}},{"type":"element","tagName":"a","properties":{"href":"http://graphql.org/graphql-js/type/#graphqlscalartype"},"children":[{"type":"raw","value":"<code class=\"language-text\">GraphQLScalarType</code>","position":{"start":{"line":25,"column":54,"offset":1249},"end":{"line":25,"column":73,"offset":1268}}}],"position":{"start":{"line":25,"column":53,"offset":1248},"end":{"line":25,"column":129,"offset":1324}}},{"type":"text","value":" class.","position":{"start":{"line":25,"column":129,"offset":1324},"end":{"line":25,"column":136,"offset":1331}}}],"position":{"start":{"line":25,"column":1,"offset":1196},"end":{"line":25,"column":136,"offset":1331}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For more information about the ","position":{"start":{"line":27,"column":3,"offset":1335},"end":{"line":27,"column":34,"offset":1366}}},{"type":"raw","value":"<code class=\"language-text\">graphql</code>","position":{"start":{"line":27,"column":34,"offset":1366},"end":{"line":27,"column":43,"offset":1375}}},{"type":"text","value":" library's type system, see the ","position":{"start":{"line":27,"column":43,"offset":1375},"end":{"line":27,"column":75,"offset":1407}}},{"type":"element","tagName":"a","properties":{"href":"http://graphql.org/graphql-js/type/"},"children":[{"type":"text","value":"official documentation","position":{"start":{"line":27,"column":76,"offset":1408},"end":{"line":27,"column":98,"offset":1430}}}],"position":{"start":{"line":27,"column":75,"offset":1407},"end":{"line":27,"column":136,"offset":1468}}},{"type":"text","value":".","position":{"start":{"line":27,"column":136,"offset":1468},"end":{"line":27,"column":137,"offset":1469}}}],"position":{"start":{"line":27,"column":3,"offset":1335},"end":{"line":27,"column":137,"offset":1469}}},{"type":"text","value":"\n"}],"position":{"start":{"line":27,"column":1,"offset":1333},"end":{"line":27,"column":137,"offset":1469}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"example-the-date-scalar","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#example-the-date-scalar","aria-label":"example the date scalar permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Example: The ","position":{"start":{"line":29,"column":4,"offset":1474},"end":{"line":29,"column":17,"offset":1487}}},{"type":"raw","value":"<code class=\"language-text\">Date</code>","position":{"start":{"line":29,"column":17,"offset":1487},"end":{"line":29,"column":23,"offset":1493}}},{"type":"text","value":" scalar","position":{"start":{"line":29,"column":23,"offset":1493},"end":{"line":29,"column":30,"offset":1500}}}],"position":{"start":{"line":29,"column":1,"offset":1471},"end":{"line":29,"column":30,"offset":1500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following ","position":{"start":{"line":31,"column":1,"offset":1502},"end":{"line":31,"column":15,"offset":1516}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLScalarType</code>","position":{"start":{"line":31,"column":15,"offset":1516},"end":{"line":31,"column":34,"offset":1535}}},{"type":"text","value":" object defines interactions for a custom scalar that represents a date (this is one of the most commonly implemented custom scalars). It assumes that our backend represents a date with the ","position":{"start":{"line":31,"column":34,"offset":1535},"end":{"line":31,"column":224,"offset":1725}}},{"type":"raw","value":"<code class=\"language-text\">Date</code>","position":{"start":{"line":31,"column":224,"offset":1725},"end":{"line":31,"column":230,"offset":1731}}},{"type":"text","value":" JavaScript object.","position":{"start":{"line":31,"column":230,"offset":1731},"end":{"line":31,"column":249,"offset":1750}}}],"position":{"start":{"line":31,"column":1,"offset":1502},"end":{"line":31,"column":249,"offset":1750}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> GraphQLScalarType<span class=\"token punctuation\">,</span> Kind <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dateScalar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLScalarType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Date'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">'Date custom scalar type'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Convert outgoing Date to integer for JSON</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">parseValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Convert incoming integer to Date</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">parseLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> Kind<span class=\"token punctuation\">.</span><span class=\"token constant\">INT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Convert hard-coded AST string to integer and then to Date</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Invalid hard-coded value (not an integer)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":33,"column":1,"offset":1752},"end":{"line":52,"column":4,"offset":2350}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This initialization defines the following methods:","position":{"start":{"line":54,"column":1,"offset":2352},"end":{"line":54,"column":51,"offset":2402}}}],"position":{"start":{"line":54,"column":1,"offset":2352},"end":{"line":54,"column":51,"offset":2402}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">serialize</code>","position":{"start":{"line":56,"column":3,"offset":2406},"end":{"line":56,"column":14,"offset":2417}}}],"position":{"start":{"line":56,"column":1,"offset":2404},"end":{"line":56,"column":14,"offset":2417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">parseValue</code>","position":{"start":{"line":57,"column":3,"offset":2420},"end":{"line":57,"column":15,"offset":2432}}}],"position":{"start":{"line":57,"column":1,"offset":2418},"end":{"line":57,"column":15,"offset":2432}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">parseLiteral</code>","position":{"start":{"line":58,"column":3,"offset":2435},"end":{"line":58,"column":17,"offset":2449}}}],"position":{"start":{"line":58,"column":1,"offset":2433},"end":{"line":58,"column":17,"offset":2449}}},{"type":"text","value":"\n"}],"position":{"start":{"line":56,"column":1,"offset":2404},"end":{"line":58,"column":17,"offset":2449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Together, these methods describe how Apollo Server interacts with the scalar in every scenario.","position":{"start":{"line":60,"column":1,"offset":2451},"end":{"line":60,"column":96,"offset":2546}}}],"position":{"start":{"line":60,"column":1,"offset":2451},"end":{"line":60,"column":96,"offset":2546}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"serialize","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#serialize","aria-label":"serialize permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"raw","value":"<code class=\"language-text\">serialize</code>","position":{"start":{"line":62,"column":5,"offset":2552},"end":{"line":62,"column":16,"offset":2563}}}],"position":{"start":{"line":62,"column":1,"offset":2548},"end":{"line":62,"column":16,"offset":2563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":64,"column":1,"offset":2565},"end":{"line":64,"column":5,"offset":2569}}},{"type":"raw","value":"<code class=\"language-text\">serialize</code>","position":{"start":{"line":64,"column":5,"offset":2569},"end":{"line":64,"column":16,"offset":2580}}},{"type":"text","value":" method converts the scalar's back-end representation to a JSON-compatible format so Apollo Server can include it in an operation response.","position":{"start":{"line":64,"column":16,"offset":2580},"end":{"line":64,"column":155,"offset":2719}}}],"position":{"start":{"line":64,"column":1,"offset":2565},"end":{"line":64,"column":155,"offset":2719}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the example above, the ","position":{"start":{"line":66,"column":1,"offset":2721},"end":{"line":66,"column":27,"offset":2747}}},{"type":"raw","value":"<code class=\"language-text\">Date</code>","position":{"start":{"line":66,"column":27,"offset":2747},"end":{"line":66,"column":33,"offset":2753}}},{"type":"text","value":" scalar is represented on the backend by the ","position":{"start":{"line":66,"column":33,"offset":2753},"end":{"line":66,"column":78,"offset":2798}}},{"type":"raw","value":"<code class=\"language-text\">Date</code>","position":{"start":{"line":66,"column":78,"offset":2798},"end":{"line":66,"column":84,"offset":2804}}},{"type":"text","value":" JavaScript object. When we send a ","position":{"start":{"line":66,"column":84,"offset":2804},"end":{"line":66,"column":119,"offset":2839}}},{"type":"raw","value":"<code class=\"language-text\">Date</code>","position":{"start":{"line":66,"column":119,"offset":2839},"end":{"line":66,"column":125,"offset":2845}}},{"type":"text","value":" scalar in a GraphQL response, we serialize it as the integer value returned by the ","position":{"start":{"line":66,"column":125,"offset":2845},"end":{"line":66,"column":209,"offset":2929}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime"},"children":[{"type":"raw","value":"<code class=\"language-text\">getTime</code>","position":{"start":{"line":66,"column":210,"offset":2930},"end":{"line":66,"column":219,"offset":2939}}},{"type":"text","value":" function","position":{"start":{"line":66,"column":219,"offset":2939},"end":{"line":66,"column":228,"offset":2948}}}],"position":{"start":{"line":66,"column":209,"offset":2929},"end":{"line":66,"column":324,"offset":3044}}},{"type":"text","value":" of a JavaScript ","position":{"start":{"line":66,"column":324,"offset":3044},"end":{"line":66,"column":341,"offset":3061}}},{"type":"raw","value":"<code class=\"language-text\">Date</code>","position":{"start":{"line":66,"column":341,"offset":3061},"end":{"line":66,"column":347,"offset":3067}}},{"type":"text","value":" object.","position":{"start":{"line":66,"column":347,"offset":3067},"end":{"line":66,"column":355,"offset":3075}}}],"position":{"start":{"line":66,"column":1,"offset":2721},"end":{"line":66,"column":355,"offset":3075}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that Apollo Client cannot automatically interpret custom scalars (","position":{"start":{"line":68,"column":3,"offset":3079},"end":{"line":68,"column":74,"offset":3150}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/apollographql/apollo-feature-requests/issues/2"},"children":[{"type":"text","value":"see issue","position":{"start":{"line":68,"column":75,"offset":3151},"end":{"line":68,"column":84,"offset":3160}}}],"position":{"start":{"line":68,"column":74,"offset":3150},"end":{"line":68,"column":152,"offset":3228}}},{"type":"text","value":"), so your client must define custom logic to deserialize this value as needed.","position":{"start":{"line":68,"column":152,"offset":3228},"end":{"line":68,"column":231,"offset":3307}}}],"position":{"start":{"line":68,"column":3,"offset":3079},"end":{"line":68,"column":231,"offset":3307}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":3077},"end":{"line":68,"column":231,"offset":3307}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"parsevalue","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#parsevalue","aria-label":"parsevalue permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"raw","value":"<code class=\"language-text\">parseValue</code>","position":{"start":{"line":70,"column":5,"offset":3313},"end":{"line":70,"column":17,"offset":3325}}}],"position":{"start":{"line":70,"column":1,"offset":3309},"end":{"line":70,"column":17,"offset":3325}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":72,"column":1,"offset":3327},"end":{"line":72,"column":5,"offset":3331}}},{"type":"raw","value":"<code class=\"language-text\">parseValue</code>","position":{"start":{"line":72,"column":5,"offset":3331},"end":{"line":72,"column":17,"offset":3343}}},{"type":"text","value":" method converts the scalar's JSON value to its back-end representation before it's added to a resolver's ","position":{"start":{"line":72,"column":17,"offset":3343},"end":{"line":72,"column":123,"offset":3449}}},{"type":"raw","value":"<code class=\"language-text\">args</code>","position":{"start":{"line":72,"column":123,"offset":3449},"end":{"line":72,"column":129,"offset":3455}}},{"type":"text","value":".","position":{"start":{"line":72,"column":129,"offset":3455},"end":{"line":72,"column":130,"offset":3456}}}],"position":{"start":{"line":72,"column":1,"offset":3327},"end":{"line":72,"column":130,"offset":3456}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Apollo Server calls this method when the scalar is provided by a client as a ","position":{"start":{"line":74,"column":1,"offset":3458},"end":{"line":74,"column":78,"offset":3535}}},{"type":"element","tagName":"a","properties":{"href":"https://graphql.org/learn/queries/#variables"},"children":[{"type":"text","value":"GraphQL variable","position":{"start":{"line":74,"column":79,"offset":3536},"end":{"line":74,"column":95,"offset":3552}}}],"position":{"start":{"line":74,"column":78,"offset":3535},"end":{"line":74,"column":142,"offset":3599}}},{"type":"text","value":" for an argument. (When a scalar is provided as a hard-coded argument in the operation string, ","position":{"start":{"line":74,"column":142,"offset":3599},"end":{"line":74,"column":237,"offset":3694}}},{"type":"element","tagName":"a","properties":{"href":"#parseliteral"},"children":[{"type":"raw","value":"<code class=\"language-text\">parseLiteral</code>","position":{"start":{"line":74,"column":238,"offset":3695},"end":{"line":74,"column":252,"offset":3709}}}],"position":{"start":{"line":74,"column":237,"offset":3694},"end":{"line":74,"column":268,"offset":3725}}},{"type":"text","value":" is called instead.)","position":{"start":{"line":74,"column":268,"offset":3725},"end":{"line":74,"column":288,"offset":3745}}}],"position":{"start":{"line":74,"column":1,"offset":3458},"end":{"line":74,"column":288,"offset":3745}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"parseliteral","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#parseliteral","aria-label":"parseliteral permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"raw","value":"<code class=\"language-text\">parseLiteral</code>","position":{"start":{"line":76,"column":5,"offset":3751},"end":{"line":76,"column":19,"offset":3765}}}],"position":{"start":{"line":76,"column":1,"offset":3747},"end":{"line":76,"column":19,"offset":3765}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When an incoming query string includes the scalar as a hard-coded argument value, that value is part of the query document's abstract syntax tree (AST). Apollo Server calls the ","position":{"start":{"line":78,"column":1,"offset":3767},"end":{"line":78,"column":178,"offset":3944}}},{"type":"raw","value":"<code class=\"language-text\">parseLiteral</code>","position":{"start":{"line":78,"column":178,"offset":3944},"end":{"line":78,"column":192,"offset":3958}}},{"type":"text","value":" method to convert the value's AST representation to the scalar's back-end representation.","position":{"start":{"line":78,"column":192,"offset":3958},"end":{"line":78,"column":282,"offset":4048}}}],"position":{"start":{"line":78,"column":1,"offset":3767},"end":{"line":78,"column":282,"offset":4048}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In ","position":{"start":{"line":80,"column":1,"offset":4050},"end":{"line":80,"column":4,"offset":4053}}},{"type":"element","tagName":"a","properties":{"href":"#example-the-date-scalar"},"children":[{"type":"text","value":"the example above","position":{"start":{"line":80,"column":5,"offset":4054},"end":{"line":80,"column":22,"offset":4071}}}],"position":{"start":{"line":80,"column":4,"offset":4053},"end":{"line":80,"column":49,"offset":4098}}},{"type":"text","value":", ","position":{"start":{"line":80,"column":49,"offset":4098},"end":{"line":80,"column":51,"offset":4100}}},{"type":"raw","value":"<code class=\"language-text\">parseLiteral</code>","position":{"start":{"line":80,"column":51,"offset":4100},"end":{"line":80,"column":65,"offset":4114}}},{"type":"text","value":" converts the AST value from a string to an integer, and ","position":{"start":{"line":80,"column":65,"offset":4114},"end":{"line":80,"column":122,"offset":4171}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"then","position":{"start":{"line":80,"column":123,"offset":4172},"end":{"line":80,"column":127,"offset":4176}}}],"position":{"start":{"line":80,"column":122,"offset":4171},"end":{"line":80,"column":128,"offset":4177}}},{"type":"text","value":" converts from integer to ","position":{"start":{"line":80,"column":128,"offset":4177},"end":{"line":80,"column":154,"offset":4203}}},{"type":"raw","value":"<code class=\"language-text\">Date</code>","position":{"start":{"line":80,"column":154,"offset":4203},"end":{"line":80,"column":160,"offset":4209}}},{"type":"text","value":" to match the result of ","position":{"start":{"line":80,"column":160,"offset":4209},"end":{"line":80,"column":184,"offset":4233}}},{"type":"raw","value":"<code class=\"language-text\">parseValue</code>","position":{"start":{"line":80,"column":184,"offset":4233},"end":{"line":80,"column":196,"offset":4245}}},{"type":"text","value":".","position":{"start":{"line":80,"column":196,"offset":4245},"end":{"line":80,"column":197,"offset":4246}}}],"position":{"start":{"line":80,"column":1,"offset":4050},"end":{"line":80,"column":197,"offset":4246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"providing-custom-scalars-to-apollo-server","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#providing-custom-scalars-to-apollo-server","aria-label":"providing custom scalars to apollo server permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Providing custom scalars to Apollo Server","position":{"start":{"line":82,"column":4,"offset":4251},"end":{"line":82,"column":45,"offset":4292}}}],"position":{"start":{"line":82,"column":1,"offset":4248},"end":{"line":82,"column":45,"offset":4292}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After you define your ","position":{"start":{"line":84,"column":1,"offset":4294},"end":{"line":84,"column":23,"offset":4316}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLScalarType</code>","position":{"start":{"line":84,"column":23,"offset":4316},"end":{"line":84,"column":42,"offset":4335}}},{"type":"text","value":" instance, you include it in the same ","position":{"start":{"line":84,"column":42,"offset":4335},"end":{"line":84,"column":80,"offset":4373}}},{"type":"element","tagName":"a","properties":{"href":"/data/resolvers/#defining-a-resolver"},"children":[{"type":"text","value":"resolver map","position":{"start":{"line":84,"column":81,"offset":4374},"end":{"line":84,"column":93,"offset":4386}}}],"position":{"start":{"line":84,"column":80,"offset":4373},"end":{"line":84,"column":134,"offset":4427}}},{"type":"text","value":" that contains resolvers for your schema's other types and fields:","position":{"start":{"line":84,"column":134,"offset":4427},"end":{"line":84,"column":200,"offset":4493}}}],"position":{"start":{"line":84,"column":1,"offset":4294},"end":{"line":84,"column":200,"offset":4493}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> GraphQLScalarType<span class=\"token punctuation\">,</span> Kind <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">  scalar Date</span>\n<span class=\"token string\"></span>\n<span class=\"token string\">  type Event {</span>\n<span class=\"token string\">    id: ID!</span>\n<span class=\"token string\">    date: Date!</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span>\n<span class=\"token string\">  type Query {</span>\n<span class=\"token string\">    events: [Event!]</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dateScalar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLScalarType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// See definition above</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">Date</span><span class=\"token operator\">:</span> dateScalar</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ...other resolver definitions...</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":86,"column":1,"offset":4495},"end":{"line":116,"column":4,"offset":4970}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"example-restricting-integers-to-odd-values","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#example-restricting-integers-to-odd-values","aria-label":"example restricting integers to odd values permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Example: Restricting integers to odd values","position":{"start":{"line":118,"column":4,"offset":4975},"end":{"line":118,"column":47,"offset":5018}}}],"position":{"start":{"line":118,"column":1,"offset":4972},"end":{"line":118,"column":47,"offset":5018}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this example, we create a custom scalar called ","position":{"start":{"line":120,"column":1,"offset":5020},"end":{"line":120,"column":51,"offset":5070}}},{"type":"raw","value":"<code class=\"language-text\">Odd</code>","position":{"start":{"line":120,"column":51,"offset":5070},"end":{"line":120,"column":56,"offset":5075}}},{"type":"text","value":" that can only contain odd integers:","position":{"start":{"line":120,"column":56,"offset":5075},"end":{"line":120,"column":92,"offset":5111}}}],"position":{"start":{"line":120,"column":1,"offset":5020},"end":{"line":120,"column":92,"offset":5111}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-code-title\">index.js</div>"},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql<span class=\"token punctuation\">,</span> UserInputError <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> GraphQLScalarType<span class=\"token punctuation\">,</span> Kind <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Basic schema</span>\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  scalar Odd\n\n  type Query {\n    # Echoes the provided odd integer\n    echoOdd(odd: Odd!): Odd!\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validation function for checking \"oddness\"</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">oddValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">&amp;&amp;</span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInputError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Provided value is not an odd integer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Odd</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLScalarType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Odd'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">'Odd custom scalar type'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">parseValue</span><span class=\"token operator\">:</span> oddValue<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">serialize</span><span class=\"token operator\">:</span> oddValue<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">parseLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> Kind<span class=\"token punctuation\">.</span><span class=\"token constant\">INT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">oddValue</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInputError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Provided value is not an odd integer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">echoOdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>odd<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> odd<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚀 Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":122,"column":1,"offset":5113},"end":{"line":169,"column":4,"offset":6228}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"importing-a-third-party-custom-scalar","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#importing-a-third-party-custom-scalar","aria-label":"importing a third party custom scalar permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Importing a third-party custom scalar","position":{"start":{"line":171,"column":4,"offset":6233},"end":{"line":171,"column":41,"offset":6270}}}],"position":{"start":{"line":171,"column":1,"offset":6230},"end":{"line":171,"column":41,"offset":6270}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If another library defines a custom scalar, you can import it and use it just like any other symbol.","position":{"start":{"line":173,"column":1,"offset":6272},"end":{"line":173,"column":101,"offset":6372}}}],"position":{"start":{"line":173,"column":1,"offset":6272},"end":{"line":173,"column":101,"offset":6372}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example, the ","position":{"start":{"line":175,"column":1,"offset":6374},"end":{"line":175,"column":18,"offset":6391}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/taion/graphql-type-json"},"children":[{"type":"raw","value":"<code class=\"language-text\">graphql-type-json</code>","position":{"start":{"line":175,"column":19,"offset":6392},"end":{"line":175,"column":38,"offset":6411}}}],"position":{"start":{"line":175,"column":18,"offset":6391},"end":{"line":175,"column":83,"offset":6456}}},{"type":"text","value":" package defines the ","position":{"start":{"line":175,"column":83,"offset":6456},"end":{"line":175,"column":104,"offset":6477}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLJSON</code>","position":{"start":{"line":175,"column":104,"offset":6477},"end":{"line":175,"column":117,"offset":6490}}},{"type":"text","value":" object, which is an instance of ","position":{"start":{"line":175,"column":117,"offset":6490},"end":{"line":175,"column":150,"offset":6523}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLScalarType</code>","position":{"start":{"line":175,"column":150,"offset":6523},"end":{"line":175,"column":169,"offset":6542}}},{"type":"text","value":". You can use this object to define a ","position":{"start":{"line":175,"column":169,"offset":6542},"end":{"line":175,"column":207,"offset":6580}}},{"type":"raw","value":"<code class=\"language-text\">JSON</code>","position":{"start":{"line":175,"column":207,"offset":6580},"end":{"line":175,"column":213,"offset":6586}}},{"type":"text","value":" scalar that accepts any value that is valid JSON.","position":{"start":{"line":175,"column":213,"offset":6586},"end":{"line":175,"column":263,"offset":6636}}}],"position":{"start":{"line":175,"column":1,"offset":6374},"end":{"line":175,"column":263,"offset":6636}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, install the library:","position":{"start":{"line":177,"column":1,"offset":6638},"end":{"line":177,"column":28,"offset":6665}}}],"position":{"start":{"line":177,"column":1,"offset":6638},"end":{"line":177,"column":28,"offset":6665}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> graphql-type-json</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>","position":{"start":{"line":179,"column":1,"offset":6667},"end":{"line":181,"column":4,"offset":6711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then ","position":{"start":{"line":183,"column":1,"offset":6713},"end":{"line":183,"column":6,"offset":6718}}},{"type":"raw","value":"<code class=\"language-text\">require</code>","position":{"start":{"line":183,"column":6,"offset":6718},"end":{"line":183,"column":15,"offset":6727}}},{"type":"text","value":" the ","position":{"start":{"line":183,"column":15,"offset":6727},"end":{"line":183,"column":20,"offset":6732}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLJSON</code>","position":{"start":{"line":183,"column":20,"offset":6732},"end":{"line":183,"column":33,"offset":6745}}},{"type":"text","value":" object and add it to the resolver map as usual:","position":{"start":{"line":183,"column":33,"offset":6745},"end":{"line":183,"column":81,"offset":6793}}}],"position":{"start":{"line":183,"column":1,"offset":6713},"end":{"line":183,"column":81,"offset":6793}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> GraphQLJSON <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql-type-json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  scalar JSON\n\n  type MyObject {\n    myField: JSON\n  }\n\n  type Query {\n    objects: [MyObject]\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">JSON</span><span class=\"token operator\">:</span> GraphQLJSON\n  <span class=\"token comment\">// ...other resolvers...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚀 Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":185,"column":1,"offset":6795},"end":{"line":211,"column":4,"offset":7249}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":212,"column":1,"offset":7250}}}}