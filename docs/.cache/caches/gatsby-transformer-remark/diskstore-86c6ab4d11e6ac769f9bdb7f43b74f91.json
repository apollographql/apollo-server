{"expireTime":9007200901521028000,"key":"transformer-remark-markdown-ast-10bfd4ffd0de8a53983dce620e2d880e-gatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-mermaidgatsby-remark-code-titlesgatsby-remark-prismjsgatsby-remark-rewrite-relative-linksgatsby-remark-check-links-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Testing ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":9,"offset":9}}},{"type":"html","value":"<code class=\"language-text\">apollo-server</code>","position":{"start":{"line":2,"column":9,"offset":9},"end":{"line":2,"column":24,"offset":24}}},{"type":"text","value":" can be done in many ways. One simple way is to use ApolloServer's ","position":{"start":{"line":2,"column":24,"offset":24},"end":{"line":2,"column":91,"offset":91}}},{"type":"html","value":"<code class=\"language-text\">executeOperation</code>","position":{"start":{"line":2,"column":91,"offset":91},"end":{"line":2,"column":109,"offset":109}}},{"type":"text","value":" method to directly execute a GraphQL operation without going through a full HTTP operation.","position":{"start":{"line":2,"column":109,"offset":109},"end":{"line":2,"column":201,"offset":201}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":201,"offset":201}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#executeoperation","title":null,"children":[],"data":{"hProperties":{"aria-label":"executeoperation permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"html","value":"<code class=\"language-text\">executeOperation</code>","position":{"start":{"line":4,"column":4,"offset":206},"end":{"line":4,"column":22,"offset":224}}}],"position":{"start":{"line":4,"column":1,"offset":203},"end":{"line":4,"column":22,"offset":224}},"data":{"id":"executeoperation","htmlAttributes":{"id":"executeoperation"},"hProperties":{"id":"executeoperation","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Integration testing a GraphQL server means testing many things. ","position":{"start":{"line":6,"column":1,"offset":226},"end":{"line":6,"column":65,"offset":290}}},{"type":"html","value":"<code class=\"language-text\">apollo-server</code>","position":{"start":{"line":6,"column":65,"offset":290},"end":{"line":6,"column":80,"offset":305}}},{"type":"text","value":" has a request pipeline that can support many plugins that can affect the way an operation is executed. The ","position":{"start":{"line":6,"column":80,"offset":305},"end":{"line":6,"column":188,"offset":413}}},{"type":"html","value":"<code class=\"language-text\">executeOperation</code>","position":{"start":{"line":6,"column":188,"offset":413},"end":{"line":6,"column":206,"offset":431}}},{"type":"text","value":" method provides a single hook to run operations through the request pipeline, enabling the most thorough tests possible without starting up an HTTP server.","position":{"start":{"line":6,"column":206,"offset":431},"end":{"line":6,"column":362,"offset":587}}}],"position":{"start":{"line":6,"column":1,"offset":226},"end":{"line":6,"column":362,"offset":587}}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">executeOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token constant\">GET_USER</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">variables</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeUndefined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token operator\">?.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ida'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":8,"column":1,"offset":589},"end":{"line":17,"column":4,"offset":824}}},{"type":"paragraph","children":[{"type":"text","value":"For example, you can set up a full server with your schema and resolvers and run an operation against it.","position":{"start":{"line":19,"column":1,"offset":826},"end":{"line":19,"column":106,"offset":931}}}],"position":{"start":{"line":19,"column":1,"offset":826},"end":{"line":19,"column":106,"offset":931}}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetches single launch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> userAPI <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> launchAPI <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LaunchAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// create a test server to test against, using our production typeDefs,</span>\n  <span class=\"token comment\">// resolvers, and dataSources.</span>\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    typeDefs<span class=\"token punctuation\">,</span>\n    resolvers<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">dataSources</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> userAPI<span class=\"token punctuation\">,</span> launchAPI <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">'a@a.a'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// mock the dataSource's underlying fetch methods</span>\n  launchAPI<span class=\"token punctuation\">.</span>get <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>mockLaunchResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  userAPI<span class=\"token punctuation\">.</span>store <span class=\"token operator\">=</span> mockStore<span class=\"token punctuation\">;</span>\n  userAPI<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>trips<span class=\"token punctuation\">.</span>findAll<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValueOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dataValues</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">launchId</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// run query against the server and snapshot the output</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">executeOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token constant\">GET_LAUNCH</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">variables</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":21,"column":1,"offset":933},"end":{"line":47,"column":4,"offset":1799}}},{"type":"paragraph","children":[{"type":"text","value":"This is an example of a full integration test being run against a test instance of ","position":{"start":{"line":49,"column":1,"offset":1801},"end":{"line":49,"column":84,"offset":1884}}},{"type":"html","value":"<code class=\"language-text\">apollo-server</code>","position":{"start":{"line":49,"column":84,"offset":1884},"end":{"line":49,"column":99,"offset":1899}}},{"type":"text","value":". This test imports the important pieces to test (","position":{"start":{"line":49,"column":99,"offset":1899},"end":{"line":49,"column":149,"offset":1949}}},{"type":"html","value":"<code class=\"language-text\">typeDefs</code>","position":{"start":{"line":49,"column":149,"offset":1949},"end":{"line":49,"column":159,"offset":1959}}},{"type":"text","value":", ","position":{"start":{"line":49,"column":159,"offset":1959},"end":{"line":49,"column":161,"offset":1961}}},{"type":"html","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":49,"column":161,"offset":1961},"end":{"line":49,"column":172,"offset":1972}}},{"type":"text","value":", ","position":{"start":{"line":49,"column":172,"offset":1972},"end":{"line":49,"column":174,"offset":1974}}},{"type":"html","value":"<code class=\"language-text\">dataSources</code>","position":{"start":{"line":49,"column":174,"offset":1974},"end":{"line":49,"column":187,"offset":1987}}},{"type":"text","value":") and creates a new instance of ","position":{"start":{"line":49,"column":187,"offset":1987},"end":{"line":49,"column":219,"offset":2019}}},{"type":"html","value":"<code class=\"language-text\">apollo-server</code>","position":{"start":{"line":49,"column":219,"offset":2019},"end":{"line":49,"column":234,"offset":2034}}},{"type":"text","value":".","position":{"start":{"line":49,"column":234,"offset":2034},"end":{"line":49,"column":235,"offset":2035}}}],"position":{"start":{"line":49,"column":1,"offset":1801},"end":{"line":49,"column":235,"offset":2035}}},{"type":"paragraph","children":[{"type":"text","value":"The example above shows writing a test-specific ","position":{"start":{"line":51,"column":1,"offset":2037},"end":{"line":51,"column":49,"offset":2085}}},{"type":"link","title":null,"url":"/v2/data/resolvers/#the-context-argument","children":[{"type":"html","value":"<code class=\"language-text\">context</code>","position":{"start":{"line":51,"column":50,"offset":2086},"end":{"line":51,"column":59,"offset":2095}}},{"type":"text","value":" function","position":{"start":{"line":51,"column":59,"offset":2095},"end":{"line":51,"column":68,"offset":2104}}}],"position":{"start":{"line":51,"column":49,"offset":2085},"end":{"line":51,"column":110,"offset":2146}}},{"type":"text","value":" which provides data directly instead of calculating it from the request context. If you'd like to use your server's real ","position":{"start":{"line":51,"column":110,"offset":2146},"end":{"line":51,"column":232,"offset":2268}}},{"type":"html","value":"<code class=\"language-text\">context</code>","position":{"start":{"line":51,"column":232,"offset":2268},"end":{"line":51,"column":241,"offset":2277}}},{"type":"text","value":" function, you can pass a second argument to ","position":{"start":{"line":51,"column":241,"offset":2277},"end":{"line":51,"column":286,"offset":2322}}},{"type":"html","value":"<code class=\"language-text\">executeOperation</code>","position":{"start":{"line":51,"column":286,"offset":2322},"end":{"line":51,"column":304,"offset":2340}}},{"type":"text","value":" which will be passed to your ","position":{"start":{"line":51,"column":304,"offset":2340},"end":{"line":51,"column":334,"offset":2370}}},{"type":"html","value":"<code class=\"language-text\">context</code>","position":{"start":{"line":51,"column":334,"offset":2370},"end":{"line":51,"column":343,"offset":2379}}},{"type":"text","value":" function as its argument. You will need to put together an object with the ","position":{"start":{"line":51,"column":343,"offset":2379},"end":{"line":51,"column":419,"offset":2455}}},{"type":"link","title":null,"url":"/v2/api/apollo-server/#middleware-specific-context-fields","children":[{"type":"text","value":"middleware-specific context fields","position":{"start":{"line":51,"column":420,"offset":2456},"end":{"line":51,"column":454,"offset":2490}}}],"position":{"start":{"line":51,"column":419,"offset":2455},"end":{"line":51,"column":513,"offset":2549}}},{"type":"text","value":" yourself.","position":{"start":{"line":51,"column":513,"offset":2549},"end":{"line":51,"column":523,"offset":2559}}}],"position":{"start":{"line":51,"column":1,"offset":2037},"end":{"line":51,"column":523,"offset":2559}}},{"type":"paragraph","children":[{"type":"text","value":"You can use ","position":{"start":{"line":53,"column":1,"offset":2561},"end":{"line":53,"column":13,"offset":2573}}},{"type":"html","value":"<code class=\"language-text\">executeOperation</code>","position":{"start":{"line":53,"column":13,"offset":2573},"end":{"line":53,"column":31,"offset":2591}}},{"type":"text","value":" to execute queries and mutations. Because the interface matches the GraphQL HTTP protocol, you specify the operation text under the ","position":{"start":{"line":53,"column":31,"offset":2591},"end":{"line":53,"column":164,"offset":2724}}},{"type":"html","value":"<code class=\"language-text\">query</code>","position":{"start":{"line":53,"column":164,"offset":2724},"end":{"line":53,"column":171,"offset":2731}}},{"type":"text","value":" key even if the operation is a mutation. You can specify ","position":{"start":{"line":53,"column":171,"offset":2731},"end":{"line":53,"column":229,"offset":2789}}},{"type":"html","value":"<code class=\"language-text\">query</code>","position":{"start":{"line":53,"column":229,"offset":2789},"end":{"line":53,"column":236,"offset":2796}}},{"type":"text","value":" either as a string or as a ","position":{"start":{"line":53,"column":236,"offset":2796},"end":{"line":53,"column":264,"offset":2824}}},{"type":"html","value":"<code class=\"language-text\">DocumentNode</code>","position":{"start":{"line":53,"column":264,"offset":2824},"end":{"line":53,"column":278,"offset":2838}}},{"type":"text","value":" (an AST created by the ","position":{"start":{"line":53,"column":278,"offset":2838},"end":{"line":53,"column":302,"offset":2862}}},{"type":"html","value":"<code class=\"language-text\">gql</code>","position":{"start":{"line":53,"column":302,"offset":2862},"end":{"line":53,"column":307,"offset":2867}}},{"type":"text","value":" tag).","position":{"start":{"line":53,"column":307,"offset":2867},"end":{"line":53,"column":313,"offset":2873}}}],"position":{"start":{"line":53,"column":1,"offset":2561},"end":{"line":53,"column":313,"offset":2873}}},{"type":"paragraph","children":[{"type":"text","value":"In addition to ","position":{"start":{"line":55,"column":1,"offset":2875},"end":{"line":55,"column":16,"offset":2890}}},{"type":"html","value":"<code class=\"language-text\">query</code>","position":{"start":{"line":55,"column":16,"offset":2890},"end":{"line":55,"column":23,"offset":2897}}},{"type":"text","value":", the first argument to ","position":{"start":{"line":55,"column":23,"offset":2897},"end":{"line":55,"column":47,"offset":2921}}},{"type":"html","value":"<code class=\"language-text\">executeOperation</code>","position":{"start":{"line":55,"column":47,"offset":2921},"end":{"line":55,"column":65,"offset":2939}}},{"type":"text","value":" can take ","position":{"start":{"line":55,"column":65,"offset":2939},"end":{"line":55,"column":75,"offset":2949}}},{"type":"html","value":"<code class=\"language-text\">operationName</code>","position":{"start":{"line":55,"column":75,"offset":2949},"end":{"line":55,"column":90,"offset":2964}}},{"type":"text","value":", ","position":{"start":{"line":55,"column":90,"offset":2964},"end":{"line":55,"column":92,"offset":2966}}},{"type":"html","value":"<code class=\"language-text\">variables</code>","position":{"start":{"line":55,"column":92,"offset":2966},"end":{"line":55,"column":103,"offset":2977}}},{"type":"text","value":", ","position":{"start":{"line":55,"column":103,"offset":2977},"end":{"line":55,"column":105,"offset":2979}}},{"type":"html","value":"<code class=\"language-text\">extensions</code>","position":{"start":{"line":55,"column":105,"offset":2979},"end":{"line":55,"column":117,"offset":2991}}},{"type":"text","value":", and ","position":{"start":{"line":55,"column":117,"offset":2991},"end":{"line":55,"column":123,"offset":2997}}},{"type":"html","value":"<code class=\"language-text\">http</code>","position":{"start":{"line":55,"column":123,"offset":2997},"end":{"line":55,"column":129,"offset":3003}}},{"type":"text","value":" keys.","position":{"start":{"line":55,"column":129,"offset":3003},"end":{"line":55,"column":135,"offset":3009}}}],"position":{"start":{"line":55,"column":1,"offset":2875},"end":{"line":55,"column":135,"offset":3009}}},{"type":"paragraph","children":[{"type":"text","value":"Note that errors in parsing, validating, and executing your operation are returned in the ","position":{"start":{"line":57,"column":1,"offset":3011},"end":{"line":57,"column":91,"offset":3101}}},{"type":"html","value":"<code class=\"language-text\">errors</code>","position":{"start":{"line":57,"column":91,"offset":3101},"end":{"line":57,"column":99,"offset":3109}}},{"type":"text","value":" field of the result (just like in a GraphQL response) rather than thrown.","position":{"start":{"line":57,"column":99,"offset":3109},"end":{"line":57,"column":173,"offset":3183}}}],"position":{"start":{"line":57,"column":1,"offset":3011},"end":{"line":57,"column":173,"offset":3183}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#createtestclient-and-apollo-server-testing","title":null,"children":[],"data":{"hProperties":{"aria-label":"createtestclient and apollo server testing permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"html","value":"<code class=\"language-text\">createTestClient</code>","position":{"start":{"line":59,"column":4,"offset":3188},"end":{"line":59,"column":22,"offset":3206}}},{"type":"text","value":" and ","position":{"start":{"line":59,"column":22,"offset":3206},"end":{"line":59,"column":27,"offset":3211}}},{"type":"html","value":"<code class=\"language-text\">apollo-server-testing</code>","position":{"start":{"line":59,"column":27,"offset":3211},"end":{"line":59,"column":50,"offset":3234}}}],"position":{"start":{"line":59,"column":1,"offset":3185},"end":{"line":59,"column":50,"offset":3234}},"data":{"id":"createtestclient-and-apollo-server-testing","htmlAttributes":{"id":"createtestclient-and-apollo-server-testing"},"hProperties":{"id":"createtestclient-and-apollo-server-testing","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"There is also a package called ","position":{"start":{"line":61,"column":1,"offset":3236},"end":{"line":61,"column":32,"offset":3267}}},{"type":"html","value":"<code class=\"language-text\">apollo-server-testing</code>","position":{"start":{"line":61,"column":32,"offset":3267},"end":{"line":61,"column":55,"offset":3290}}},{"type":"text","value":" which exports a function ","position":{"start":{"line":61,"column":55,"offset":3290},"end":{"line":61,"column":81,"offset":3316}}},{"type":"html","value":"<code class=\"language-text\">createTestClient</code>","position":{"start":{"line":61,"column":81,"offset":3316},"end":{"line":61,"column":99,"offset":3334}}},{"type":"text","value":" which wraps ","position":{"start":{"line":61,"column":99,"offset":3334},"end":{"line":61,"column":112,"offset":3347}}},{"type":"html","value":"<code class=\"language-text\">executeOperation</code>","position":{"start":{"line":61,"column":112,"offset":3347},"end":{"line":61,"column":130,"offset":3365}}},{"type":"text","value":". This API does not support the second context-function-argument argument, and doesn't provide any real advantages over calling ","position":{"start":{"line":61,"column":130,"offset":3365},"end":{"line":61,"column":258,"offset":3493}}},{"type":"html","value":"<code class=\"language-text\">executeOperation</code>","position":{"start":{"line":61,"column":258,"offset":3493},"end":{"line":61,"column":276,"offset":3511}}},{"type":"text","value":" directly. It is deprecated and will no longer be published with Apollo Server 3.","position":{"start":{"line":61,"column":276,"offset":3511},"end":{"line":61,"column":357,"offset":3592}}}],"position":{"start":{"line":61,"column":1,"offset":3236},"end":{"line":61,"column":357,"offset":3592}}},{"type":"paragraph","children":[{"type":"text","value":"We recommend that you replace this code:","position":{"start":{"line":63,"column":1,"offset":3594},"end":{"line":63,"column":41,"offset":3634}}}],"position":{"start":{"line":63,"column":1,"offset":3594},"end":{"line":63,"column":41,"offset":3634}}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createTestClient <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server-testing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> query<span class=\"token punctuation\">,</span> mutate <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">createTestClient</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token constant\">QUERY</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> <span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mutation</span><span class=\"token operator\">:</span> <span class=\"token constant\">MUTATION</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":65,"column":1,"offset":3636},"end":{"line":72,"column":4,"offset":3831}}},{"type":"paragraph","children":[{"type":"text","value":"with","position":{"start":{"line":74,"column":1,"offset":3833},"end":{"line":74,"column":5,"offset":3837}}}],"position":{"start":{"line":74,"column":1,"offset":3833},"end":{"line":74,"column":5,"offset":3837}}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">await</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">executeOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token constant\">QUERY</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">executeOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token constant\">MUTATION</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>","position":{"start":{"line":76,"column":1,"offset":3839},"end":{"line":79,"column":4,"offset":3949}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#end-to-end-testing","title":null,"children":[],"data":{"hProperties":{"aria-label":"end to end testing permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"End-to-end testing","position":{"start":{"line":81,"column":4,"offset":3954},"end":{"line":81,"column":22,"offset":3972}}}],"position":{"start":{"line":81,"column":1,"offset":3951},"end":{"line":81,"column":22,"offset":3972}},"data":{"id":"end-to-end-testing","htmlAttributes":{"id":"end-to-end-testing"},"hProperties":{"id":"end-to-end-testing","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Instead of bypassing the HTTP layer, you may just want to fully run your server and test it with a real HTTP client.","position":{"start":{"line":83,"column":1,"offset":3974},"end":{"line":83,"column":117,"offset":4090}}}],"position":{"start":{"line":83,"column":1,"offset":3974},"end":{"line":83,"column":117,"offset":4090}}},{"type":"paragraph","children":[{"type":"text","value":"Apollo Server doesn't have any built-in support for this. You can combine any HTTP or GraphQL client such as ","position":{"start":{"line":85,"column":1,"offset":4092},"end":{"line":85,"column":110,"offset":4201}}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/supertest","children":[{"type":"html","value":"<code class=\"language-text\">supertest</code>","position":{"start":{"line":85,"column":111,"offset":4202},"end":{"line":85,"column":122,"offset":4213}}}],"position":{"start":{"line":85,"column":110,"offset":4201},"end":{"line":85,"column":164,"offset":4255}}},{"type":"text","value":" or ","position":{"start":{"line":85,"column":164,"offset":4255},"end":{"line":85,"column":168,"offset":4259}}},{"type":"link","title":null,"url":"https://www.apollographql.com/docs/react/api/link/apollo-link-http/","children":[{"type":"text","value":"Apollo Client's HTTP Link","position":{"start":{"line":85,"column":169,"offset":4260},"end":{"line":85,"column":194,"offset":4285}}}],"position":{"start":{"line":85,"column":168,"offset":4259},"end":{"line":85,"column":264,"offset":4355}}},{"type":"text","value":" to run operations against your server. There are also community packages available such as ","position":{"start":{"line":85,"column":264,"offset":4355},"end":{"line":85,"column":356,"offset":4447}}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/apollo-server-integration-testing","children":[{"type":"html","value":"<code class=\"language-text\">apollo-server-integration-testing</code>","position":{"start":{"line":85,"column":357,"offset":4448},"end":{"line":85,"column":392,"offset":4483}}}],"position":{"start":{"line":85,"column":356,"offset":4447},"end":{"line":85,"column":458,"offset":4549}}},{"type":"text","value":" which provides an API similar to the deprecated ","position":{"start":{"line":85,"column":458,"offset":4549},"end":{"line":85,"column":507,"offset":4598}}},{"type":"html","value":"<code class=\"language-text\">apollo-server-testing</code>","position":{"start":{"line":85,"column":507,"offset":4598},"end":{"line":85,"column":530,"offset":4621}}},{"type":"text","value":" package which uses mocked Express request and response objects.","position":{"start":{"line":85,"column":530,"offset":4621},"end":{"line":85,"column":594,"offset":4685}}}],"position":{"start":{"line":85,"column":1,"offset":4092},"end":{"line":85,"column":594,"offset":4685}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":86,"column":1,"offset":4686}}}}