{"expireTime":9007200901521028000,"key":"transformer-remark-markdown-html-ast-75bbbd7254a711debf492f3f99f964d1-gatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-mermaidgatsby-remark-code-titlesgatsby-remark-prismjsgatsby-remark-rewrite-relative-linksgatsby-remark-check-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The strongly-typed nature of a GraphQL API lends itself extremely well to mocking. This is an important part of a GraphQL-First development process, because it enables frontend developers to build out UI components and features without having to wait for a backend implementation.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":281,"offset":281}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":281,"offset":281}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Even when the UI is already built, it can let you test your UI without waiting on slow database requests, or build out a component harness using a tool like ","position":{"start":{"line":4,"column":1,"offset":283},"end":{"line":4,"column":158,"offset":440}}},{"type":"element","tagName":"a","properties":{"href":"https://storybook.js.org/"},"children":[{"type":"text","value":"Storybook","position":{"start":{"line":4,"column":159,"offset":441},"end":{"line":4,"column":168,"offset":450}}}],"position":{"start":{"line":4,"column":158,"offset":440},"end":{"line":4,"column":196,"offset":478}}},{"type":"text","value":" without needing to start a real GraphQL server.","position":{"start":{"line":4,"column":196,"offset":478},"end":{"line":4,"column":244,"offset":526}}}],"position":{"start":{"line":4,"column":1,"offset":283},"end":{"line":4,"column":244,"offset":526}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"default-mock-example","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#default-mock-example","aria-label":"default mock example permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Default mock example","position":{"start":{"line":6,"column":4,"offset":531},"end":{"line":6,"column":24,"offset":551}}}],"position":{"start":{"line":6,"column":1,"offset":528},"end":{"line":6,"column":24,"offset":551}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This example demonstrates mocking a GraphQL schema with just one line of code, using ","position":{"start":{"line":8,"column":1,"offset":553},"end":{"line":8,"column":86,"offset":638}}},{"type":"raw","value":"<code class=\"language-text\">apollo-server</code>","position":{"start":{"line":8,"column":86,"offset":638},"end":{"line":8,"column":101,"offset":653}}},{"type":"text","value":"'s default mocking logic.","position":{"start":{"line":8,"column":101,"offset":653},"end":{"line":8,"column":126,"offset":678}}}],"position":{"start":{"line":8,"column":1,"offset":553},"end":{"line":8,"column":126,"offset":678}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    hello: String\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mocks</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":10,"column":1,"offset":680},"end":{"line":27,"column":4,"offset":958}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: If ","position":{"start":{"line":29,"column":3,"offset":962},"end":{"line":29,"column":12,"offset":971}}},{"type":"raw","value":"<code class=\"language-text\">typeDefs</code>","position":{"start":{"line":29,"column":12,"offset":971},"end":{"line":29,"column":22,"offset":981}}},{"type":"text","value":" has custom scalar types, ","position":{"start":{"line":29,"column":22,"offset":981},"end":{"line":29,"column":48,"offset":1007}}},{"type":"raw","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":29,"column":48,"offset":1007},"end":{"line":29,"column":59,"offset":1018}}},{"type":"text","value":" must still contain the ","position":{"start":{"line":29,"column":59,"offset":1018},"end":{"line":29,"column":83,"offset":1042}}},{"type":"raw","value":"<code class=\"language-text\">serialize</code>","position":{"start":{"line":29,"column":83,"offset":1042},"end":{"line":29,"column":94,"offset":1053}}},{"type":"text","value":", ","position":{"start":{"line":29,"column":94,"offset":1053},"end":{"line":29,"column":96,"offset":1055}}},{"type":"raw","value":"<code class=\"language-text\">parseValue</code>","position":{"start":{"line":29,"column":96,"offset":1055},"end":{"line":29,"column":108,"offset":1067}}},{"type":"text","value":", and ","position":{"start":{"line":29,"column":108,"offset":1067},"end":{"line":29,"column":114,"offset":1073}}},{"type":"raw","value":"<code class=\"language-text\">parseLiteral</code>","position":{"start":{"line":29,"column":114,"offset":1073},"end":{"line":29,"column":128,"offset":1087}}},{"type":"text","value":" functions","position":{"start":{"line":29,"column":128,"offset":1087},"end":{"line":29,"column":138,"offset":1097}}}],"position":{"start":{"line":29,"column":3,"offset":962},"end":{"line":29,"column":138,"offset":1097}}},{"type":"text","value":"\n"}],"position":{"start":{"line":29,"column":1,"offset":960},"end":{"line":29,"column":138,"offset":1097}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mocking logic simply looks at the type definitions and returns a string where a string is expected, a number for a number, etc. This provides the right shape of result. By default, when using mocks, any existing resolvers are ignored. See the ","position":{"start":{"line":31,"column":1,"offset":1099},"end":{"line":31,"column":244,"offset":1342}}},{"type":"element","tagName":"a","properties":{"href":"#using-existing-resolvers-with-mocks"},"children":[{"type":"text","value":"\"Using existing resolvers with mocks\"","position":{"start":{"line":31,"column":245,"offset":1343},"end":{"line":31,"column":282,"offset":1380}}}],"position":{"start":{"line":31,"column":244,"offset":1342},"end":{"line":31,"column":321,"offset":1419}}},{"type":"text","value":" section below for more info on how to change this behavior.","position":{"start":{"line":31,"column":321,"offset":1419},"end":{"line":31,"column":381,"offset":1479}}}],"position":{"start":{"line":31,"column":1,"offset":1099},"end":{"line":31,"column":381,"offset":1479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For more sophisticated testing, mocks can be customized to a particular data model.","position":{"start":{"line":33,"column":1,"offset":1481},"end":{"line":33,"column":84,"offset":1564}}}],"position":{"start":{"line":33,"column":1,"offset":1481},"end":{"line":33,"column":84,"offset":1564}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"customizing-mocks","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#customizing-mocks","aria-label":"customizing mocks permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Customizing mocks","position":{"start":{"line":35,"column":4,"offset":1569},"end":{"line":35,"column":21,"offset":1586}}}],"position":{"start":{"line":35,"column":1,"offset":1566},"end":{"line":35,"column":21,"offset":1586}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In addition to a boolean, ","position":{"start":{"line":37,"column":1,"offset":1588},"end":{"line":37,"column":27,"offset":1614}}},{"type":"raw","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":37,"column":27,"offset":1614},"end":{"line":37,"column":34,"offset":1621}}},{"type":"text","value":" can be an object that describes custom mocking logic, which is structured similarly to ","position":{"start":{"line":37,"column":34,"offset":1621},"end":{"line":37,"column":122,"offset":1709}}},{"type":"raw","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":37,"column":122,"offset":1709},"end":{"line":37,"column":133,"offset":1720}}},{"type":"text","value":" with a few extra features aimed at mocking. Namely ","position":{"start":{"line":37,"column":133,"offset":1720},"end":{"line":37,"column":185,"offset":1772}}},{"type":"raw","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":37,"column":185,"offset":1772},"end":{"line":37,"column":192,"offset":1779}}},{"type":"text","value":" accepts functions for specific types in the schema that are called when that type is expected. By default, the functions in ","position":{"start":{"line":37,"column":192,"offset":1779},"end":{"line":37,"column":317,"offset":1904}}},{"type":"raw","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":37,"column":317,"offset":1904},"end":{"line":37,"column":324,"offset":1911}}},{"type":"text","value":" will overwrite the resolvers in ","position":{"start":{"line":37,"column":324,"offset":1911},"end":{"line":37,"column":357,"offset":1944}}},{"type":"raw","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":37,"column":357,"offset":1944},"end":{"line":37,"column":368,"offset":1955}}},{"type":"text","value":". In this example ","position":{"start":{"line":37,"column":368,"offset":1955},"end":{"line":37,"column":386,"offset":1973}}},{"type":"raw","value":"<code class=\"language-text\">hello</code>","position":{"start":{"line":37,"column":386,"offset":1973},"end":{"line":37,"column":393,"offset":1980}}},{"type":"text","value":" and ","position":{"start":{"line":37,"column":393,"offset":1980},"end":{"line":37,"column":398,"offset":1985}}},{"type":"raw","value":"<code class=\"language-text\">resolved</code>","position":{"start":{"line":37,"column":398,"offset":1985},"end":{"line":37,"column":408,"offset":1995}}},{"type":"text","value":" will both return ","position":{"start":{"line":37,"column":408,"offset":1995},"end":{"line":37,"column":426,"offset":2013}}},{"type":"raw","value":"<code class=\"language-text\">'Hello'</code>","position":{"start":{"line":37,"column":426,"offset":2013},"end":{"line":37,"column":435,"offset":2022}}},{"type":"text","value":".","position":{"start":{"line":37,"column":435,"offset":2022},"end":{"line":37,"column":436,"offset":2023}}}],"position":{"start":{"line":37,"column":1,"offset":1588},"end":{"line":37,"column":436,"offset":2023}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">  type Query {</span>\n<span class=\"token string\">    hello: String</span>\n<span class=\"token string\">    resolved: String</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">resolved</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Resolved'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">Int</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">Float</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">22.1</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">String</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n  mocks<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":39,"column":1,"offset":2025},"end":{"line":70,"column":4,"offset":2492}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Similarly to ","position":{"start":{"line":72,"column":1,"offset":2494},"end":{"line":72,"column":14,"offset":2507}}},{"type":"raw","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":72,"column":14,"offset":2507},"end":{"line":72,"column":25,"offset":2518}}},{"type":"text","value":", ","position":{"start":{"line":72,"column":25,"offset":2518},"end":{"line":72,"column":27,"offset":2520}}},{"type":"raw","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":72,"column":27,"offset":2520},"end":{"line":72,"column":34,"offset":2527}}},{"type":"text","value":" allows the description of object types with the fields. Take note that the value corresponding to ","position":{"start":{"line":72,"column":34,"offset":2527},"end":{"line":72,"column":133,"offset":2626}}},{"type":"raw","value":"<code class=\"language-text\">Person</code>","position":{"start":{"line":72,"column":133,"offset":2626},"end":{"line":72,"column":141,"offset":2634}}},{"type":"text","value":" is a function that returns an object that contains fields pointing at more functions:","position":{"start":{"line":72,"column":141,"offset":2634},"end":{"line":72,"column":227,"offset":2720}}}],"position":{"start":{"line":72,"column":1,"offset":2494},"end":{"line":72,"column":227,"offset":2720}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Person</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> casual<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> casual<span class=\"token punctuation\">.</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":74,"column":1,"offset":2722},"end":{"line":81,"column":4,"offset":2837}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The previous example uses ","position":{"start":{"line":83,"column":1,"offset":2839},"end":{"line":83,"column":27,"offset":2865}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/boo1ean/casual"},"children":[{"type":"text","value":"casual","position":{"start":{"line":83,"column":28,"offset":2866},"end":{"line":83,"column":34,"offset":2872}}}],"position":{"start":{"line":83,"column":27,"offset":2865},"end":{"line":83,"column":70,"offset":2908}}},{"type":"text","value":", a fake data generator for JavaScript, which returns a different result every time the field is called. In other scenarios, such as testing, a collection of fake objects or a generator that always uses a consistent seed are often necessary to provide consistent data.","position":{"start":{"line":83,"column":70,"offset":2908},"end":{"line":83,"column":338,"offset":3176}}}],"position":{"start":{"line":83,"column":1,"offset":2839},"end":{"line":83,"column":338,"offset":3176}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"using-mocklist-in-resolvers","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#using-mocklist-in-resolvers","aria-label":"using mocklist in resolvers permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Using ","position":{"start":{"line":85,"column":5,"offset":3182},"end":{"line":85,"column":11,"offset":3188}}},{"type":"raw","value":"<code class=\"language-text\">MockList</code>","position":{"start":{"line":85,"column":11,"offset":3188},"end":{"line":85,"column":21,"offset":3198}}},{"type":"text","value":" in resolvers","position":{"start":{"line":85,"column":21,"offset":3198},"end":{"line":85,"column":34,"offset":3211}}}],"position":{"start":{"line":85,"column":1,"offset":3178},"end":{"line":85,"column":34,"offset":3211}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To automate mocking a list, return an instance of ","position":{"start":{"line":87,"column":1,"offset":3213},"end":{"line":87,"column":51,"offset":3263}}},{"type":"raw","value":"<code class=\"language-text\">MockList</code>","position":{"start":{"line":87,"column":51,"offset":3263},"end":{"line":87,"column":61,"offset":3273}}},{"type":"text","value":":","position":{"start":{"line":87,"column":61,"offset":3273},"end":{"line":87,"column":62,"offset":3274}}}],"position":{"start":{"line":87,"column":1,"offset":3213},"end":{"line":87,"column":62,"offset":3274}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> MockList <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Person</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// a list of length between 2 and 6 (inclusive)</span>\n    <span class=\"token function-variable function\">friends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// a list of three lists each with two items: [[1, 1], [2, 2], [3, 3]]</span>\n    <span class=\"token function-variable function\">listOfLists</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockList</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockList</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":89,"column":1,"offset":3276},"end":{"line":100,"column":4,"offset":3607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In more complex schemas, ","position":{"start":{"line":102,"column":1,"offset":3609},"end":{"line":102,"column":26,"offset":3634}}},{"type":"raw","value":"<code class=\"language-text\">MockList</code>","position":{"start":{"line":102,"column":26,"offset":3634},"end":{"line":102,"column":36,"offset":3644}}},{"type":"text","value":" is helpful for randomizing the number of entries returned in lists.","position":{"start":{"line":102,"column":36,"offset":3644},"end":{"line":102,"column":104,"offset":3712}}}],"position":{"start":{"line":102,"column":1,"offset":3609},"end":{"line":102,"column":104,"offset":3712}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example, this schema:","position":{"start":{"line":104,"column":1,"offset":3714},"end":{"line":104,"column":26,"offset":3739}}}],"position":{"start":{"line":104,"column":1,"offset":3714},"end":{"line":104,"column":26,"offset":3739}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">people</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">age</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":106,"column":1,"offset":3741},"end":{"line":115,"column":4,"offset":3832}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By default, the ","position":{"start":{"line":117,"column":1,"offset":3834},"end":{"line":117,"column":17,"offset":3850}}},{"type":"raw","value":"<code class=\"language-text\">people</code>","position":{"start":{"line":117,"column":17,"offset":3850},"end":{"line":117,"column":25,"offset":3858}}},{"type":"text","value":" field will always return 2 entries. To change this, we can add a mock resolver that returns ","position":{"start":{"line":117,"column":25,"offset":3858},"end":{"line":117,"column":118,"offset":3951}}},{"type":"raw","value":"<code class=\"language-text\">MockList</code>","position":{"start":{"line":117,"column":118,"offset":3951},"end":{"line":117,"column":128,"offset":3961}}},{"type":"text","value":":","position":{"start":{"line":117,"column":128,"offset":3961},"end":{"line":117,"column":129,"offset":3962}}}],"position":{"start":{"line":117,"column":1,"offset":3834},"end":{"line":117,"column":129,"offset":3962}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">people</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":119,"column":1,"offset":3964},"end":{"line":125,"column":4,"offset":4056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now the mock data will contain between zero and 12 summary entries.","position":{"start":{"line":127,"column":1,"offset":4058},"end":{"line":127,"column":68,"offset":4125}}}],"position":{"start":{"line":127,"column":1,"offset":4058},"end":{"line":127,"column":68,"offset":4125}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"accessing-arguments-in-mock-resolvers","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#accessing-arguments-in-mock-resolvers","aria-label":"accessing arguments in mock resolvers permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Accessing arguments in mock resolvers","position":{"start":{"line":129,"column":5,"offset":4131},"end":{"line":129,"column":42,"offset":4168}}}],"position":{"start":{"line":129,"column":1,"offset":4127},"end":{"line":129,"column":42,"offset":4168}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The mock functions on fields are actually just GraphQL resolvers, which can use arguments and ","position":{"start":{"line":131,"column":1,"offset":4170},"end":{"line":131,"column":95,"offset":4264}}},{"type":"raw","value":"<code class=\"language-text\">context</code>","position":{"start":{"line":131,"column":95,"offset":4264},"end":{"line":131,"column":104,"offset":4273}}},{"type":"text","value":":","position":{"start":{"line":131,"column":104,"offset":4273},"end":{"line":131,"column":105,"offset":4274}}}],"position":{"start":{"line":131,"column":1,"offset":4170},"end":{"line":131,"column":105,"offset":4274}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Person</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the number of friends in the list now depends on numPages</span>\n    <span class=\"token function-variable function\">paginatedFriends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockList</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>numPages <span class=\"token operator\">*</span> <span class=\"token constant\">PAGE_SIZE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":133,"column":1,"offset":4276},"end":{"line":140,"column":4,"offset":4490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For some more background and flavor on this approach, read the ","position":{"start":{"line":142,"column":1,"offset":4492},"end":{"line":142,"column":64,"offset":4555}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/apollo-stack/mocking-your-server-with-just-one-line-of-code-692feda6e9cd"},"children":[{"type":"text","value":"\"Mocking your server with one line of code\"","position":{"start":{"line":142,"column":65,"offset":4556},"end":{"line":142,"column":108,"offset":4599}}}],"position":{"start":{"line":142,"column":64,"offset":4555},"end":{"line":142,"column":202,"offset":4693}}},{"type":"text","value":" article on the Apollo blog.","position":{"start":{"line":142,"column":202,"offset":4693},"end":{"line":142,"column":230,"offset":4721}}}],"position":{"start":{"line":142,"column":1,"offset":4492},"end":{"line":142,"column":230,"offset":4721}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"using-existing-resolvers-with-mocks","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#using-existing-resolvers-with-mocks","aria-label":"using existing resolvers with mocks permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Using existing resolvers with mocks","position":{"start":{"line":144,"column":5,"offset":4727},"end":{"line":144,"column":40,"offset":4762}}}],"position":{"start":{"line":144,"column":1,"offset":4723},"end":{"line":144,"column":40,"offset":4762}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The default behavior for mocks is to overwrite the resolvers already present in the schema. To keep the existing resolvers, set the ","position":{"start":{"line":146,"column":1,"offset":4764},"end":{"line":146,"column":133,"offset":4896}}},{"type":"raw","value":"<code class=\"language-text\">mockEntireSchema</code>","position":{"start":{"line":146,"column":133,"offset":4896},"end":{"line":146,"column":151,"offset":4914}}},{"type":"text","value":" option to false.","position":{"start":{"line":146,"column":151,"offset":4914},"end":{"line":146,"column":168,"offset":4931}}}],"position":{"start":{"line":146,"column":1,"offset":4764},"end":{"line":146,"column":168,"offset":4931}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: mocking resolvers will not work if the ","position":{"start":{"line":148,"column":3,"offset":4935},"end":{"line":148,"column":48,"offset":4980}}},{"type":"raw","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":148,"column":48,"offset":4980},"end":{"line":148,"column":55,"offset":4987}}},{"type":"text","value":" option is ","position":{"start":{"line":148,"column":55,"offset":4987},"end":{"line":148,"column":66,"offset":4998}}},{"type":"raw","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":148,"column":66,"offset":4998},"end":{"line":148,"column":73,"offset":5005}}},{"type":"text","value":", even if ","position":{"start":{"line":148,"column":73,"offset":5005},"end":{"line":148,"column":83,"offset":5015}}},{"type":"raw","value":"<code class=\"language-text\">mockEntireSchema</code>","position":{"start":{"line":148,"column":83,"offset":5015},"end":{"line":148,"column":101,"offset":5033}}},{"type":"text","value":" is true.","position":{"start":{"line":148,"column":101,"offset":5033},"end":{"line":148,"column":110,"offset":5042}}}],"position":{"start":{"line":148,"column":3,"offset":4935},"end":{"line":148,"column":110,"offset":5042}}},{"type":"text","value":"\n"}],"position":{"start":{"line":148,"column":1,"offset":4933},"end":{"line":148,"column":110,"offset":5042}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">  type Query {</span>\n<span class=\"token string\">    hello: String</span>\n<span class=\"token string\">    resolved: String</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">resolved</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Resolved'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Int</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">Float</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">22.1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">String</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n  mocks<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">mockEntireSchema</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":150,"column":1,"offset":5044},"end":{"line":182,"column":4,"offset":5549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"mocking-a-schema-using-introspection","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#mocking-a-schema-using-introspection","aria-label":"mocking a schema using introspection permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Mocking a schema using introspection","position":{"start":{"line":184,"column":4,"offset":5554},"end":{"line":184,"column":40,"offset":5590}}}],"position":{"start":{"line":184,"column":1,"offset":5551},"end":{"line":184,"column":40,"offset":5590}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The GraphQL specification allows clients to introspect the schema with a ","position":{"start":{"line":186,"column":1,"offset":5592},"end":{"line":186,"column":74,"offset":5665}}},{"type":"element","tagName":"a","properties":{"href":"https://facebook.github.io/graphql/#sec-Introspection"},"children":[{"type":"text","value":"special set of types and fields","position":{"start":{"line":186,"column":75,"offset":5666},"end":{"line":186,"column":106,"offset":5697}}}],"position":{"start":{"line":186,"column":74,"offset":5665},"end":{"line":186,"column":162,"offset":5753}}},{"type":"text","value":" that every schema must include. The results of a ","position":{"start":{"line":186,"column":162,"offset":5753},"end":{"line":186,"column":212,"offset":5803}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/graphql/graphql-js/blob/master/src/utilities/getIntrospectionQuery.js"},"children":[{"type":"text","value":"standard introspection query","position":{"start":{"line":186,"column":213,"offset":5804},"end":{"line":186,"column":241,"offset":5832}}}],"position":{"start":{"line":186,"column":212,"offset":5803},"end":{"line":186,"column":332,"offset":5923}}},{"type":"text","value":" can be used to generate an instance of GraphQLSchema which can be mocked as explained above.","position":{"start":{"line":186,"column":332,"offset":5923},"end":{"line":186,"column":425,"offset":6016}}}],"position":{"start":{"line":186,"column":1,"offset":5592},"end":{"line":186,"column":425,"offset":6016}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This helps when you need to mock a schema defined in a language other than JS, for example Go, Ruby, or Python.","position":{"start":{"line":188,"column":1,"offset":6018},"end":{"line":188,"column":112,"offset":6129}}}],"position":{"start":{"line":188,"column":1,"offset":6018},"end":{"line":188,"column":112,"offset":6129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To convert an ","position":{"start":{"line":190,"column":1,"offset":6131},"end":{"line":190,"column":15,"offset":6145}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/graphql/graphql-js/blob/master/src/utilities/getIntrospectionQuery.js"},"children":[{"type":"text","value":"introspection query","position":{"start":{"line":190,"column":16,"offset":6146},"end":{"line":190,"column":35,"offset":6165}}}],"position":{"start":{"line":190,"column":15,"offset":6145},"end":{"line":190,"column":126,"offset":6256}}},{"type":"text","value":" result to a ","position":{"start":{"line":190,"column":126,"offset":6256},"end":{"line":190,"column":139,"offset":6269}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLSchema</code>","position":{"start":{"line":190,"column":139,"offset":6269},"end":{"line":190,"column":154,"offset":6284}}},{"type":"text","value":" object, you can use the ","position":{"start":{"line":190,"column":154,"offset":6284},"end":{"line":190,"column":179,"offset":6309}}},{"type":"raw","value":"<code class=\"language-text\">buildClientSchema</code>","position":{"start":{"line":190,"column":179,"offset":6309},"end":{"line":190,"column":198,"offset":6328}}},{"type":"text","value":" utility from the ","position":{"start":{"line":190,"column":198,"offset":6328},"end":{"line":190,"column":216,"offset":6346}}},{"type":"raw","value":"<code class=\"language-text\">graphql</code>","position":{"start":{"line":190,"column":216,"offset":6346},"end":{"line":190,"column":225,"offset":6355}}},{"type":"text","value":" package.","position":{"start":{"line":190,"column":225,"offset":6355},"end":{"line":190,"column":234,"offset":6364}}}],"position":{"start":{"line":190,"column":1,"offset":6131},"end":{"line":190,"column":234,"offset":6364}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> buildClientSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> introspectionResult <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'schema.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">buildClientSchema</span><span class=\"token punctuation\">(</span>introspectionResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schema<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mocks</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":192,"column":1,"offset":6366},"end":{"line":207,"column":4,"offset":6737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"api","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#api","aria-label":"api permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"API","position":{"start":{"line":209,"column":4,"offset":6742},"end":{"line":209,"column":7,"offset":6745}}}],"position":{"start":{"line":209,"column":1,"offset":6739},"end":{"line":209,"column":7,"offset":6745}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Under the hood, Apollo Server uses a library for building GraphQL servers called ","position":{"start":{"line":211,"column":1,"offset":6747},"end":{"line":211,"column":82,"offset":6828}}},{"type":"raw","value":"<code class=\"language-text\">graphql-tools</code>","position":{"start":{"line":211,"column":82,"offset":6828},"end":{"line":211,"column":97,"offset":6843}}},{"type":"text","value":". The mocking functionality is provided by the function ","position":{"start":{"line":211,"column":97,"offset":6843},"end":{"line":211,"column":153,"offset":6899}}},{"type":"element","tagName":"a","properties":{"href":"/v2/api/graphql-tools/#addmockfunctionstoschemaoptions"},"children":[{"type":"raw","value":"<code class=\"language-text\">addMockFunctionsToSchema</code>","position":{"start":{"line":211,"column":154,"offset":6900},"end":{"line":211,"column":180,"offset":6926}}}],"position":{"start":{"line":211,"column":153,"offset":6899},"end":{"line":211,"column":235,"offset":6981}}},{"type":"text","value":". The ","position":{"start":{"line":211,"column":235,"offset":6981},"end":{"line":211,"column":241,"offset":6987}}},{"type":"raw","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":211,"column":241,"offset":6987},"end":{"line":211,"column":248,"offset":6994}}},{"type":"text","value":" object is passed directly to the function, and ","position":{"start":{"line":211,"column":248,"offset":6994},"end":{"line":211,"column":296,"offset":7042}}},{"type":"raw","value":"<code class=\"language-text\">preserveResolvers</code>","position":{"start":{"line":211,"column":296,"offset":7042},"end":{"line":211,"column":315,"offset":7061}}},{"type":"text","value":" is the inverse of ","position":{"start":{"line":211,"column":315,"offset":7061},"end":{"line":211,"column":334,"offset":7080}}},{"type":"raw","value":"<code class=\"language-text\">mockEntireSchema</code>","position":{"start":{"line":211,"column":334,"offset":7080},"end":{"line":211,"column":352,"offset":7098}}},{"type":"text","value":". ","position":{"start":{"line":211,"column":352,"offset":7098},"end":{"line":211,"column":354,"offset":7100}}},{"type":"element","tagName":"a","properties":{"href":"/v2/api/graphql-tools/#mocklistlist-mockfunction"},"children":[{"type":"raw","value":"<code class=\"language-text\">MockList</code>","position":{"start":{"line":211,"column":355,"offset":7101},"end":{"line":211,"column":365,"offset":7111}}}],"position":{"start":{"line":211,"column":354,"offset":7100},"end":{"line":211,"column":415,"offset":7161}}},{"type":"text","value":" is exported directly from the ","position":{"start":{"line":211,"column":415,"offset":7161},"end":{"line":211,"column":446,"offset":7192}}},{"type":"raw","value":"<code class=\"language-text\">graphql-tools</code>","position":{"start":{"line":211,"column":446,"offset":7192},"end":{"line":211,"column":461,"offset":7207}}},{"type":"text","value":" library.","position":{"start":{"line":211,"column":461,"offset":7207},"end":{"line":211,"column":470,"offset":7216}}}],"position":{"start":{"line":211,"column":1,"offset":6747},"end":{"line":211,"column":470,"offset":7216}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":212,"column":1,"offset":7217}}}}