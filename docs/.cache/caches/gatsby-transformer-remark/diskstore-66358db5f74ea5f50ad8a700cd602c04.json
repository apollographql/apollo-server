{"expireTime":9007200901521022000,"key":"transformer-remark-markdown-html-ast-ced7572a597458420a15a01dffd85846-gatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-mermaidgatsby-remark-code-titlesgatsby-remark-prismjsgatsby-remark-rewrite-relative-linksgatsby-remark-check-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":5,"offset":5}}},{"type":"raw","value":"<code class=\"language-text\">graphql-tools</code>","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":20,"offset":20}}},{"type":"text","value":" library enables the creation and manipulation of GraphQL schema. Apollo Server is able to accept a ","position":{"start":{"line":2,"column":20,"offset":20},"end":{"line":2,"column":120,"offset":120}}},{"type":"raw","value":"<code class=\"language-text\">schema</code>","position":{"start":{"line":2,"column":120,"offset":120},"end":{"line":2,"column":128,"offset":128}}},{"type":"text","value":" that has been enabled by ","position":{"start":{"line":2,"column":128,"offset":128},"end":{"line":2,"column":154,"offset":154}}},{"type":"raw","value":"<code class=\"language-text\">graphql-tools</code>","position":{"start":{"line":2,"column":154,"offset":154},"end":{"line":2,"column":169,"offset":169}}},{"type":"text","value":". Apollo server directly exports all the function from ","position":{"start":{"line":2,"column":169,"offset":169},"end":{"line":2,"column":224,"offset":224}}},{"type":"raw","value":"<code class=\"language-text\">graphql-tools</code>","position":{"start":{"line":2,"column":224,"offset":224},"end":{"line":2,"column":239,"offset":239}}},{"type":"text","value":", enabling a migration path for more complicated use cases.","position":{"start":{"line":2,"column":239,"offset":239},"end":{"line":2,"column":298,"offset":298}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":298,"offset":298}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Apollo Server includes ","position":{"start":{"line":4,"column":3,"offset":302},"end":{"line":4,"column":26,"offset":325}}},{"type":"raw","value":"<code class=\"language-text\">graphql-tools</code>","position":{"start":{"line":4,"column":26,"offset":325},"end":{"line":4,"column":41,"offset":340}}},{"type":"text","value":" version 4. To use another version of the library, see ","position":{"start":{"line":4,"column":41,"offset":340},"end":{"line":4,"column":96,"offset":395}}},{"type":"element","tagName":"a","properties":{"href":"/v2/installing-graphql-tools/"},"children":[{"type":"text","value":"Using a different version of graphql-tools","position":{"start":{"line":4,"column":97,"offset":396},"end":{"line":4,"column":139,"offset":438}}}],"position":{"start":{"line":4,"column":96,"offset":395},"end":{"line":4,"column":170,"offset":469}}},{"type":"text","value":".","position":{"start":{"line":4,"column":170,"offset":469},"end":{"line":4,"column":171,"offset":470}}}],"position":{"start":{"line":4,"column":3,"offset":302},"end":{"line":4,"column":171,"offset":470}}},{"type":"text","value":"\n"}],"position":{"start":{"line":4,"column":1,"offset":300},"end":{"line":4,"column":171,"offset":470}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> makeExecutableSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    hello: String\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">hello</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Hello world!'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">makeExecutableSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rootResolveFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//perform action before any other resolvers</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">addSchemaLevelResolveFunction</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> rootResolveFunction<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// normal ApolloServer listen call but url will contain /graphql</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":6,"column":1,"offset":472},"end":{"line":38,"column":4,"offset":1111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"makeexecutableschemaoptions","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#makeexecutableschemaoptions","aria-label":"makeexecutableschemaoptions permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"makeExecutableSchema(options)","position":{"start":{"line":40,"column":4,"offset":1116},"end":{"line":40,"column":33,"offset":1145}}}],"position":{"start":{"line":40,"column":1,"offset":1113},"end":{"line":40,"column":33,"offset":1145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">makeExecutableSchema</code>","position":{"start":{"line":42,"column":1,"offset":1147},"end":{"line":42,"column":23,"offset":1169}}},{"type":"text","value":" takes a single argument: an object of options. Only the ","position":{"start":{"line":42,"column":23,"offset":1169},"end":{"line":42,"column":80,"offset":1226}}},{"type":"raw","value":"<code class=\"language-text\">typeDefs</code>","position":{"start":{"line":42,"column":80,"offset":1226},"end":{"line":42,"column":90,"offset":1236}}},{"type":"text","value":" option is required.","position":{"start":{"line":42,"column":90,"offset":1236},"end":{"line":42,"column":110,"offset":1256}}}],"position":{"start":{"line":42,"column":1,"offset":1147},"end":{"line":42,"column":110,"offset":1256}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">const { makeExecutableSchema } = require('apollo-server');\n\nconst jsSchema = makeExecutableSchema({\n  typeDefs,\n  resolvers, // optional\n  logger, // optional\n  allowUndefinedInResolve = false, // optional\n  resolverValidationOptions = {}, // optional\n  directiveResolvers = null, // optional\n  schemaDirectives = null,  // optional\n  parseOptions = {},  // optional\n  inheritResolversFromInterfaces = false  // optional\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":44,"column":1,"offset":1258},"end":{"line":58,"column":4,"offset":1690}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">typeDefs</code>","position":{"start":{"line":60,"column":3,"offset":1694},"end":{"line":60,"column":13,"offset":1704}}},{"type":"text","value":" is a required argument and should be a GraphQL schema language string or array of GraphQL schema language strings or a function that takes no arguments and returns an array of GraphQL schema language strings. The order of the strings in the array is not important, but it must include a schema definition.","position":{"start":{"line":60,"column":13,"offset":1704},"end":{"line":60,"column":319,"offset":2010}}}],"position":{"start":{"line":60,"column":3,"offset":1694},"end":{"line":60,"column":319,"offset":2010}}},{"type":"text","value":"\n"}],"position":{"start":{"line":60,"column":1,"offset":1692},"end":{"line":60,"column":319,"offset":2010}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":62,"column":3,"offset":2014},"end":{"line":62,"column":14,"offset":2025}}},{"type":"text","value":" is an optional argument ","position":{"start":{"line":62,"column":14,"offset":2025},"end":{"line":62,"column":39,"offset":2050}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"(empty object by default)","position":{"start":{"line":62,"column":40,"offset":2051},"end":{"line":62,"column":65,"offset":2076}}}],"position":{"start":{"line":62,"column":39,"offset":2050},"end":{"line":62,"column":66,"offset":2077}}},{"type":"text","value":" and should be an object that follows the pattern explained in the ","position":{"start":{"line":62,"column":66,"offset":2077},"end":{"line":62,"column":133,"offset":2144}}},{"type":"element","tagName":"a","properties":{"href":"/data/resolvers/"},"children":[{"type":"text","value":"resolvers documentation","position":{"start":{"line":62,"column":134,"offset":2145},"end":{"line":62,"column":157,"offset":2168}}}],"position":{"start":{"line":62,"column":133,"offset":2144},"end":{"line":62,"column":176,"offset":2187}}},{"type":"text","value":".","position":{"start":{"line":62,"column":176,"offset":2187},"end":{"line":62,"column":177,"offset":2188}}}],"position":{"start":{"line":62,"column":3,"offset":2014},"end":{"line":62,"column":177,"offset":2188}}},{"type":"text","value":"\n"}],"position":{"start":{"line":62,"column":1,"offset":2012},"end":{"line":62,"column":177,"offset":2188}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">logger</code>","position":{"start":{"line":64,"column":3,"offset":2192},"end":{"line":64,"column":11,"offset":2200}}},{"type":"text","value":" is an optional argument, which can be used to print errors to the server console that are usually swallowed by GraphQL. The ","position":{"start":{"line":64,"column":11,"offset":2200},"end":{"line":64,"column":136,"offset":2325}}},{"type":"raw","value":"<code class=\"language-text\">logger</code>","position":{"start":{"line":64,"column":136,"offset":2325},"end":{"line":64,"column":144,"offset":2333}}},{"type":"text","value":" argument should be an object with a ","position":{"start":{"line":64,"column":144,"offset":2333},"end":{"line":64,"column":181,"offset":2370}}},{"type":"raw","value":"<code class=\"language-text\">log</code>","position":{"start":{"line":64,"column":181,"offset":2370},"end":{"line":64,"column":186,"offset":2375}}},{"type":"text","value":" function, eg. ","position":{"start":{"line":64,"column":186,"offset":2375},"end":{"line":64,"column":201,"offset":2390}}},{"type":"raw","value":"<code class=\"language-text\">const logger = { log: e => console.log(e) }</code>","position":{"start":{"line":64,"column":201,"offset":2390},"end":{"line":64,"column":246,"offset":2435}}}],"position":{"start":{"line":64,"column":3,"offset":2192},"end":{"line":64,"column":246,"offset":2435}}},{"type":"text","value":"\n"}],"position":{"start":{"line":64,"column":1,"offset":2190},"end":{"line":64,"column":246,"offset":2435}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">parseOptions</code>","position":{"start":{"line":66,"column":3,"offset":2439},"end":{"line":66,"column":17,"offset":2453}}},{"type":"text","value":" is an optional argument which allows customization of parse when specifying ","position":{"start":{"line":66,"column":17,"offset":2453},"end":{"line":66,"column":94,"offset":2530}}},{"type":"raw","value":"<code class=\"language-text\">typeDefs</code>","position":{"start":{"line":66,"column":94,"offset":2530},"end":{"line":66,"column":104,"offset":2540}}},{"type":"text","value":" as a string.","position":{"start":{"line":66,"column":104,"offset":2540},"end":{"line":66,"column":117,"offset":2553}}}],"position":{"start":{"line":66,"column":3,"offset":2439},"end":{"line":66,"column":117,"offset":2553}}},{"type":"text","value":"\n"}],"position":{"start":{"line":66,"column":1,"offset":2437},"end":{"line":66,"column":117,"offset":2553}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">allowUndefinedInResolve</code>","position":{"start":{"line":68,"column":3,"offset":2557},"end":{"line":68,"column":28,"offset":2582}}},{"type":"text","value":" is an optional argument, which is ","position":{"start":{"line":68,"column":28,"offset":2582},"end":{"line":68,"column":63,"offset":2617}}},{"type":"raw","value":"<code class=\"language-text\">true</code>","position":{"start":{"line":68,"column":63,"offset":2617},"end":{"line":68,"column":69,"offset":2623}}},{"type":"text","value":" by default. When set to ","position":{"start":{"line":68,"column":69,"offset":2623},"end":{"line":68,"column":94,"offset":2648}}},{"type":"raw","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":68,"column":94,"offset":2648},"end":{"line":68,"column":101,"offset":2655}}},{"type":"text","value":", causes your resolve functions to throw errors if they return undefined, which can help make debugging easier.","position":{"start":{"line":68,"column":101,"offset":2655},"end":{"line":68,"column":212,"offset":2766}}}],"position":{"start":{"line":68,"column":3,"offset":2557},"end":{"line":68,"column":212,"offset":2766}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":2555},"end":{"line":68,"column":212,"offset":2766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">resolverValidationOptions</code>","position":{"start":{"line":70,"column":3,"offset":2770},"end":{"line":70,"column":30,"offset":2797}}},{"type":"text","value":" is an optional argument which accepts an ","position":{"start":{"line":70,"column":30,"offset":2797},"end":{"line":70,"column":72,"offset":2839}}},{"type":"raw","value":"<code class=\"language-text\">ResolverValidationOptions</code>","position":{"start":{"line":70,"column":72,"offset":2839},"end":{"line":70,"column":99,"offset":2866}}},{"type":"text","value":" object which has the following boolean properties:","position":{"start":{"line":70,"column":99,"offset":2866},"end":{"line":70,"column":150,"offset":2917}}}],"position":{"start":{"line":70,"column":3,"offset":2770},"end":{"line":70,"column":150,"offset":2917}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">requireResolversForArgs</code>","position":{"start":{"line":71,"column":5,"offset":2922},"end":{"line":71,"column":30,"offset":2947}}},{"type":"text","value":" will cause ","position":{"start":{"line":71,"column":30,"offset":2947},"end":{"line":71,"column":42,"offset":2959}}},{"type":"raw","value":"<code class=\"language-text\">makeExecutableSchema</code>","position":{"start":{"line":71,"column":42,"offset":2959},"end":{"line":71,"column":64,"offset":2981}}},{"type":"text","value":" to throw an error if no resolve function is defined for a field that has arguments.","position":{"start":{"line":71,"column":64,"offset":2981},"end":{"line":71,"column":148,"offset":3065}}}],"position":{"start":{"line":71,"column":5,"offset":2922},"end":{"line":71,"column":148,"offset":3065}}},{"type":"text","value":"\n"}],"position":{"start":{"line":71,"column":3,"offset":2920},"end":{"line":71,"column":148,"offset":3065}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">requireResolversForNonScalar</code>","position":{"start":{"line":73,"column":5,"offset":3071},"end":{"line":73,"column":35,"offset":3101}}},{"type":"text","value":" will cause ","position":{"start":{"line":73,"column":35,"offset":3101},"end":{"line":73,"column":47,"offset":3113}}},{"type":"raw","value":"<code class=\"language-text\">makeExecutableSchema</code>","position":{"start":{"line":73,"column":47,"offset":3113},"end":{"line":73,"column":69,"offset":3135}}},{"type":"text","value":" to throw an error if a non-scalar field has no resolver defined. Setting this to ","position":{"start":{"line":73,"column":69,"offset":3135},"end":{"line":73,"column":151,"offset":3217}}},{"type":"raw","value":"<code class=\"language-text\">true</code>","position":{"start":{"line":73,"column":151,"offset":3217},"end":{"line":73,"column":157,"offset":3223}}},{"type":"text","value":" can be helpful in catching errors, but defaults to ","position":{"start":{"line":73,"column":157,"offset":3223},"end":{"line":73,"column":209,"offset":3275}}},{"type":"raw","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":73,"column":209,"offset":3275},"end":{"line":73,"column":216,"offset":3282}}},{"type":"text","value":" to avoid confusing behavior for those coming from other GraphQL libraries.","position":{"start":{"line":73,"column":216,"offset":3282},"end":{"line":73,"column":291,"offset":3357}}}],"position":{"start":{"line":73,"column":5,"offset":3071},"end":{"line":73,"column":291,"offset":3357}}},{"type":"text","value":"\n"}],"position":{"start":{"line":73,"column":3,"offset":3069},"end":{"line":73,"column":291,"offset":3357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">requireResolversForAllFields</code>","position":{"start":{"line":75,"column":5,"offset":3363},"end":{"line":75,"column":35,"offset":3393}}},{"type":"text","value":" asserts that ","position":{"start":{"line":75,"column":35,"offset":3393},"end":{"line":75,"column":49,"offset":3407}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"all","position":{"start":{"line":75,"column":50,"offset":3408},"end":{"line":75,"column":53,"offset":3411}}}],"position":{"start":{"line":75,"column":49,"offset":3407},"end":{"line":75,"column":54,"offset":3412}}},{"type":"text","value":" fields have a valid resolve function.","position":{"start":{"line":75,"column":54,"offset":3412},"end":{"line":75,"column":92,"offset":3450}}}],"position":{"start":{"line":75,"column":5,"offset":3363},"end":{"line":75,"column":92,"offset":3450}}},{"type":"text","value":"\n"}],"position":{"start":{"line":75,"column":3,"offset":3361},"end":{"line":75,"column":92,"offset":3450}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">requireResolversForResolveType</code>","position":{"start":{"line":77,"column":5,"offset":3456},"end":{"line":77,"column":37,"offset":3488}}},{"type":"text","value":" will require a ","position":{"start":{"line":77,"column":37,"offset":3488},"end":{"line":77,"column":53,"offset":3504}}},{"type":"raw","value":"<code class=\"language-text\">resolveType()</code>","position":{"start":{"line":77,"column":53,"offset":3504},"end":{"line":77,"column":68,"offset":3519}}},{"type":"text","value":" method for Interface and Union types. This can be passed in with the field resolvers as ","position":{"start":{"line":77,"column":68,"offset":3519},"end":{"line":77,"column":157,"offset":3608}}},{"type":"raw","value":"<code class=\"language-text\">__resolveType()</code>","position":{"start":{"line":77,"column":157,"offset":3608},"end":{"line":77,"column":174,"offset":3625}}},{"type":"text","value":". False to disable the warning.","position":{"start":{"line":77,"column":174,"offset":3625},"end":{"line":77,"column":205,"offset":3656}}}],"position":{"start":{"line":77,"column":5,"offset":3456},"end":{"line":77,"column":205,"offset":3656}}},{"type":"text","value":"\n"}],"position":{"start":{"line":77,"column":3,"offset":3454},"end":{"line":77,"column":205,"offset":3656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">allowResolversNotInSchema</code>","position":{"start":{"line":79,"column":5,"offset":3662},"end":{"line":79,"column":32,"offset":3689}}},{"type":"text","value":" turns off the functionality which throws errors when resolvers are found which are not present in the schema. Defaults to ","position":{"start":{"line":79,"column":32,"offset":3689},"end":{"line":79,"column":155,"offset":3812}}},{"type":"raw","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":79,"column":155,"offset":3812},"end":{"line":79,"column":162,"offset":3819}}},{"type":"text","value":", to help catch common errors.","position":{"start":{"line":79,"column":162,"offset":3819},"end":{"line":79,"column":192,"offset":3849}}}],"position":{"start":{"line":79,"column":5,"offset":3662},"end":{"line":79,"column":192,"offset":3849}}},{"type":"text","value":"\n"}],"position":{"start":{"line":79,"column":3,"offset":3660},"end":{"line":79,"column":192,"offset":3849}}},{"type":"text","value":"\n"}],"position":{"start":{"line":71,"column":3,"offset":2920},"end":{"line":79,"column":192,"offset":3849}}},{"type":"text","value":"\n"}],"position":{"start":{"line":70,"column":1,"offset":2768},"end":{"line":79,"column":192,"offset":3849}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">inheritResolversFromInterfaces</code>","position":{"start":{"line":81,"column":3,"offset":3853},"end":{"line":81,"column":35,"offset":3885}}},{"type":"text","value":" GraphQL Objects that implement interfaces will inherit missing resolvers from their interface types defined in the ","position":{"start":{"line":81,"column":35,"offset":3885},"end":{"line":81,"column":151,"offset":4001}}},{"type":"raw","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":81,"column":151,"offset":4001},"end":{"line":81,"column":162,"offset":4012}}},{"type":"text","value":" object.","position":{"start":{"line":81,"column":162,"offset":4012},"end":{"line":81,"column":170,"offset":4020}}}],"position":{"start":{"line":81,"column":3,"offset":3853},"end":{"line":81,"column":170,"offset":4020}}},{"type":"text","value":"\n"}],"position":{"start":{"line":81,"column":1,"offset":3851},"end":{"line":81,"column":170,"offset":4020}}},{"type":"text","value":"\n"}],"position":{"start":{"line":60,"column":1,"offset":1692},"end":{"line":81,"column":170,"offset":4020}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"addmockfunctionstoschemaoptions","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#addmockfunctionstoschemaoptions","aria-label":"addmockfunctionstoschemaoptions permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"addMockFunctionsToSchema(options)","position":{"start":{"line":83,"column":4,"offset":4025},"end":{"line":83,"column":37,"offset":4058}}}],"position":{"start":{"line":83,"column":1,"offset":4022},"end":{"line":83,"column":37,"offset":4058}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> addMockFunctionsToSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">addMockFunctionsToSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schema<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mocks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">preserveResolvers</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":85,"column":1,"offset":4060},"end":{"line":93,"column":4,"offset":4215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given an instance of GraphQLSchema and a mock object, ","position":{"start":{"line":95,"column":1,"offset":4217},"end":{"line":95,"column":55,"offset":4271}}},{"type":"raw","value":"<code class=\"language-text\">addMockFunctionsToSchema</code>","position":{"start":{"line":95,"column":55,"offset":4271},"end":{"line":95,"column":81,"offset":4297}}},{"type":"text","value":" modifies the schema in place to return mock data for any valid query that is sent to the server. If ","position":{"start":{"line":95,"column":81,"offset":4297},"end":{"line":95,"column":182,"offset":4398}}},{"type":"raw","value":"<code class=\"language-text\">mocks</code>","position":{"start":{"line":95,"column":182,"offset":4398},"end":{"line":95,"column":189,"offset":4405}}},{"type":"text","value":" is not passed, the defaults will be used for each of the scalar types. If ","position":{"start":{"line":95,"column":189,"offset":4405},"end":{"line":95,"column":264,"offset":4480}}},{"type":"raw","value":"<code class=\"language-text\">preserveResolvers</code>","position":{"start":{"line":95,"column":264,"offset":4480},"end":{"line":95,"column":283,"offset":4499}}},{"type":"text","value":" is set to ","position":{"start":{"line":95,"column":283,"offset":4499},"end":{"line":95,"column":294,"offset":4510}}},{"type":"raw","value":"<code class=\"language-text\">true</code>","position":{"start":{"line":95,"column":294,"offset":4510},"end":{"line":95,"column":300,"offset":4516}}},{"type":"text","value":", existing resolve functions will not be overwritten to provide mock data. This can be used to mock some parts of the server and not others.","position":{"start":{"line":95,"column":300,"offset":4516},"end":{"line":95,"column":440,"offset":4656}}}],"position":{"start":{"line":95,"column":1,"offset":4217},"end":{"line":95,"column":440,"offset":4656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"mocklistlist-mockfunction","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#mocklistlist-mockfunction","aria-label":"mocklistlist mockfunction permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"MockList(list, mockFunction)","position":{"start":{"line":97,"column":4,"offset":4661},"end":{"line":97,"column":32,"offset":4689}}}],"position":{"start":{"line":97,"column":1,"offset":4658},"end":{"line":97,"column":32,"offset":4689}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> MockList <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">MockList</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mockFunction</span><span class=\"token operator\">:</span> Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":99,"column":1,"offset":4691},"end":{"line":103,"column":4,"offset":4813}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is an object you can return from your mock resolvers which calls the ","position":{"start":{"line":105,"column":1,"offset":4815},"end":{"line":105,"column":75,"offset":4889}}},{"type":"raw","value":"<code class=\"language-text\">mockFunction</code>","position":{"start":{"line":105,"column":75,"offset":4889},"end":{"line":105,"column":89,"offset":4903}}},{"type":"text","value":" once for each list item. The first argument can either be an exact length, or an inclusive range of possible lengths for the list, in case you want to see how your UI responds to varying lists of data.","position":{"start":{"line":105,"column":89,"offset":4903},"end":{"line":105,"column":291,"offset":5105}}}],"position":{"start":{"line":105,"column":1,"offset":4815},"end":{"line":105,"column":291,"offset":5105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"addresolvefunctionstoschema-schema-resolvers-resolvervalidationoptions-inheritresolversfrominterfaces-","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#addresolvefunctionstoschema-schema-resolvers-resolvervalidationoptions-inheritresolversfrominterfaces-","aria-label":"addresolvefunctionstoschema schema resolvers resolvervalidationoptions inheritresolversfrominterfaces  permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"addResolveFunctionsToSchema({ schema, resolvers, resolverValidationOptions?, inheritResolversFromInterfaces? })","position":{"start":{"line":107,"column":4,"offset":5110},"end":{"line":107,"column":115,"offset":5221}}}],"position":{"start":{"line":107,"column":1,"offset":5107},"end":{"line":107,"column":115,"offset":5221}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">addResolveFunctionsToSchema</code>","position":{"start":{"line":109,"column":1,"offset":5223},"end":{"line":109,"column":30,"offset":5252}}},{"type":"text","value":" takes an options object of ","position":{"start":{"line":109,"column":30,"offset":5252},"end":{"line":109,"column":58,"offset":5280}}},{"type":"raw","value":"<code class=\"language-text\">IAddResolveFunctionsToSchemaOptions</code>","position":{"start":{"line":109,"column":58,"offset":5280},"end":{"line":109,"column":95,"offset":5317}}},{"type":"text","value":" and modifies the schema in place by attaching the resolvers to the relevant types.","position":{"start":{"line":109,"column":95,"offset":5317},"end":{"line":109,"column":178,"offset":5400}}}],"position":{"start":{"line":109,"column":1,"offset":5223},"end":{"line":109,"column":178,"offset":5400}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> addResolveFunctionsToSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">RootQuery</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RootQuery called with context \"</span> <span class=\"token operator\">+</span>\n        context <span class=\"token operator\">+</span> <span class=\"token string\">\" to find \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> Author<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">addResolveFunctionsToSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> schema<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":112,"column":1,"offset":5403},"end":{"line":126,"column":4,"offset":5747}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":128,"column":1,"offset":5749},"end":{"line":128,"column":5,"offset":5753}}},{"type":"raw","value":"<code class=\"language-text\">IAddResolveFunctionsToSchemaOptions</code>","position":{"start":{"line":128,"column":5,"offset":5753},"end":{"line":128,"column":42,"offset":5790}}},{"type":"text","value":" object has 4 properties that are described in ","position":{"start":{"line":128,"column":42,"offset":5790},"end":{"line":128,"column":89,"offset":5837}}},{"type":"element","tagName":"a","properties":{"href":"https://www.apollographql.com/docs/graphql-tools/generate-schema/#makeexecutableschemaoptions"},"children":[{"type":"raw","value":"<code class=\"language-text\">makeExecutableSchema</code>","position":{"start":{"line":128,"column":90,"offset":5838},"end":{"line":128,"column":112,"offset":5860}}}],"position":{"start":{"line":128,"column":89,"offset":5837},"end":{"line":128,"column":208,"offset":5956}}},{"type":"text","value":".","position":{"start":{"line":128,"column":208,"offset":5956},"end":{"line":128,"column":209,"offset":5957}}}],"position":{"start":{"line":128,"column":1,"offset":5749},"end":{"line":128,"column":209,"offset":5957}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAddResolveFunctionsToSchemaOptions</span> <span class=\"token punctuation\">{</span>\n  schema<span class=\"token operator\">:</span> GraphQLSchema<span class=\"token punctuation\">;</span>\n  resolvers<span class=\"token operator\">:</span> IResolvers<span class=\"token punctuation\">;</span>\n  resolverValidationOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> IResolverValidationOptions<span class=\"token punctuation\">;</span>\n  inheritResolversFromInterfaces<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":130,"column":1,"offset":5959},"end":{"line":137,"column":4,"offset":6177}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"addschemalevelresolvefunctionschema-rootresolvefunction","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#addschemalevelresolvefunctionschema-rootresolvefunction","aria-label":"addschemalevelresolvefunctionschema rootresolvefunction permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"addSchemaLevelResolveFunction(schema, rootResolveFunction)","position":{"start":{"line":139,"column":4,"offset":6182},"end":{"line":139,"column":62,"offset":6240}}}],"position":{"start":{"line":139,"column":1,"offset":6179},"end":{"line":139,"column":62,"offset":6240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some operations, such as authentication, need to be done only once per query. Logically, these operations belong in an obj resolve function, but unfortunately GraphQL-JS does not let you define one. ","position":{"start":{"line":141,"column":1,"offset":6242},"end":{"line":141,"column":200,"offset":6441}}},{"type":"raw","value":"<code class=\"language-text\">addSchemaLevelResolveFunction</code>","position":{"start":{"line":141,"column":200,"offset":6441},"end":{"line":141,"column":231,"offset":6472}}},{"type":"text","value":" solves this by modifying the GraphQLSchema that is passed as the first argument.","position":{"start":{"line":141,"column":231,"offset":6472},"end":{"line":141,"column":312,"offset":6553}}}],"position":{"start":{"line":141,"column":1,"offset":6242},"end":{"line":141,"column":312,"offset":6553}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"delegatetoschema","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#delegatetoschema","aria-label":"delegatetoschema permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"delegateToSchema","position":{"start":{"line":144,"column":4,"offset":6559},"end":{"line":144,"column":20,"offset":6575}}}],"position":{"start":{"line":144,"column":1,"offset":6556},"end":{"line":144,"column":20,"offset":6575}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":146,"column":1,"offset":6577},"end":{"line":146,"column":5,"offset":6581}}},{"type":"raw","value":"<code class=\"language-text\">delegateToSchema</code>","position":{"start":{"line":146,"column":5,"offset":6581},"end":{"line":146,"column":23,"offset":6599}}},{"type":"text","value":" method can be found on the ","position":{"start":{"line":146,"column":23,"offset":6599},"end":{"line":146,"column":51,"offset":6627}}},{"type":"raw","value":"<code class=\"language-text\">info.mergeInfo</code>","position":{"start":{"line":146,"column":51,"offset":6627},"end":{"line":146,"column":67,"offset":6643}}},{"type":"text","value":" object within any resolver function, and should be called with the following named options:","position":{"start":{"line":146,"column":67,"offset":6643},"end":{"line":146,"column":159,"offset":6735}}}],"position":{"start":{"line":146,"column":1,"offset":6577},"end":{"line":146,"column":159,"offset":6735}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">delegateToSchema(options: {\n  schema: GraphQLSchema;\n  operation: 'query' | 'mutation' | 'subscription';\n  fieldName: string;\n  args?: { [key: string]: any };\n  context: { [key: string]: any };\n  info: GraphQLResolveInfo;\n  transforms?: Array&lt;Transform>;\n}): Promise&lt;any></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":148,"column":1,"offset":6737},"end":{"line":158,"column":4,"offset":7016}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"schema-graphqlschema","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#schema-graphqlschema","aria-label":"schema graphqlschema permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"schema: GraphQLSchema","position":{"start":{"line":160,"column":5,"offset":7022},"end":{"line":160,"column":26,"offset":7043}}}],"position":{"start":{"line":160,"column":1,"offset":7018},"end":{"line":160,"column":26,"offset":7043}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A subschema to delegate to.","position":{"start":{"line":162,"column":1,"offset":7045},"end":{"line":162,"column":28,"offset":7072}}}],"position":{"start":{"line":162,"column":1,"offset":7045},"end":{"line":162,"column":28,"offset":7072}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"operation-query--mutation--subscription","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#operation-query--mutation--subscription","aria-label":"operation query  mutation  subscription permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"operation: 'query' | 'mutation' | 'subscription'","position":{"start":{"line":164,"column":5,"offset":7078},"end":{"line":164,"column":53,"offset":7126}}}],"position":{"start":{"line":164,"column":1,"offset":7074},"end":{"line":164,"column":53,"offset":7126}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The operation type to use during the delegation.","position":{"start":{"line":166,"column":1,"offset":7128},"end":{"line":166,"column":49,"offset":7176}}}],"position":{"start":{"line":166,"column":1,"offset":7128},"end":{"line":166,"column":49,"offset":7176}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"fieldname-string","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fieldname-string","aria-label":"fieldname string permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"fieldName: string","position":{"start":{"line":168,"column":5,"offset":7182},"end":{"line":168,"column":22,"offset":7199}}}],"position":{"start":{"line":168,"column":1,"offset":7178},"end":{"line":168,"column":22,"offset":7199}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A root field in a subschema from which the query should start.","position":{"start":{"line":170,"column":1,"offset":7201},"end":{"line":170,"column":63,"offset":7263}}}],"position":{"start":{"line":170,"column":1,"offset":7201},"end":{"line":170,"column":63,"offset":7263}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"args--key-string-any-","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#args--key-string-any-","aria-label":"args  key string any  permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"args: { [key: string]: any }","position":{"start":{"line":172,"column":5,"offset":7269},"end":{"line":172,"column":33,"offset":7297}}}],"position":{"start":{"line":172,"column":1,"offset":7265},"end":{"line":172,"column":33,"offset":7297}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Additional arguments to be passed to the field. Arguments passed to the field that is being resolved will be preserved if the subschema expects them, so you don't have to pass existing arguments explicitly, though you could use the additional arguments to override the existing ones. For example:","position":{"start":{"line":174,"column":1,"offset":7299},"end":{"line":174,"column":297,"offset":7595}}}],"position":{"start":{"line":174,"column":1,"offset":7299},"end":{"line":174,"column":297,"offset":7595}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token comment\"># Subschema</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Booking</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">bookingsByUser</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Booking</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Schema</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">bookings</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Booking</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Booking</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":176,"column":1,"offset":7597},"end":{"line":197,"column":4,"offset":7817}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we delegate at ","position":{"start":{"line":199,"column":1,"offset":7819},"end":{"line":199,"column":19,"offset":7837}}},{"type":"raw","value":"<code class=\"language-text\">User.bookings</code>","position":{"start":{"line":199,"column":19,"offset":7837},"end":{"line":199,"column":34,"offset":7852}}},{"type":"text","value":" to ","position":{"start":{"line":199,"column":34,"offset":7852},"end":{"line":199,"column":38,"offset":7856}}},{"type":"raw","value":"<code class=\"language-text\">Query.bookingsByUser</code>","position":{"start":{"line":199,"column":38,"offset":7856},"end":{"line":199,"column":60,"offset":7878}}},{"type":"text","value":", we want to preserve the ","position":{"start":{"line":199,"column":60,"offset":7878},"end":{"line":199,"column":86,"offset":7904}}},{"type":"raw","value":"<code class=\"language-text\">limit</code>","position":{"start":{"line":199,"column":86,"offset":7904},"end":{"line":199,"column":93,"offset":7911}}},{"type":"text","value":" argument and add an ","position":{"start":{"line":199,"column":93,"offset":7911},"end":{"line":199,"column":114,"offset":7932}}},{"type":"raw","value":"<code class=\"language-text\">userId</code>","position":{"start":{"line":199,"column":114,"offset":7932},"end":{"line":199,"column":122,"offset":7940}}},{"type":"text","value":" argument by using the ","position":{"start":{"line":199,"column":122,"offset":7940},"end":{"line":199,"column":145,"offset":7963}}},{"type":"raw","value":"<code class=\"language-text\">User.id</code>","position":{"start":{"line":199,"column":145,"offset":7963},"end":{"line":199,"column":154,"offset":7972}}},{"type":"text","value":". So the resolver would look like the following:","position":{"start":{"line":199,"column":154,"offset":7972},"end":{"line":199,"column":202,"offset":8020}}}],"position":{"start":{"line":199,"column":1,"offset":7819},"end":{"line":199,"column":202,"offset":8020}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">User</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">bookings</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">.</span>mergeInfo<span class=\"token punctuation\">.</span><span class=\"token function\">delegateToSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">schema</span><span class=\"token operator\">:</span> subschema<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">operation</span><span class=\"token operator\">:</span> <span class=\"token string\">'query'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">fieldName</span><span class=\"token operator\">:</span> <span class=\"token string\">'bookingsByUser'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">args</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> parent<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        context<span class=\"token punctuation\">,</span>\n        info<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":201,"column":1,"offset":8022},"end":{"line":220,"column":4,"offset":8370}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"context--key-string-any-","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#context--key-string-any-","aria-label":"context  key string any  permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"context: { [key: string]: any }","position":{"start":{"line":222,"column":5,"offset":8376},"end":{"line":222,"column":36,"offset":8407}}}],"position":{"start":{"line":222,"column":1,"offset":8372},"end":{"line":222,"column":36,"offset":8407}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GraphQL context that is going to be passed to subschema execution or subscription call.","position":{"start":{"line":224,"column":1,"offset":8409},"end":{"line":224,"column":88,"offset":8496}}}],"position":{"start":{"line":224,"column":1,"offset":8409},"end":{"line":224,"column":88,"offset":8496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"info-graphqlresolveinfo","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#info-graphqlresolveinfo","aria-label":"info graphqlresolveinfo permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"info: GraphQLResolveInfo","position":{"start":{"line":226,"column":5,"offset":8502},"end":{"line":226,"column":29,"offset":8526}}}],"position":{"start":{"line":226,"column":1,"offset":8498},"end":{"line":226,"column":29,"offset":8526}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GraphQL resolve info of the current resolver. Provides access to the subquery that starts at the current resolver.","position":{"start":{"line":228,"column":1,"offset":8528},"end":{"line":228,"column":115,"offset":8642}}}],"position":{"start":{"line":228,"column":1,"offset":8528},"end":{"line":228,"column":115,"offset":8642}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Also provides the ","position":{"start":{"line":230,"column":1,"offset":8644},"end":{"line":230,"column":19,"offset":8662}}},{"type":"raw","value":"<code class=\"language-text\">info.mergeInfo.delegateToSchema</code>","position":{"start":{"line":230,"column":19,"offset":8662},"end":{"line":230,"column":52,"offset":8695}}},{"type":"text","value":" function discussed above.","position":{"start":{"line":230,"column":52,"offset":8695},"end":{"line":230,"column":78,"offset":8721}}}],"position":{"start":{"line":230,"column":1,"offset":8644},"end":{"line":230,"column":78,"offset":8721}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"transforms-arraytransform","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#transforms-arraytransform","aria-label":"transforms arraytransform permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"transforms: Array","position":{"start":{"line":232,"column":5,"offset":8727},"end":{"line":232,"column":22,"offset":8744}}},{"type":"raw","value":"<Transform>","position":{"start":{"line":232,"column":22,"offset":8744},"end":{"line":232,"column":33,"offset":8755}}}],"position":{"start":{"line":232,"column":1,"offset":8723},"end":{"line":232,"column":33,"offset":8755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Transforms to apply to the query and results. Should be the same transforms that were used to transform the schema, if any. After transformation, ","position":{"start":{"line":234,"column":1,"offset":8757},"end":{"line":234,"column":147,"offset":8903}}},{"type":"raw","value":"<code class=\"language-text\">transformedSchema.transforms</code>","position":{"start":{"line":234,"column":147,"offset":8903},"end":{"line":234,"column":177,"offset":8933}}},{"type":"text","value":" contains the transforms that were applied.","position":{"start":{"line":234,"column":177,"offset":8933},"end":{"line":234,"column":220,"offset":8976}}}],"position":{"start":{"line":234,"column":1,"offset":8757},"end":{"line":234,"column":220,"offset":8976}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"additional-considerations---aliases","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#additional-considerations---aliases","aria-label":"additional considerations   aliases permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Additional considerations - Aliases","position":{"start":{"line":236,"column":5,"offset":8982},"end":{"line":236,"column":40,"offset":9017}}}],"position":{"start":{"line":236,"column":1,"offset":8978},"end":{"line":236,"column":40,"offset":9017}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Delegation preserves aliases that are passed from the parent query. However that presents problems, because default GraphQL resolvers retrieve field from parent based on their name, not aliases. This way results with aliases will be missing from the delegated result. ","position":{"start":{"line":238,"column":1,"offset":9019},"end":{"line":238,"column":269,"offset":9287}}},{"type":"raw","value":"<code class=\"language-text\">mergeSchemas</code>","position":{"start":{"line":238,"column":269,"offset":9287},"end":{"line":238,"column":283,"offset":9301}}},{"type":"text","value":" and ","position":{"start":{"line":238,"column":283,"offset":9301},"end":{"line":238,"column":288,"offset":9306}}},{"type":"raw","value":"<code class=\"language-text\">transformSchemas</code>","position":{"start":{"line":238,"column":288,"offset":9306},"end":{"line":238,"column":306,"offset":9324}}},{"type":"text","value":" go around that by using ","position":{"start":{"line":238,"column":306,"offset":9324},"end":{"line":238,"column":331,"offset":9349}}},{"type":"raw","value":"<code class=\"language-text\">src/stitching/defaultMergedResolver</code>","position":{"start":{"line":238,"column":331,"offset":9349},"end":{"line":238,"column":368,"offset":9386}}},{"type":"text","value":" for all fields without explicit resolver. When building new libraries around delegation, one should consider how the aliases will be handled.","position":{"start":{"line":238,"column":368,"offset":9386},"end":{"line":238,"column":510,"offset":9528}}}],"position":{"start":{"line":238,"column":1,"offset":9019},"end":{"line":238,"column":510,"offset":9528}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"mergeschemas","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#mergeschemas","aria-label":"mergeschemas permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"mergeSchemas","position":{"start":{"line":241,"column":4,"offset":9534},"end":{"line":241,"column":16,"offset":9546}}}],"position":{"start":{"line":241,"column":1,"offset":9531},"end":{"line":241,"column":16,"offset":9546}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token function\">mergeSchemas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schemas<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> GraphQLSchema <span class=\"token operator\">|</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>GraphQLNamedType<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n  resolvers<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>IResolvers<span class=\"token operator\">></span> <span class=\"token operator\">|</span> IResolvers<span class=\"token punctuation\">;</span>\n  onTypeConflict<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    left<span class=\"token operator\">:</span> GraphQLNamedType<span class=\"token punctuation\">,</span>\n    right<span class=\"token operator\">:</span> GraphQLNamedType<span class=\"token punctuation\">,</span>\n    info<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      left<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        schema<span class=\"token operator\">?</span><span class=\"token operator\">:</span> GraphQLSchema<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      right<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        schema<span class=\"token operator\">?</span><span class=\"token operator\">:</span> GraphQLSchema<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> GraphQLNamedType<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":243,"column":1,"offset":9548},"end":{"line":260,"column":4,"offset":9923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the main function that implements schema stitching. Read below for a description of each option.","position":{"start":{"line":262,"column":1,"offset":9925},"end":{"line":262,"column":105,"offset":10029}}}],"position":{"start":{"line":262,"column":1,"offset":9925},"end":{"line":262,"column":105,"offset":10029}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"schemas","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#schemas","aria-label":"schemas permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"schemas","position":{"start":{"line":264,"column":5,"offset":10035},"end":{"line":264,"column":12,"offset":10042}}}],"position":{"start":{"line":264,"column":1,"offset":10031},"end":{"line":264,"column":12,"offset":10042}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">schemas</code>","position":{"start":{"line":266,"column":1,"offset":10044},"end":{"line":266,"column":10,"offset":10053}}},{"type":"text","value":" is an array of ","position":{"start":{"line":266,"column":10,"offset":10053},"end":{"line":266,"column":26,"offset":10069}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLSchema</code>","position":{"start":{"line":266,"column":26,"offset":10069},"end":{"line":266,"column":41,"offset":10084}}},{"type":"text","value":" objects, schema strings, or lists of ","position":{"start":{"line":266,"column":41,"offset":10084},"end":{"line":266,"column":79,"offset":10122}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLNamedType</code>","position":{"start":{"line":266,"column":79,"offset":10122},"end":{"line":266,"column":97,"offset":10140}}},{"type":"text","value":"s. Strings can contain type extensions or GraphQL types, which will be added to resulting schema. Note that type extensions are always applied last, while types are defined in the order in which they are provided.","position":{"start":{"line":266,"column":97,"offset":10140},"end":{"line":266,"column":310,"offset":10353}}}],"position":{"start":{"line":266,"column":1,"offset":10044},"end":{"line":266,"column":310,"offset":10353}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"resolvers","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#resolvers","aria-label":"resolvers permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"resolvers","position":{"start":{"line":268,"column":5,"offset":10359},"end":{"line":268,"column":14,"offset":10368}}}],"position":{"start":{"line":268,"column":1,"offset":10355},"end":{"line":268,"column":14,"offset":10368}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">resolvers</code>","position":{"start":{"line":270,"column":1,"offset":10370},"end":{"line":270,"column":12,"offset":10381}}},{"type":"text","value":" accepts resolvers in same format as ","position":{"start":{"line":270,"column":12,"offset":10381},"end":{"line":270,"column":49,"offset":10418}}},{"type":"element","tagName":"a","properties":{"href":"#makeexecutableschemaoptions"},"children":[{"type":"raw","value":"<code class=\"language-text\">makeExecutableSchema</code>","position":{"start":{"line":270,"column":50,"offset":10419},"end":{"line":270,"column":72,"offset":10441}}}],"position":{"start":{"line":270,"column":49,"offset":10418},"end":{"line":270,"column":103,"offset":10472}}},{"type":"text","value":". It can also take an Array of resolvers. One addition to the resolver format is the possibility to specify a ","position":{"start":{"line":270,"column":103,"offset":10472},"end":{"line":270,"column":213,"offset":10582}}},{"type":"raw","value":"<code class=\"language-text\">fragment</code>","position":{"start":{"line":270,"column":213,"offset":10582},"end":{"line":270,"column":223,"offset":10592}}},{"type":"text","value":" for a resolver. The ","position":{"start":{"line":270,"column":223,"offset":10592},"end":{"line":270,"column":244,"offset":10613}}},{"type":"raw","value":"<code class=\"language-text\">fragment</code>","position":{"start":{"line":270,"column":244,"offset":10613},"end":{"line":270,"column":254,"offset":10623}}},{"type":"text","value":" must be a GraphQL fragment definition string, specifying which fields from the parent schema are required for the resolver to function properly.","position":{"start":{"line":270,"column":254,"offset":10623},"end":{"line":270,"column":399,"offset":10768}}}],"position":{"start":{"line":270,"column":1,"offset":10370},"end":{"line":270,"column":399,"offset":10768}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token literal-property property\">resolvers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Booking</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">property</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">fragment</span><span class=\"token operator\">:</span> <span class=\"token string\">'fragment BookingFragment on Booking { propertyId }'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mergeInfo<span class=\"token punctuation\">.</span><span class=\"token function\">delegateToSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">schema</span><span class=\"token operator\">:</span> bookingSchema<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">operation</span><span class=\"token operator\">:</span> <span class=\"token string\">'query'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">fieldName</span><span class=\"token operator\">:</span> <span class=\"token string\">'propertyById'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">args</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> parent<span class=\"token punctuation\">.</span>propertyId<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          context<span class=\"token punctuation\">,</span>\n          info<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":272,"column":1,"offset":10770},"end":{"line":292,"column":4,"offset":11216}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"mergeinfo-and-delegatetoschema","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#mergeinfo-and-delegatetoschema","aria-label":"mergeinfo and delegatetoschema permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"mergeInfo and delegateToSchema","position":{"start":{"line":294,"column":5,"offset":11222},"end":{"line":294,"column":35,"offset":11252}}}],"position":{"start":{"line":294,"column":1,"offset":11218},"end":{"line":294,"column":35,"offset":11252}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":296,"column":1,"offset":11254},"end":{"line":296,"column":5,"offset":11258}}},{"type":"raw","value":"<code class=\"language-text\">info.mergeInfo</code>","position":{"start":{"line":296,"column":5,"offset":11258},"end":{"line":296,"column":21,"offset":11274}}},{"type":"text","value":" object provides the ","position":{"start":{"line":296,"column":21,"offset":11274},"end":{"line":296,"column":42,"offset":11295}}},{"type":"raw","value":"<code class=\"language-text\">delegateToSchema</code>","position":{"start":{"line":296,"column":42,"offset":11295},"end":{"line":296,"column":60,"offset":11313}}},{"type":"text","value":" method:","position":{"start":{"line":296,"column":60,"offset":11313},"end":{"line":296,"column":68,"offset":11321}}}],"position":{"start":{"line":296,"column":1,"offset":11254},"end":{"line":296,"column":68,"offset":11321}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">type MergeInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  delegateToSchema<span class=\"token operator\">&lt;</span>TContext<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> IDelegateToSchemaOptions<span class=\"token operator\">&lt;</span>TContext<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDelegateToSchemaOptions</span><span class=\"token operator\">&lt;</span>TContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">schema</span><span class=\"token operator\">:</span> GraphQLSchema<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">operation</span><span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">fieldName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    args<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">context</span><span class=\"token operator\">:</span> TContext<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> GraphQLResolveInfo<span class=\"token punctuation\">;</span>\n    transforms<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Transform<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":298,"column":1,"offset":11323},"end":{"line":316,"column":4,"offset":11725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As described in the documentation above, ","position":{"start":{"line":318,"column":1,"offset":11727},"end":{"line":318,"column":42,"offset":11768}}},{"type":"raw","value":"<code class=\"language-text\">info.mergeInfo.delegateToSchema</code>","position":{"start":{"line":318,"column":42,"offset":11768},"end":{"line":318,"column":75,"offset":11801}}},{"type":"text","value":" allows delegating to any ","position":{"start":{"line":318,"column":75,"offset":11801},"end":{"line":318,"column":101,"offset":11827}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLSchema</code>","position":{"start":{"line":318,"column":101,"offset":11827},"end":{"line":318,"column":116,"offset":11842}}},{"type":"text","value":" object, optionally applying transforms in the process. See ","position":{"start":{"line":318,"column":116,"offset":11842},"end":{"line":318,"column":176,"offset":11902}}},{"type":"element","tagName":"a","properties":{"href":"#built-in-transforms"},"children":[{"type":"text","value":"Built-in transforms","position":{"start":{"line":318,"column":177,"offset":11903},"end":{"line":318,"column":196,"offset":11922}}}],"position":{"start":{"line":318,"column":176,"offset":11902},"end":{"line":318,"column":219,"offset":11945}}},{"type":"text","value":".","position":{"start":{"line":318,"column":219,"offset":11945},"end":{"line":318,"column":220,"offset":11946}}}],"position":{"start":{"line":318,"column":1,"offset":11727},"end":{"line":318,"column":220,"offset":11946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"ontypeconflict","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#ontypeconflict","aria-label":"ontypeconflict permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"onTypeConflict","position":{"start":{"line":320,"column":5,"offset":11952},"end":{"line":320,"column":19,"offset":11966}}}],"position":{"start":{"line":320,"column":1,"offset":11948},"end":{"line":320,"column":19,"offset":11966}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">type <span class=\"token function-variable function\">OnTypeConflict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> GraphQLNamedType<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> GraphQLNamedType<span class=\"token punctuation\">,</span>\n  info<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      schema<span class=\"token operator\">?</span><span class=\"token operator\">:</span> GraphQLSchema<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      schema<span class=\"token operator\">?</span><span class=\"token operator\">:</span> GraphQLSchema<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> GraphQLNamedType<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":322,"column":1,"offset":11968},"end":{"line":335,"column":4,"offset":12192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":337,"column":1,"offset":12194},"end":{"line":337,"column":5,"offset":12198}}},{"type":"raw","value":"<code class=\"language-text\">onTypeConflict</code>","position":{"start":{"line":337,"column":5,"offset":12198},"end":{"line":337,"column":21,"offset":12214}}},{"type":"text","value":" option to ","position":{"start":{"line":337,"column":21,"offset":12214},"end":{"line":337,"column":32,"offset":12225}}},{"type":"raw","value":"<code class=\"language-text\">mergeSchemas</code>","position":{"start":{"line":337,"column":32,"offset":12225},"end":{"line":337,"column":46,"offset":12239}}},{"type":"text","value":" allows customization of type resolving logic.","position":{"start":{"line":337,"column":46,"offset":12239},"end":{"line":337,"column":92,"offset":12285}}}],"position":{"start":{"line":337,"column":1,"offset":12194},"end":{"line":337,"column":92,"offset":12285}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The default behavior of ","position":{"start":{"line":339,"column":1,"offset":12287},"end":{"line":339,"column":25,"offset":12311}}},{"type":"raw","value":"<code class=\"language-text\">mergeSchemas</code>","position":{"start":{"line":339,"column":25,"offset":12311},"end":{"line":339,"column":39,"offset":12325}}},{"type":"text","value":" is to take the first encountered type of all the types with the same name. If there are conflicts, ","position":{"start":{"line":339,"column":39,"offset":12325},"end":{"line":339,"column":139,"offset":12425}}},{"type":"raw","value":"<code class=\"language-text\">onTypeConflict</code>","position":{"start":{"line":339,"column":139,"offset":12425},"end":{"line":339,"column":155,"offset":12441}}},{"type":"text","value":" enables explicit selection of the winning type.","position":{"start":{"line":339,"column":155,"offset":12441},"end":{"line":339,"column":203,"offset":12489}}}],"position":{"start":{"line":339,"column":1,"offset":12287},"end":{"line":339,"column":203,"offset":12489}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example, here's how we could select the last type among multiple types with the same name:","position":{"start":{"line":341,"column":1,"offset":12491},"end":{"line":341,"column":95,"offset":12585}}}],"position":{"start":{"line":341,"column":1,"offset":12491},"end":{"line":341,"column":95,"offset":12585}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTypeConflict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> right<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>","position":{"start":{"line":343,"column":1,"offset":12587},"end":{"line":345,"column":4,"offset":12643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And here's how we might select the type whose schema has the latest ","position":{"start":{"line":347,"column":1,"offset":12645},"end":{"line":347,"column":69,"offset":12713}}},{"type":"raw","value":"<code class=\"language-text\">version</code>","position":{"start":{"line":347,"column":69,"offset":12713},"end":{"line":347,"column":78,"offset":12722}}},{"type":"text","value":":","position":{"start":{"line":347,"column":78,"offset":12722},"end":{"line":347,"column":79,"offset":12723}}}],"position":{"start":{"line":347,"column":1,"offset":12645},"end":{"line":347,"column":79,"offset":12723}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTypeConflict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span>version <span class=\"token operator\">>=</span> info<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>schema<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":349,"column":1,"offset":12725},"end":{"line":357,"column":4,"offset":12897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When using schema transforms, ","position":{"start":{"line":359,"column":1,"offset":12899},"end":{"line":359,"column":31,"offset":12929}}},{"type":"raw","value":"<code class=\"language-text\">onTypeConflict</code>","position":{"start":{"line":359,"column":31,"offset":12929},"end":{"line":359,"column":47,"offset":12945}}},{"type":"text","value":" is often unnecessary, since transforms can be used to prevent conflicts before merging schemas. However, if you're not using schema transforms, ","position":{"start":{"line":359,"column":47,"offset":12945},"end":{"line":359,"column":192,"offset":13090}}},{"type":"raw","value":"<code class=\"language-text\">onTypeConflict</code>","position":{"start":{"line":359,"column":192,"offset":13090},"end":{"line":359,"column":208,"offset":13106}}},{"type":"text","value":" can be a quick way to make ","position":{"start":{"line":359,"column":208,"offset":13106},"end":{"line":359,"column":236,"offset":13134}}},{"type":"raw","value":"<code class=\"language-text\">mergeSchemas</code>","position":{"start":{"line":359,"column":236,"offset":13134},"end":{"line":359,"column":250,"offset":13148}}},{"type":"text","value":" produce more desirable results.","position":{"start":{"line":359,"column":250,"offset":13148},"end":{"line":359,"column":282,"offset":13180}}}],"position":{"start":{"line":359,"column":1,"offset":12899},"end":{"line":359,"column":282,"offset":13180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"transform","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#transform","aria-label":"transform permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Transform","position":{"start":{"line":361,"column":5,"offset":13186},"end":{"line":361,"column":14,"offset":13195}}}],"position":{"start":{"line":361,"column":1,"offset":13182},"end":{"line":361,"column":14,"offset":13195}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Transform</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  transformSchema<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>schema<span class=\"token operator\">:</span> GraphQLSchema<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> GraphQLSchema<span class=\"token punctuation\">;</span>\n  transformRequest<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Request<span class=\"token punctuation\">;</span>\n  transformResult<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>result<span class=\"token operator\">:</span> Result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Request</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token operator\">:</span> DocumentNode<span class=\"token punctuation\">;</span>\n  variables<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  extensions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> ExecutionResult <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  extensions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":363,"column":1,"offset":13197},"end":{"line":379,"column":4,"offset":13586}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"transformschema","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#transformschema","aria-label":"transformschema permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"transformSchema","position":{"start":{"line":381,"column":5,"offset":13592},"end":{"line":381,"column":20,"offset":13607}}}],"position":{"start":{"line":381,"column":1,"offset":13588},"end":{"line":381,"column":20,"offset":13607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a ","position":{"start":{"line":383,"column":1,"offset":13609},"end":{"line":383,"column":9,"offset":13617}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLSchema</code>","position":{"start":{"line":383,"column":9,"offset":13617},"end":{"line":383,"column":24,"offset":13632}}},{"type":"text","value":" and an array of ","position":{"start":{"line":383,"column":24,"offset":13632},"end":{"line":383,"column":41,"offset":13649}}},{"type":"raw","value":"<code class=\"language-text\">Transform</code>","position":{"start":{"line":383,"column":41,"offset":13649},"end":{"line":383,"column":52,"offset":13660}}},{"type":"text","value":" objects, produce a new schema with those transforms applied.","position":{"start":{"line":383,"column":52,"offset":13660},"end":{"line":383,"column":113,"offset":13721}}}],"position":{"start":{"line":383,"column":1,"offset":13609},"end":{"line":383,"column":113,"offset":13721}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Delegating resolvers will also be generated to map from new schema root fields to old schema root fields. Often these automatic resolvers are sufficient, so you don't have to implement your own.","position":{"start":{"line":385,"column":1,"offset":13723},"end":{"line":385,"column":195,"offset":13917}}}],"position":{"start":{"line":385,"column":1,"offset":13723},"end":{"line":385,"column":195,"offset":13917}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"built-in-transforms","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#built-in-transforms","aria-label":"built in transforms permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Built-in transforms","position":{"start":{"line":387,"column":4,"offset":13922},"end":{"line":387,"column":23,"offset":13941}}}],"position":{"start":{"line":387,"column":1,"offset":13919},"end":{"line":387,"column":23,"offset":13941}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Built-in transforms are ready-made classes implementing the ","position":{"start":{"line":389,"column":1,"offset":13943},"end":{"line":389,"column":61,"offset":14003}}},{"type":"raw","value":"<code class=\"language-text\">Transform</code>","position":{"start":{"line":389,"column":61,"offset":14003},"end":{"line":389,"column":72,"offset":14014}}},{"type":"text","value":" interface. They are intended to cover many of the most common schema transformation use cases, but they also serve as examples of how to implement transforms for your own needs.","position":{"start":{"line":389,"column":72,"offset":14014},"end":{"line":389,"column":250,"offset":14192}}}],"position":{"start":{"line":389,"column":1,"offset":13943},"end":{"line":389,"column":250,"offset":14192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"modifying-types","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#modifying-types","aria-label":"modifying types permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Modifying types","position":{"start":{"line":391,"column":5,"offset":14198},"end":{"line":391,"column":20,"offset":14213}}}],"position":{"start":{"line":391,"column":1,"offset":14194},"end":{"line":391,"column":20,"offset":14213}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">FilterTypes(filter: (type: GraphQLNamedType) => boolean)</code>","position":{"start":{"line":393,"column":3,"offset":14217},"end":{"line":393,"column":61,"offset":14275}}},{"type":"text","value":": Remove all types for which the ","position":{"start":{"line":393,"column":61,"offset":14275},"end":{"line":393,"column":94,"offset":14308}}},{"type":"raw","value":"<code class=\"language-text\">filter</code>","position":{"start":{"line":393,"column":94,"offset":14308},"end":{"line":393,"column":102,"offset":14316}}},{"type":"text","value":" function returns ","position":{"start":{"line":393,"column":102,"offset":14316},"end":{"line":393,"column":120,"offset":14334}}},{"type":"raw","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":393,"column":120,"offset":14334},"end":{"line":393,"column":127,"offset":14341}}},{"type":"text","value":".","position":{"start":{"line":393,"column":127,"offset":14341},"end":{"line":393,"column":128,"offset":14342}}}],"position":{"start":{"line":393,"column":3,"offset":14217},"end":{"line":393,"column":128,"offset":14342}}},{"type":"text","value":"\n"}],"position":{"start":{"line":393,"column":1,"offset":14215},"end":{"line":393,"column":128,"offset":14342}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">RenameTypes(renamer, options?)</code>","position":{"start":{"line":395,"column":3,"offset":14346},"end":{"line":395,"column":35,"offset":14378}}},{"type":"text","value":": Rename types by applying ","position":{"start":{"line":395,"column":35,"offset":14378},"end":{"line":395,"column":62,"offset":14405}}},{"type":"raw","value":"<code class=\"language-text\">renamer</code>","position":{"start":{"line":395,"column":62,"offset":14405},"end":{"line":395,"column":71,"offset":14414}}},{"type":"text","value":" to each type name. If ","position":{"start":{"line":395,"column":71,"offset":14414},"end":{"line":395,"column":94,"offset":14437}}},{"type":"raw","value":"<code class=\"language-text\">renamer</code>","position":{"start":{"line":395,"column":94,"offset":14437},"end":{"line":395,"column":103,"offset":14446}}},{"type":"text","value":" returns ","position":{"start":{"line":395,"column":103,"offset":14446},"end":{"line":395,"column":112,"offset":14455}}},{"type":"raw","value":"<code class=\"language-text\">undefined</code>","position":{"start":{"line":395,"column":112,"offset":14455},"end":{"line":395,"column":123,"offset":14466}}},{"type":"text","value":", the name will be left unchanged. Options controls whether built-in types and scalars are renamed. Root objects are never renamed by this transform.","position":{"start":{"line":395,"column":123,"offset":14466},"end":{"line":395,"column":272,"offset":14615}}}],"position":{"start":{"line":395,"column":3,"offset":14346},"end":{"line":395,"column":272,"offset":14615}}},{"type":"text","value":"\n"}],"position":{"start":{"line":395,"column":1,"offset":14344},"end":{"line":395,"column":272,"offset":14615}}},{"type":"text","value":"\n"}],"position":{"start":{"line":393,"column":1,"offset":14215},"end":{"line":395,"column":272,"offset":14615}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token function\">RenameTypes</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    renameBuiltins<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">;</span>\n    renameScalars<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":397,"column":1,"offset":14617},"end":{"line":405,"column":4,"offset":14752}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"modifying-root-fields","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#modifying-root-fields","aria-label":"modifying root fields permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Modifying root fields","position":{"start":{"line":407,"column":5,"offset":14758},"end":{"line":407,"column":26,"offset":14779}}}],"position":{"start":{"line":407,"column":1,"offset":14754},"end":{"line":407,"column":26,"offset":14779}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">TransformRootFields(transformer: RootTransformer)</code>","position":{"start":{"line":409,"column":3,"offset":14783},"end":{"line":409,"column":54,"offset":14834}}},{"type":"text","value":": Given a transformer, arbitrarily transform root fields. The ","position":{"start":{"line":409,"column":54,"offset":14834},"end":{"line":409,"column":116,"offset":14896}}},{"type":"raw","value":"<code class=\"language-text\">transformer</code>","position":{"start":{"line":409,"column":116,"offset":14896},"end":{"line":409,"column":129,"offset":14909}}},{"type":"text","value":" can return a ","position":{"start":{"line":409,"column":129,"offset":14909},"end":{"line":409,"column":143,"offset":14923}}},{"type":"raw","value":"<code class=\"language-text\">GraphQLFieldConfig</code>","position":{"start":{"line":409,"column":143,"offset":14923},"end":{"line":409,"column":163,"offset":14943}}},{"type":"text","value":" definition, a object with new ","position":{"start":{"line":409,"column":163,"offset":14943},"end":{"line":409,"column":194,"offset":14974}}},{"type":"raw","value":"<code class=\"language-text\">name</code>","position":{"start":{"line":409,"column":194,"offset":14974},"end":{"line":409,"column":200,"offset":14980}}},{"type":"text","value":" and a ","position":{"start":{"line":409,"column":200,"offset":14980},"end":{"line":409,"column":207,"offset":14987}}},{"type":"raw","value":"<code class=\"language-text\">field</code>","position":{"start":{"line":409,"column":207,"offset":14987},"end":{"line":409,"column":214,"offset":14994}}},{"type":"text","value":", ","position":{"start":{"line":409,"column":214,"offset":14994},"end":{"line":409,"column":216,"offset":14996}}},{"type":"raw","value":"<code class=\"language-text\">null</code>","position":{"start":{"line":409,"column":216,"offset":14996},"end":{"line":409,"column":222,"offset":15002}}},{"type":"text","value":" to remove the field, or ","position":{"start":{"line":409,"column":222,"offset":15002},"end":{"line":409,"column":247,"offset":15027}}},{"type":"raw","value":"<code class=\"language-text\">undefined</code>","position":{"start":{"line":409,"column":247,"offset":15027},"end":{"line":409,"column":258,"offset":15038}}},{"type":"text","value":" to leave the field unchanged.","position":{"start":{"line":409,"column":258,"offset":15038},"end":{"line":409,"column":288,"offset":15068}}}],"position":{"start":{"line":409,"column":1,"offset":14781},"end":{"line":409,"column":288,"offset":15068}}},{"type":"text","value":"\n"}],"position":{"start":{"line":409,"column":1,"offset":14781},"end":{"line":409,"column":288,"offset":15068}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token function\">TransformRootFields</span><span class=\"token punctuation\">(</span>transformer<span class=\"token operator\">:</span> RootTransformer<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RootTransformer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  operation<span class=\"token operator\">:</span> <span class=\"token string\">'Query'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Mutation'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Subscription'</span><span class=\"token punctuation\">,</span>\n  fieldName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  field<span class=\"token operator\">:</span> GraphQLField<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token operator\">|</span> GraphQLFieldConfig<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> field<span class=\"token operator\">:</span> GraphQLFieldConfig<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":411,"column":1,"offset":15070},"end":{"line":423,"column":4,"offset":15376}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">FilterRootFields(filter: RootFilter)</code>","position":{"start":{"line":425,"column":3,"offset":15380},"end":{"line":425,"column":41,"offset":15418}}},{"type":"text","value":": Like ","position":{"start":{"line":425,"column":41,"offset":15418},"end":{"line":425,"column":48,"offset":15425}}},{"type":"raw","value":"<code class=\"language-text\">FilterTypes</code>","position":{"start":{"line":425,"column":48,"offset":15425},"end":{"line":425,"column":61,"offset":15438}}},{"type":"text","value":", removes root fields for which the ","position":{"start":{"line":425,"column":61,"offset":15438},"end":{"line":425,"column":97,"offset":15474}}},{"type":"raw","value":"<code class=\"language-text\">filter</code>","position":{"start":{"line":425,"column":97,"offset":15474},"end":{"line":425,"column":105,"offset":15482}}},{"type":"text","value":" function returns ","position":{"start":{"line":425,"column":105,"offset":15482},"end":{"line":425,"column":123,"offset":15500}}},{"type":"raw","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":425,"column":123,"offset":15500},"end":{"line":425,"column":130,"offset":15507}}},{"type":"text","value":".","position":{"start":{"line":425,"column":130,"offset":15507},"end":{"line":425,"column":131,"offset":15508}}}],"position":{"start":{"line":425,"column":1,"offset":15378},"end":{"line":425,"column":131,"offset":15508}}},{"type":"text","value":"\n"}],"position":{"start":{"line":425,"column":1,"offset":15378},"end":{"line":425,"column":131,"offset":15508}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token function\">FilterRootFields</span><span class=\"token punctuation\">(</span>filter<span class=\"token operator\">:</span> RootFilter<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RootFilter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  operation<span class=\"token operator\">:</span> <span class=\"token string\">'Query'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Mutation'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Subscription'</span><span class=\"token punctuation\">,</span>\n  fieldName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  field<span class=\"token operator\">:</span> GraphQLField<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":427,"column":1,"offset":15510},"end":{"line":435,"column":4,"offset":15697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">RenameRootFields(renamer)</code>","position":{"start":{"line":437,"column":3,"offset":15701},"end":{"line":437,"column":30,"offset":15728}}},{"type":"text","value":": Rename root fields, by applying the ","position":{"start":{"line":437,"column":30,"offset":15728},"end":{"line":437,"column":68,"offset":15766}}},{"type":"raw","value":"<code class=\"language-text\">renamer</code>","position":{"start":{"line":437,"column":68,"offset":15766},"end":{"line":437,"column":77,"offset":15775}}},{"type":"text","value":" function to their names.","position":{"start":{"line":437,"column":77,"offset":15775},"end":{"line":437,"column":102,"offset":15800}}}],"position":{"start":{"line":437,"column":1,"offset":15699},"end":{"line":437,"column":102,"offset":15800}}},{"type":"text","value":"\n"}],"position":{"start":{"line":437,"column":1,"offset":15699},"end":{"line":437,"column":102,"offset":15800}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token function\">RenameRootFields</span><span class=\"token punctuation\">(</span>\n  renamer<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    operation<span class=\"token operator\">:</span> <span class=\"token string\">'Query'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Mutation'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Subscription'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    field<span class=\"token operator\">:</span> GraphQLField<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":439,"column":1,"offset":15802},"end":{"line":447,"column":4,"offset":15966}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"other","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#other","aria-label":"other permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Other","position":{"start":{"line":449,"column":5,"offset":15972},"end":{"line":449,"column":10,"offset":15977}}}],"position":{"start":{"line":449,"column":1,"offset":15968},"end":{"line":449,"column":10,"offset":15977}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">ExractField({ from: Array&lt;string>, to: Array&lt;string> })</code>","position":{"start":{"line":451,"column":3,"offset":15981},"end":{"line":451,"column":60,"offset":16038}}},{"type":"text","value":" - move selection at ","position":{"start":{"line":451,"column":60,"offset":16038},"end":{"line":451,"column":81,"offset":16059}}},{"type":"raw","value":"<code class=\"language-text\">from</code>","position":{"start":{"line":451,"column":81,"offset":16059},"end":{"line":451,"column":87,"offset":16065}}},{"type":"text","value":" path to ","position":{"start":{"line":451,"column":87,"offset":16065},"end":{"line":451,"column":96,"offset":16074}}},{"type":"raw","value":"<code class=\"language-text\">to</code>","position":{"start":{"line":451,"column":96,"offset":16074},"end":{"line":451,"column":100,"offset":16078}}},{"type":"text","value":" path.","position":{"start":{"line":451,"column":100,"offset":16078},"end":{"line":451,"column":106,"offset":16084}}}],"position":{"start":{"line":451,"column":3,"offset":15981},"end":{"line":451,"column":106,"offset":16084}}},{"type":"text","value":"\n"}],"position":{"start":{"line":451,"column":1,"offset":15979},"end":{"line":451,"column":106,"offset":16084}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">WrapQuery(\n  path: Array&lt;string>,\n  wrapper: QueryWrapper,\n  extractor: (result: any) => any,\n)</code>","position":{"start":{"line":453,"column":3,"offset":16088},"end":{"line":457,"column":5,"offset":16193}}},{"type":"text","value":" - wrap a selection at ","position":{"start":{"line":457,"column":5,"offset":16193},"end":{"line":457,"column":28,"offset":16216}}},{"type":"raw","value":"<code class=\"language-text\">path</code>","position":{"start":{"line":457,"column":28,"offset":16216},"end":{"line":457,"column":34,"offset":16222}}},{"type":"text","value":" using function ","position":{"start":{"line":457,"column":34,"offset":16222},"end":{"line":457,"column":50,"offset":16238}}},{"type":"raw","value":"<code class=\"language-text\">wrapper</code>","position":{"start":{"line":457,"column":50,"offset":16238},"end":{"line":457,"column":59,"offset":16247}}},{"type":"text","value":". Apply ","position":{"start":{"line":457,"column":59,"offset":16247},"end":{"line":457,"column":67,"offset":16255}}},{"type":"raw","value":"<code class=\"language-text\">extractor</code>","position":{"start":{"line":457,"column":67,"offset":16255},"end":{"line":457,"column":78,"offset":16266}}},{"type":"text","value":" at the same path to get the result. This is used to get a result nested inside other result","position":{"start":{"line":457,"column":78,"offset":16266},"end":{"line":457,"column":170,"offset":16358}}}],"position":{"start":{"line":453,"column":3,"offset":16088},"end":{"line":457,"column":170,"offset":16358}}},{"type":"text","value":"\n"}],"position":{"start":{"line":453,"column":1,"offset":16086},"end":{"line":457,"column":170,"offset":16358}}},{"type":"text","value":"\n"}],"position":{"start":{"line":451,"column":1,"offset":15979},"end":{"line":457,"column":170,"offset":16358}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token literal-property property\">transforms</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// Wrap document takes a subtree as an AST node</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">WrapQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// path at which to apply wrapping and extracting</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'userById'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">subtree</span><span class=\"token operator\">:</span> SelectionSetNode</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// we create a wrapping AST Field</span>\n      <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> Kind<span class=\"token punctuation\">.</span><span class=\"token constant\">FIELD</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> Kind<span class=\"token punctuation\">.</span><span class=\"token constant\">NAME</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// that field is `address`</span>\n        <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'address'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Inside the field selection</span>\n      <span class=\"token literal-property property\">selectionSet</span><span class=\"token operator\">:</span> subtree<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// how to process the data result at path</span>\n    <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> result <span class=\"token operator\">&amp;&amp;</span> result<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":459,"column":1,"offset":16360},"end":{"line":480,"column":4,"offset":16900}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">ReplaceFieldWithFragment(targetSchema: GraphQLSchema, mapping: FieldToFragmentMapping)</code>","position":{"start":{"line":482,"column":3,"offset":16904},"end":{"line":482,"column":91,"offset":16992}}},{"type":"text","value":": Replace the given fields with an inline fragment. Used by ","position":{"start":{"line":482,"column":91,"offset":16992},"end":{"line":482,"column":151,"offset":17052}}},{"type":"raw","value":"<code class=\"language-text\">mergeSchemas</code>","position":{"start":{"line":482,"column":151,"offset":17052},"end":{"line":482,"column":165,"offset":17066}}},{"type":"text","value":" to handle the ","position":{"start":{"line":482,"column":165,"offset":17066},"end":{"line":482,"column":180,"offset":17081}}},{"type":"raw","value":"<code class=\"language-text\">fragment</code>","position":{"start":{"line":482,"column":180,"offset":17081},"end":{"line":482,"column":190,"offset":17091}}},{"type":"text","value":" option.","position":{"start":{"line":482,"column":190,"offset":17091},"end":{"line":482,"column":198,"offset":17099}}}],"position":{"start":{"line":482,"column":1,"offset":16902},"end":{"line":482,"column":198,"offset":17099}}},{"type":"text","value":"\n"}],"position":{"start":{"line":482,"column":1,"offset":16902},"end":{"line":482,"column":198,"offset":17099}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">FieldToFragmentMapping</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>typeName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>fieldName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> InlineFragmentNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>","position":{"start":{"line":484,"column":1,"offset":17101},"end":{"line":488,"column":4,"offset":17212}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"delegatetoschema-transforms","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#delegatetoschema-transforms","aria-label":"delegatetoschema transforms permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"delegateToSchema transforms","position":{"start":{"line":490,"column":4,"offset":17217},"end":{"line":490,"column":31,"offset":17244}}}],"position":{"start":{"line":490,"column":1,"offset":17214},"end":{"line":490,"column":31,"offset":17244}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following transforms are automatically applied by ","position":{"start":{"line":492,"column":1,"offset":17246},"end":{"line":492,"column":55,"offset":17300}}},{"type":"raw","value":"<code class=\"language-text\">delegateToSchema</code>","position":{"start":{"line":492,"column":55,"offset":17300},"end":{"line":492,"column":73,"offset":17318}}},{"type":"text","value":" during schema delegation, to translate between new and old types and fields:","position":{"start":{"line":492,"column":73,"offset":17318},"end":{"line":492,"column":150,"offset":17395}}}],"position":{"start":{"line":492,"column":1,"offset":17246},"end":{"line":492,"column":150,"offset":17395}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">AddArgumentsAsVariables</code>","position":{"start":{"line":494,"column":3,"offset":17399},"end":{"line":494,"column":28,"offset":17424}}},{"type":"text","value":": Given a schema and arguments passed to a root field, make those arguments document variables.","position":{"start":{"line":494,"column":28,"offset":17424},"end":{"line":494,"column":123,"offset":17519}}}],"position":{"start":{"line":494,"column":1,"offset":17397},"end":{"line":494,"column":123,"offset":17519}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">FilterToSchema</code>","position":{"start":{"line":495,"column":3,"offset":17522},"end":{"line":495,"column":19,"offset":17538}}},{"type":"text","value":": Given a schema and document, remove all fields, variables and fragments for types that don't exist in that schema.","position":{"start":{"line":495,"column":19,"offset":17538},"end":{"line":495,"column":135,"offset":17654}}}],"position":{"start":{"line":495,"column":1,"offset":17520},"end":{"line":495,"column":135,"offset":17654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">AddTypenameToAbstract</code>","position":{"start":{"line":496,"column":3,"offset":17657},"end":{"line":496,"column":26,"offset":17680}}},{"type":"text","value":": Add ","position":{"start":{"line":496,"column":26,"offset":17680},"end":{"line":496,"column":32,"offset":17686}}},{"type":"raw","value":"<code class=\"language-text\">__typename</code>","position":{"start":{"line":496,"column":32,"offset":17686},"end":{"line":496,"column":44,"offset":17698}}},{"type":"text","value":" to all abstract types in the document.","position":{"start":{"line":496,"column":44,"offset":17698},"end":{"line":496,"column":83,"offset":17737}}}],"position":{"start":{"line":496,"column":1,"offset":17655},"end":{"line":496,"column":83,"offset":17737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">CheckResultAndHandleErrors</code>","position":{"start":{"line":497,"column":3,"offset":17740},"end":{"line":497,"column":31,"offset":17768}}},{"type":"text","value":": Given a result from a subschema, propagate errors so that they match the correct subfield. Also provide the correct key if aliases are used.","position":{"start":{"line":497,"column":31,"offset":17768},"end":{"line":497,"column":173,"offset":17910}}}],"position":{"start":{"line":497,"column":1,"offset":17738},"end":{"line":497,"column":173,"offset":17910}}},{"type":"text","value":"\n"}],"position":{"start":{"line":494,"column":1,"offset":17397},"end":{"line":497,"column":173,"offset":17910}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By passing a custom ","position":{"start":{"line":499,"column":1,"offset":17912},"end":{"line":499,"column":21,"offset":17932}}},{"type":"raw","value":"<code class=\"language-text\">transforms</code>","position":{"start":{"line":499,"column":21,"offset":17932},"end":{"line":499,"column":33,"offset":17944}}},{"type":"text","value":" array to ","position":{"start":{"line":499,"column":33,"offset":17944},"end":{"line":499,"column":43,"offset":17954}}},{"type":"raw","value":"<code class=\"language-text\">delegateToSchema</code>","position":{"start":{"line":499,"column":43,"offset":17954},"end":{"line":499,"column":61,"offset":17972}}},{"type":"text","value":", it's possible to run additional transforms before these default transforms, though it is currently not possible to disable the default transforms.","position":{"start":{"line":499,"column":61,"offset":17972},"end":{"line":499,"column":209,"offset":18120}}}],"position":{"start":{"line":499,"column":1,"offset":17912},"end":{"line":499,"column":209,"offset":18120}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":500,"column":1,"offset":18121}}}}