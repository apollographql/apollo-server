version: 2.1

orbs:
  node: circleci/node@5.0.0
  secops: apollo/circleci-secops-orb@2.0.7

commands:
  setup-node:
    parameters:
      node-version:
        type: string
        default: ''
    steps:
      - checkout
      # We can consider using the CircleCI cache to cache Mise and Node, but it tends
      # to be pretty fast to install.
      - run:
          name: Install Mise
          command: |
            curl https://mise.run | MISE_VERSION=v2025.5.1 sh
      - when:
          condition: << parameters.node-version >>
          steps:
          - run: mise use node@<< parameters.node-version >>
      - run:
          name: Use Mise to configure the environment
          command: stty cols 80 && ~/.local/bin/mise install --verbose && mise ls && mise env --shell bash >> "$BASH_ENV" && cat "$BASH_ENV"
      - node/install-packages:
          cache-version: node-v<< parameters.node-version >>


jobs:
  NodeJS:
    parameters:
      node-version:
        type: string
    docker:
    - image: cimg/base:stable
    steps:
      - setup-node:
          node-version: <<parameters.node-version>>
      - run: npm run test:ci
      - run: codecov-cli upload-process
      - store_test_results:
          path: junit.xml

  Smoke test built package:
    docker:
    - image: cimg/base:stable
    steps:
      - setup-node
      - run: npm run test:smoke

  Full incremental delivery tests with graphql 17 alpha 2:
    docker:
    - image: cimg/base:stable
    environment:
      INCREMENTAL_DELIVERY_TESTS_ENABLED: t
      GRAPHQL_JS_VERSION: 17.0.0-alpha.2
    steps:
      - setup-node:
          node-version: "20"
      # Install a prerelease of graphql-js 17 with incremental delivery support.
      # --legacy-peer-deps because nothing expects v17 yet.
      - run: npm i --legacy-peer-deps "graphql@${GRAPHQL_JS_VERSION}"
      - run: npm run test:ci
      - run: codecov-cli upload-process
      - run: npm run test:smoke

  Test with recent graphql-js alpha:
    docker:
    - image: cimg/base:stable
    environment:
      GRAPHQL_JS_VERSION: 17.0.0-alpha.9
    steps:
      - setup-node:
          node-version: "20"
      # Install a newer prerelease of graphql-js 17; we do not yet support
      # its incremental delivery format.
      # --legacy-peer-deps because nothing expects v17 yet.
      - run: npm i --legacy-peer-deps "graphql@${GRAPHQL_JS_VERSION}"
      - run: npm run test:ci
      - run: npm run test:smoke

  Prettier:
    docker:
    - image: cimg/base:stable
    steps:
      - setup-node
      - run: npm run prettier-check

  ESLint:
    docker:
    - image: cimg/base:stable
    steps:
      - setup-node
      - run: npm run lint

  # Ensure that any PR that changes packages has a changeset on it (perhaps
  # an empty one created with `changeset --empty`).
  # We run the Changesets job itself on all branches so that we can require
  # it to pass, but we don't run any steps on the "Version Packages" PRs
  # themselves.
  Changesets:
    docker:
    - image: cimg/base:stable
    steps:
      - run: echo Ensure there is at least one step
      - unless:
          condition:
            matches:
              pattern: "^changeset-release/.+$"
              value: << pipeline.git.branch >>
          steps:
            - setup-node
            - run: npm run changeset-check

  Spell check:
    docker:
    - image: cimg/base:stable
    steps:
      - setup-node
      - run: npm run spell-check

  Codegen check:
    docker:
    - image: cimg/base:stable
    steps:
      - setup-node
      - run: npm run codegen-check

  # We make CI fail if any file contains FIX and ME right next to each other.
  # This means that when working on a big PR, you can throw in notes that you
  # are forced to come back to before merging the PR.  Note that we don't block
  # the tarball or publish steps on this, since you may want to try out builds
  # on branches that still contain unresolved problems. In order for this file
  # to not cause this job to fail, we obfuscate the target string by encoding
  # the last letter in in hex (\x45 = E).
  "Check for FIXM\x45":
    docker:
    - image: cimg/base:stable
    steps:
    - checkout
    - run:
        name: "Check for FIXM\x45"
        # ! means this fails if git grep succeeds, ie if there are any matches
        command: "! git grep FIXM\x45"

workflows:
  Build:
    jobs:
      - NodeJS:
          name: NodeJS << matrix.node-version >>
          matrix:
            parameters:
              node-version:
                - "20"
                - "22"
                - "24"
      - "Check for FIXM\x45"
      - Prettier
      - ESLint
      - Spell check
      - Codegen check
      - Smoke test built package
      - Full incremental delivery tests with graphql 17 alpha 2
      - Test with recent graphql-js alpha
      - Changesets
  security-scans:
    jobs:
      - secops/gitleaks:
          context:
            - platform-docker-ro
            - github-orb
            - secops-oidc
          git-base-revision: <<#pipeline.git.base_revision>><<pipeline.git.base_revision>><</pipeline.git.base_revision >>
          git-revision: << pipeline.git.revision >>
      - secops/semgrep:
          context:
            - secops-oidc
            - github-orb
          git-base-revision: <<#pipeline.git.base_revision>><<pipeline.git.base_revision>><</pipeline.git.base_revision >>
